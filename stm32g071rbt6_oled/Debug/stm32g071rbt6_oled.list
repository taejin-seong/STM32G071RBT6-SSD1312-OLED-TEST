
stm32g071rbt6_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000298c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08002a48  08002a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003398  08003398  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003398  08003398  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003398  08003398  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080033a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000018  080033b8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080033b8  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cd3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002628  00000000  00000000  00030d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00033340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  00033c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f2  00000000  00000000  00034478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107e1  00000000  00000000  0004d96a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b84  00000000  00000000  0005e14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1ccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e24  00000000  00000000  000f1d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002a30 	.word	0x08002a30

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08002a30 	.word	0x08002a30

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <apInit>:




void apInit(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  gpio_PinMode(_DEF_LED1, _DEF_OUTPUT_PULLUP);
 8000220:	2104      	movs	r1, #4
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f94e 	bl	80004c4 <gpio_PinMode>
}
 8000228:	46c0      	nop			; (mov r8, r8)
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <apMain>:


void apMain(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  ssd1312_Clear();
 8000234:	f000 fb36 	bl	80008a4 <ssd1312_Clear>
    gpio_PinWrite(_DEF_LED1, _DEF_LOW);
    delay_ms(100);

*/

    ssd1312_WriteString("Hello,",0,0);
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <apMain+0x24>)
 800023a:	2200      	movs	r2, #0
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f000 fc08 	bl	8000a54 <ssd1312_WriteString>
    ssd1312_WriteString("World!",2,0);
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <apMain+0x28>)
 8000246:	2200      	movs	r2, #0
 8000248:	2102      	movs	r1, #2
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fc02 	bl	8000a54 <ssd1312_WriteString>
    ssd1312_WriteString("Hello,",0,0);
 8000250:	e7f2      	b.n	8000238 <apMain+0x8>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	08002a48 	.word	0x08002a48
 8000258:	08002a50 	.word	0x08002a50

0800025c <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
    HAL_Init();
 8000262:	f000 fc3d 	bl	8000ae0 <HAL_Init>
    SystemClock_Config();
 8000266:	f000 f81f 	bl	80002a8 <SystemClock_Config>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <bspInit+0x30>)
 800026c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <bspInit+0x30>)
 8000270:	2101      	movs	r1, #1
 8000272:	430a      	orrs	r2, r1
 8000274:	635a      	str	r2, [r3, #52]	; 0x34
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <bspInit+0x30>)
 8000278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800027a:	2201      	movs	r2, #1
 800027c:	4013      	ands	r3, r2
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	b002      	add	sp, #8
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	40021000 	.word	0x40021000

08000290 <delay_ms>:


void delay_ms(uint32_t ms)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	0018      	movs	r0, r3
 800029c:	f000 fca6 	bl	8000bec <HAL_Delay>
}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b002      	add	sp, #8
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b093      	sub	sp, #76	; 0x4c
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2410      	movs	r4, #16
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2338      	movs	r3, #56	; 0x38
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 fbb1 	bl	8002a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	003b      	movs	r3, r7
 80002c0:	0018      	movs	r0, r3
 80002c2:	2310      	movs	r3, #16
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f002 fbaa 	bl	8002a20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 fcd9 	bl	8001c88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	2202      	movs	r2, #2
 80002da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	0052      	lsls	r2, r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2240      	movs	r2, #64	; 0x40
 80002f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2202      	movs	r2, #2
 80002fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2208      	movs	r2, #8
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	0292      	lsls	r2, r2, #10
 8000310:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	0492      	lsls	r2, r2, #18
 8000318:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	0592      	lsls	r2, r2, #22
 8000320:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	187b      	adds	r3, r7, r1
 8000324:	0018      	movs	r0, r3
 8000326:	f001 fcef 	bl	8001d08 <HAL_RCC_OscConfig>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800032e:	f000 f819 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	003b      	movs	r3, r7
 8000334:	2207      	movs	r2, #7
 8000336:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	003b      	movs	r3, r7
 800033a:	2202      	movs	r2, #2
 800033c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	003b      	movs	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000344:	003b      	movs	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034a:	003b      	movs	r3, r7
 800034c:	2102      	movs	r1, #2
 800034e:	0018      	movs	r0, r3
 8000350:	f001 fff4 	bl	800233c <HAL_RCC_ClockConfig>
 8000354:	1e03      	subs	r3, r0, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000358:	f000 f804 	bl	8000364 <Error_Handler>
  }
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b013      	add	sp, #76	; 0x4c
 8000362:	bd90      	pop	{r4, r7, pc}

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	e7fe      	b.n	800036c <Error_Handler+0x8>
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <HAL_MspInit+0x4c>)
 8000378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800037a:	4b10      	ldr	r3, [pc, #64]	; (80003bc <HAL_MspInit+0x4c>)
 800037c:	2101      	movs	r1, #1
 800037e:	430a      	orrs	r2, r1
 8000380:	641a      	str	r2, [r3, #64]	; 0x40
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <HAL_MspInit+0x4c>)
 8000384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000386:	2201      	movs	r2, #1
 8000388:	4013      	ands	r3, r2
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <HAL_MspInit+0x4c>)
 8000390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <HAL_MspInit+0x4c>)
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	0549      	lsls	r1, r1, #21
 8000398:	430a      	orrs	r2, r1
 800039a:	63da      	str	r2, [r3, #60]	; 0x3c
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <HAL_MspInit+0x4c>)
 800039e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	055b      	lsls	r3, r3, #21
 80003a4:	4013      	ands	r3, r2
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80003aa:	23c0      	movs	r3, #192	; 0xc0
 80003ac:	00db      	lsls	r3, r3, #3
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 fc40 	bl	8000c34 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b002      	add	sp, #8
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000

080003c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <NMI_Handler+0x4>

080003c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <HardFault_Handler+0x4>

080003cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e4:	f000 fbe6 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <SystemInit+0x14>)
 80003f6:	2280      	movs	r2, #128	; 0x80
 80003f8:	0512      	lsls	r2, r2, #20
 80003fa:	609a      	str	r2, [r3, #8]
#endif
}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	; (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f7ff fff0 	bl	80003f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	; (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	; (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	; (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	; (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f002 facf 	bl	80029d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800043a:	f002 fac1 	bl	80029c0 <main>

0800043e <LoopForever>:

LoopForever:
  b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800044c:	080033a0 	.word	0x080033a0
  ldr r2, =_sbss
 8000450:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000454:	2000008c 	.word	0x2000008c

08000458 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC1_COMP_IRQHandler>
	...

0800045c <gpio_Init>:




bool gpio_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
    bool ret = true;
 8000462:	1cfb      	adds	r3, r7, #3
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]



    for(int i = 0; i < GPIO_MAX_CH; i++)
 8000468:	2300      	movs	r3, #0
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	e01e      	b.n	80004ac <gpio_Init+0x50>
    {
        gpio_PinMode(i, gpio_tbl[i].mode);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	b2d8      	uxtb	r0, r3
 8000472:	4913      	ldr	r1, [pc, #76]	; (80004c0 <gpio_Init+0x64>)
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	0013      	movs	r3, r2
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	189b      	adds	r3, r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	18cb      	adds	r3, r1, r3
 8000480:	3308      	adds	r3, #8
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	0019      	movs	r1, r3
 8000486:	f000 f81d 	bl	80004c4 <gpio_PinMode>
        gpio_PinWrite(i, gpio_tbl[i].init_value);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	b2d8      	uxtb	r0, r3
 800048e:	490c      	ldr	r1, [pc, #48]	; (80004c0 <gpio_Init+0x64>)
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	0013      	movs	r3, r2
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	189b      	adds	r3, r3, r2
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	18cb      	adds	r3, r1, r3
 800049c:	330b      	adds	r3, #11
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	0019      	movs	r1, r3
 80004a2:	f000 f883 	bl	80005ac <gpio_PinWrite>
    for(int i = 0; i < GPIO_MAX_CH; i++)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3301      	adds	r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	dddd      	ble.n	800046e <gpio_Init+0x12>
    }


    return ret;
 80004b2:	1cfb      	adds	r3, r7, #3
 80004b4:	781b      	ldrb	r3, [r3, #0]
}
 80004b6:	0018      	movs	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000004 	.word	0x20000004

080004c4 <gpio_PinMode>:


bool gpio_PinMode(uint8_t ch, uint8_t mode)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	0002      	movs	r2, r0
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	701a      	strb	r2, [r3, #0]
 80004d0:	1dbb      	adds	r3, r7, #6
 80004d2:	1c0a      	adds	r2, r1, #0
 80004d4:	701a      	strb	r2, [r3, #0]
    bool ret = true;
 80004d6:	231f      	movs	r3, #31
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	2308      	movs	r3, #8
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	2314      	movs	r3, #20
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f002 fa99 	bl	8002a20 <memset>

    switch(mode)
 80004ee:	1dbb      	adds	r3, r7, #6
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b05      	cmp	r3, #5
 80004f4:	d834      	bhi.n	8000560 <gpio_PinMode+0x9c>
 80004f6:	009a      	lsls	r2, r3, #2
 80004f8:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <gpio_PinMode+0xe0>)
 80004fa:	18d3      	adds	r3, r2, r3
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	469f      	mov	pc, r3
    {
        case _DEF_INPUT:
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000500:	2108      	movs	r1, #8
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
            break;
 800050e:	e027      	b.n	8000560 <gpio_PinMode+0x9c>

        case _DEF_INPUT_PULLUP:
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2108      	movs	r1, #8
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2201      	movs	r2, #1
 800051c:	609a      	str	r2, [r3, #8]
            break;
 800051e:	e01f      	b.n	8000560 <gpio_PinMode+0x9c>

        case _DEF_INPUT_PULLDOWN:
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2108      	movs	r1, #8
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2202      	movs	r2, #2
 800052c:	609a      	str	r2, [r3, #8]
            break;
 800052e:	e017      	b.n	8000560 <gpio_PinMode+0x9c>

        case _DEF_OUTPUT:
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8000530:	2108      	movs	r1, #8
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2201      	movs	r2, #1
 8000536:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
            break;
 800053e:	e00f      	b.n	8000560 <gpio_PinMode+0x9c>

        case _DEF_OUTPUT_PULLUP:
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8000540:	2108      	movs	r1, #8
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2201      	movs	r2, #1
 800054c:	609a      	str	r2, [r3, #8]
            break;
 800054e:	e007      	b.n	8000560 <gpio_PinMode+0x9c>

        case _DEF_OUTPUT_PULLDWON:
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8000550:	2108      	movs	r1, #8
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2201      	movs	r2, #1
 8000556:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2202      	movs	r2, #2
 800055c:	609a      	str	r2, [r3, #8]
            break;
 800055e:	46c0      	nop			; (mov r8, r8)
      }


    GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	4910      	ldr	r1, [pc, #64]	; (80005a8 <gpio_PinMode+0xe4>)
 8000566:	0013      	movs	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	189b      	adds	r3, r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	18cb      	adds	r3, r1, r3
 8000570:	3304      	adds	r3, #4
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	2008      	movs	r0, #8
 8000576:	183b      	adds	r3, r7, r0
 8000578:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800057a:	1dfb      	adds	r3, r7, #7
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	490a      	ldr	r1, [pc, #40]	; (80005a8 <gpio_PinMode+0xe4>)
 8000580:	0013      	movs	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	189b      	adds	r3, r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	585b      	ldr	r3, [r3, r1]
 800058a:	183a      	adds	r2, r7, r0
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fc1a 	bl	8000dc8 <HAL_GPIO_Init>


    return ret;
 8000594:	231f      	movs	r3, #31
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	781b      	ldrb	r3, [r3, #0]
}
 800059a:	0018      	movs	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	b008      	add	sp, #32
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	08002a98 	.word	0x08002a98
 80005a8:	20000004 	.word	0x20000004

080005ac <gpio_PinWrite>:


void gpio_PinWrite(uint8_t ch, bool value)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	0002      	movs	r2, r0
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	1dbb      	adds	r3, r7, #6
 80005ba:	1c0a      	adds	r2, r1, #0
 80005bc:	701a      	strb	r2, [r3, #0]
    if( ch >= GPIO_MAX_CH)
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d147      	bne.n	8000656 <gpio_PinWrite+0xaa>
    {
        return ;
    }

    if (value == true)
 80005c6:	1dbb      	adds	r3, r7, #6
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d021      	beq.n	8000612 <gpio_PinWrite+0x66>
    {
          HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	4923      	ldr	r1, [pc, #140]	; (8000660 <gpio_PinWrite+0xb4>)
 80005d4:	0013      	movs	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	189b      	adds	r3, r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	5858      	ldr	r0, [r3, r1]
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	491f      	ldr	r1, [pc, #124]	; (8000660 <gpio_PinWrite+0xb4>)
 80005e4:	0013      	movs	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	189b      	adds	r3, r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	18cb      	adds	r3, r1, r3
 80005ee:	3304      	adds	r3, #4
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	b29c      	uxth	r4, r3
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	4919      	ldr	r1, [pc, #100]	; (8000660 <gpio_PinWrite+0xb4>)
 80005fa:	0013      	movs	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	189b      	adds	r3, r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	18cb      	adds	r3, r1, r3
 8000604:	3309      	adds	r3, #9
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	001a      	movs	r2, r3
 800060a:	0021      	movs	r1, r4
 800060c:	f000 fd40 	bl	8001090 <HAL_GPIO_WritePin>
 8000610:	e022      	b.n	8000658 <gpio_PinWrite+0xac>
    }
    else
    {
          HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	4912      	ldr	r1, [pc, #72]	; (8000660 <gpio_PinWrite+0xb4>)
 8000618:	0013      	movs	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	189b      	adds	r3, r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	5858      	ldr	r0, [r3, r1]
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	490e      	ldr	r1, [pc, #56]	; (8000660 <gpio_PinWrite+0xb4>)
 8000628:	0013      	movs	r3, r2
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	189b      	adds	r3, r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	18cb      	adds	r3, r1, r3
 8000632:	3304      	adds	r3, #4
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	b29c      	uxth	r4, r3
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	4908      	ldr	r1, [pc, #32]	; (8000660 <gpio_PinWrite+0xb4>)
 800063e:	0013      	movs	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	189b      	adds	r3, r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	18cb      	adds	r3, r1, r3
 8000648:	330a      	adds	r3, #10
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	001a      	movs	r2, r3
 800064e:	0021      	movs	r1, r4
 8000650:	f000 fd1e 	bl	8001090 <HAL_GPIO_WritePin>
 8000654:	e000      	b.n	8000658 <gpio_PinWrite+0xac>
        return ;
 8000656:	46c0      	nop			; (mov r8, r8)
    }

}
 8000658:	46bd      	mov	sp, r7
 800065a:	b003      	add	sp, #12
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	20000004 	.word	0x20000004

08000664 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_I2C1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_I2C1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_I2C1_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fd13 	bl	80010cc <HAL_I2C_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f7ff fe5b 	bl	8000364 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fa50 	bl	8001b58 <HAL_I2CEx_ConfigAnalogFilter>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f7ff fe52 	bl	8000364 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fa93 	bl	8001bf0 <HAL_I2CEx_ConfigDigitalFilter>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f7ff fe49 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000034 	.word	0x20000034
 80006dc:	40005400 	.word	0x40005400
 80006e0:	00602173 	.word	0x00602173

080006e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b097      	sub	sp, #92	; 0x5c
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	2344      	movs	r3, #68	; 0x44
 80006ee:	18fb      	adds	r3, r7, r3
 80006f0:	0018      	movs	r0, r3
 80006f2:	2314      	movs	r3, #20
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f002 f992 	bl	8002a20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	2410      	movs	r4, #16
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	2334      	movs	r3, #52	; 0x34
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f002 f98a 	bl	8002a20 <memset>
  if(i2cHandle->Instance==I2C1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a23      	ldr	r2, [pc, #140]	; (80007a0 <HAL_I2C_MspInit+0xbc>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d13f      	bne.n	8000796 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2220      	movs	r2, #32
 800071a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000722:	193b      	adds	r3, r7, r4
 8000724:	0018      	movs	r0, r3
 8000726:	f001 ff93 	bl	8002650 <HAL_RCCEx_PeriphCLKConfig>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800072e:	f7ff fe19 	bl	8000364 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <HAL_I2C_MspInit+0xc0>)
 8000734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <HAL_I2C_MspInit+0xc0>)
 8000738:	2101      	movs	r1, #1
 800073a:	430a      	orrs	r2, r1
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <HAL_I2C_MspInit+0xc0>)
 8000740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000742:	2201      	movs	r2, #1
 8000744:	4013      	ands	r3, r2
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800074a:	2144      	movs	r1, #68	; 0x44
 800074c:	187b      	adds	r3, r7, r1
 800074e:	22c0      	movs	r2, #192	; 0xc0
 8000750:	00d2      	lsls	r2, r2, #3
 8000752:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2212      	movs	r2, #18
 8000758:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2206      	movs	r2, #6
 800076a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	187a      	adds	r2, r7, r1
 800076e:	23a0      	movs	r3, #160	; 0xa0
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fb27 	bl	8000dc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_I2C_MspInit+0xc0>)
 800077c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_I2C_MspInit+0xc0>)
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0389      	lsls	r1, r1, #14
 8000784:	430a      	orrs	r2, r1
 8000786:	63da      	str	r2, [r3, #60]	; 0x3c
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_I2C_MspInit+0xc0>)
 800078a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	039b      	lsls	r3, r3, #14
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b017      	add	sp, #92	; 0x5c
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	40005400 	.word	0x40005400
 80007a4:	40021000 	.word	0x40021000

080007a8 <ssd1312_WriteCommand>:

/*
 *
 */
static void ssd1312_WriteCommand(uint8_t cmd)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	0002      	movs	r2, r0
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2]={0};      //Control Byte + Command Byte
 80007b4:	210c      	movs	r1, #12
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	801a      	strh	r2, [r3, #0]
    buffer[0]=(0<<7)|(0<<6);    //Co=0 , D/C=0
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
    buffer[1]=cmd;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	1dfa      	adds	r2, r7, #7
 80007c6:	7812      	ldrb	r2, [r2, #0]
 80007c8:	705a      	strb	r2, [r3, #1]

    HAL_I2C_Master_Transmit(&SSD1312_I2C_PORT, SSD1312_I2C_ADDR, (uint8_t*)buffer, 2, HAL_MAX_DELAY);
 80007ca:	187a      	adds	r2, r7, r1
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <ssd1312_WriteCommand+0x3c>)
 80007ce:	2301      	movs	r3, #1
 80007d0:	425b      	negs	r3, r3
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2302      	movs	r3, #2
 80007d6:	2178      	movs	r1, #120	; 0x78
 80007d8:	f000 fd0e 	bl	80011f8 <HAL_I2C_Master_Transmit>
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b004      	add	sp, #16
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000034 	.word	0x20000034

080007e8 <ssd1312_WriteData>:

/*
 *
 */
static void ssd1312_WriteData(uint8_t * buffer, size_t buff_size)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af04      	add	r7, sp, #16
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_Mem_Write(&SSD1312_I2C_PORT, SSD1312_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <ssd1312_WriteData+0x30>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	4252      	negs	r2, r2
 80007fc:	9202      	str	r2, [sp, #8]
 80007fe:	9301      	str	r3, [sp, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2301      	movs	r3, #1
 8000806:	2240      	movs	r2, #64	; 0x40
 8000808:	2178      	movs	r1, #120	; 0x78
 800080a:	f000 fdfd 	bl	8001408 <HAL_I2C_Mem_Write>
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	20000034 	.word	0x20000034

0800081c <ssd1312_Init>:

/*
 *
 */
void ssd1312_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    delay_ms(200);
 8000820:	20c8      	movs	r0, #200	; 0xc8
 8000822:	f7ff fd35 	bl	8000290 <delay_ms>


    ssd1312_WriteCommand(0xA8);    //Set Mux Ratio
 8000826:	20a8      	movs	r0, #168	; 0xa8
 8000828:	f7ff ffbe 	bl	80007a8 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x3F);    //64MUX
 800082c:	203f      	movs	r0, #63	; 0x3f
 800082e:	f7ff ffbb 	bl	80007a8 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xD3);    //Set Display Offset
 8000832:	20d3      	movs	r0, #211	; 0xd3
 8000834:	f7ff ffb8 	bl	80007a8 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x00);    //COM0
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff ffb5 	bl	80007a8 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0x40);    //Set Display Start Line
 800083e:	2040      	movs	r0, #64	; 0x40
 8000840:	f7ff ffb2 	bl	80007a8 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xA0);    //Set Segment re-map, Default 0xA0
 8000844:	20a0      	movs	r0, #160	; 0xa0
 8000846:	f7ff ffaf 	bl	80007a8 <ssd1312_WriteCommand>
                        //column address 127 is mapped to SEG0 (좌우 반전)

    ssd1312_WriteCommand(0xC8);    //Set COM Output Scan Direction, default 0xC0
 800084a:	20c8      	movs	r0, #200	; 0xc8
 800084c:	f7ff ffac 	bl	80007a8 <ssd1312_WriteCommand>
                        //remapped mode. Scan from COM[N-1] to COM0 (상하 반전)

    ssd1312_WriteCommand(0xDA);    //Set COM Pins hardware configuration
 8000850:	20da      	movs	r0, #218	; 0xda
 8000852:	f7ff ffa9 	bl	80007a8 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x12);
 8000856:	2012      	movs	r0, #18
 8000858:	f7ff ffa6 	bl	80007a8 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0x20);    //Set Memory Addressing Mode
 800085c:	2020      	movs	r0, #32
 800085e:	f7ff ffa3 	bl	80007a8 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x02);    //Page Addressing Mode
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff ffa0 	bl	80007a8 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0x81);    //Set Contrast Control
 8000868:	2081      	movs	r0, #129	; 0x81
 800086a:	f7ff ff9d 	bl	80007a8 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x7F);    //1~256
 800086e:	207f      	movs	r0, #127	; 0x7f
 8000870:	f7ff ff9a 	bl	80007a8 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xA4);    //Disable Entire Display On
 8000874:	20a4      	movs	r0, #164	; 0xa4
 8000876:	f7ff ff97 	bl	80007a8 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xA6);    //Set Normal Display
 800087a:	20a6      	movs	r0, #166	; 0xa6
 800087c:	f7ff ff94 	bl	80007a8 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xD5);    //Set Osc Frequency
 8000880:	20d5      	movs	r0, #213	; 0xd5
 8000882:	f7ff ff91 	bl	80007a8 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x80);
 8000886:	2080      	movs	r0, #128	; 0x80
 8000888:	f7ff ff8e 	bl	80007a8 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0x8D);    //Enable charge pump regulator
 800088c:	208d      	movs	r0, #141	; 0x8d
 800088e:	f7ff ff8b 	bl	80007a8 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x14);
 8000892:	2014      	movs	r0, #20
 8000894:	f7ff ff88 	bl	80007a8 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xAF);    //Display ON
 8000898:	20af      	movs	r0, #175	; 0xaf
 800089a:	f7ff ff85 	bl	80007a8 <ssd1312_WriteCommand>
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ssd1312_Clear>:

/*
 *
 */
void ssd1312_Clear(void)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b0a3      	sub	sp, #140	; 0x8c
 80008a8:	af00      	add	r7, sp, #0
    uint8_t buffer[128]={0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	3304      	adds	r3, #4
 80008b2:	227c      	movs	r2, #124	; 0x7c
 80008b4:	2100      	movs	r1, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f002 f8b2 	bl	8002a20 <memset>

    ssd1312_WriteCommand(0x00);
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff ff73 	bl	80007a8 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x10);
 80008c2:	2010      	movs	r0, #16
 80008c4:	f7ff ff70 	bl	80007a8 <ssd1312_WriteCommand>

    for(uint8_t i=0;i<8;i++)
 80008c8:	2387      	movs	r3, #135	; 0x87
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	e011      	b.n	80008f6 <ssd1312_Clear+0x52>
    {
      ssd1312_WriteCommand(0xB0+i);
 80008d2:	2487      	movs	r4, #135	; 0x87
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	3b50      	subs	r3, #80	; 0x50
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ff63 	bl	80007a8 <ssd1312_WriteCommand>
      ssd1312_WriteData(buffer,128);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff ff7e 	bl	80007e8 <ssd1312_WriteData>
    for(uint8_t i=0;i<8;i++)
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	3201      	adds	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	2387      	movs	r3, #135	; 0x87
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b07      	cmp	r3, #7
 80008fe:	d9e8      	bls.n	80008d2 <ssd1312_Clear+0x2e>
    }
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b023      	add	sp, #140	; 0x8c
 8000908:	bd90      	pop	{r4, r7, pc}

0800090a <ssd1312_SetCoord>:
/*
 *
 *
 */
void ssd1312_SetCoord(uint8_t page, uint8_t col)
{
 800090a:	b5b0      	push	{r4, r5, r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	0002      	movs	r2, r0
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	1dbb      	adds	r3, r7, #6
 8000918:	1c0a      	adds	r2, r1, #0
 800091a:	701a      	strb	r2, [r3, #0]
    uint8_t col_low=0x0F,col_high=0x1F;
 800091c:	240f      	movs	r4, #15
 800091e:	193b      	adds	r3, r7, r4
 8000920:	220f      	movs	r2, #15
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	200e      	movs	r0, #14
 8000926:	183b      	adds	r3, r7, r0
 8000928:	221f      	movs	r2, #31
 800092a:	701a      	strb	r2, [r3, #0]
    col_low=(col&0x0F);
 800092c:	193b      	adds	r3, r7, r4
 800092e:	1dba      	adds	r2, r7, #6
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	210f      	movs	r1, #15
 8000934:	400a      	ands	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
    col_high=0x10|((col>>4)&0x0F);
 8000938:	1dbb      	adds	r3, r7, #6
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	091b      	lsrs	r3, r3, #4
 800093e:	b2db      	uxtb	r3, r3
 8000940:	b25b      	sxtb	r3, r3
 8000942:	2210      	movs	r2, #16
 8000944:	4313      	orrs	r3, r2
 8000946:	b25a      	sxtb	r2, r3
 8000948:	0005      	movs	r5, r0
 800094a:	183b      	adds	r3, r7, r0
 800094c:	701a      	strb	r2, [r3, #0]
    ssd1312_WriteCommand(0xB0+page);
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	3b50      	subs	r3, #80	; 0x50
 8000954:	b2db      	uxtb	r3, r3
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff ff26 	bl	80007a8 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(col_low);
 800095c:	193b      	adds	r3, r7, r4
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ff21 	bl	80007a8 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(col_high);
 8000966:	197b      	adds	r3, r7, r5
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff ff1c 	bl	80007a8 <ssd1312_WriteCommand>
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b004      	add	sp, #16
 8000976:	bdb0      	pop	{r4, r5, r7, pc}

08000978 <ssd1312_WriteChar>:
/*
 *
 *
 */
void ssd1312_WriteChar(uint8_t character_Code, uint8_t page, uint16_t column)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b08b      	sub	sp, #44	; 0x2c
 800097c:	af00      	add	r7, sp, #0
 800097e:	0004      	movs	r4, r0
 8000980:	0008      	movs	r0, r1
 8000982:	0011      	movs	r1, r2
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	1c22      	adds	r2, r4, #0
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	1dbb      	adds	r3, r7, #6
 800098c:	1c02      	adds	r2, r0, #0
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	1c0a      	adds	r2, r1, #0
 8000994:	801a      	strh	r2, [r3, #0]
    uint8_t char_Buffer[FONT_WIDTH*2]={0};
 8000996:	230c      	movs	r3, #12
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	3304      	adds	r3, #4
 80009a0:	2214      	movs	r2, #20
 80009a2:	2100      	movs	r1, #0
 80009a4:	0018      	movs	r0, r3
 80009a6:	f002 f83b 	bl	8002a20 <memset>

    for(uint8_t i=0;i<FONT_WIDTH*2;i++)
 80009aa:	2327      	movs	r3, #39	; 0x27
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	e018      	b.n	80009e6 <ssd1312_WriteChar+0x6e>
    {
        char_Buffer[i]=ssd1312_Fonts[(character_Code-32)*(FONT_WIDTH*2)+i];
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	3b20      	subs	r3, #32
 80009ba:	001a      	movs	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	189b      	adds	r3, r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	001a      	movs	r2, r3
 80009c6:	2027      	movs	r0, #39	; 0x27
 80009c8:	183b      	adds	r3, r7, r0
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	18d2      	adds	r2, r2, r3
 80009ce:	183b      	adds	r3, r7, r0
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	491f      	ldr	r1, [pc, #124]	; (8000a50 <ssd1312_WriteChar+0xd8>)
 80009d4:	5c89      	ldrb	r1, [r1, r2]
 80009d6:	220c      	movs	r2, #12
 80009d8:	18ba      	adds	r2, r7, r2
 80009da:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i=0;i<FONT_WIDTH*2;i++)
 80009dc:	183b      	adds	r3, r7, r0
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	183b      	adds	r3, r7, r0
 80009e2:	3201      	adds	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	2327      	movs	r3, #39	; 0x27
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b17      	cmp	r3, #23
 80009ee:	d9e1      	bls.n	80009b4 <ssd1312_WriteChar+0x3c>
    }

    for(uint8_t i=0;i<2;i++)
 80009f0:	2326      	movs	r3, #38	; 0x26
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	e020      	b.n	8000a3c <ssd1312_WriteChar+0xc4>
    {
      ssd1312_SetCoord(page+i,column);
 80009fa:	1dba      	adds	r2, r7, #6
 80009fc:	2426      	movs	r4, #38	; 0x26
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	18d3      	adds	r3, r2, r3
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	0019      	movs	r1, r3
 8000a10:	0010      	movs	r0, r2
 8000a12:	f7ff ff7a 	bl	800090a <ssd1312_SetCoord>
      ssd1312_WriteData(&char_Buffer[i*FONT_WIDTH],FONT_WIDTH);
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	189b      	adds	r3, r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	001a      	movs	r2, r3
 8000a24:	230c      	movs	r3, #12
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	189b      	adds	r3, r3, r2
 8000a2a:	210c      	movs	r1, #12
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fedb 	bl	80007e8 <ssd1312_WriteData>
    for(uint8_t i=0;i<2;i++)
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	3201      	adds	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	2326      	movs	r3, #38	; 0x26
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d9d9      	bls.n	80009fa <ssd1312_WriteChar+0x82>
    }
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b00b      	add	sp, #44	; 0x2c
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	08002ab0 	.word	0x08002ab0

08000a54 <ssd1312_WriteString>:

/*
 *
 */
void ssd1312_WriteString(char *str, uint8_t page, uint8_t col)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	0008      	movs	r0, r1
 8000a5e:	0011      	movs	r1, r2
 8000a60:	1cfb      	adds	r3, r7, #3
 8000a62:	1c02      	adds	r2, r0, #0
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	1cbb      	adds	r3, r7, #2
 8000a68:	1c0a      	adds	r2, r1, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
    while(*str)
 8000a6c:	e021      	b.n	8000ab2 <ssd1312_WriteString+0x5e>
    {
        if((127<col+FONT_WIDTH))
 8000a6e:	1cbb      	adds	r3, r7, #2
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b73      	cmp	r3, #115	; 0x73
 8000a74:	d90b      	bls.n	8000a8e <ssd1312_WriteString+0x3a>
        {
            if(page==6)
 8000a76:	1cfb      	adds	r3, r7, #3
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d01e      	beq.n	8000abc <ssd1312_WriteString+0x68>
            {
                break;
            }
            page+=2;
 8000a7e:	1cfb      	adds	r3, r7, #3
 8000a80:	1cfa      	adds	r2, r7, #3
 8000a82:	7812      	ldrb	r2, [r2, #0]
 8000a84:	3202      	adds	r2, #2
 8000a86:	701a      	strb	r2, [r3, #0]
            col=0;
 8000a88:	1cbb      	adds	r3, r7, #2
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
        }
        ssd1312_WriteChar(*str,page,col);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7818      	ldrb	r0, [r3, #0]
 8000a92:	1cbb      	adds	r3, r7, #2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	1cfb      	adds	r3, r7, #3
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	f7ff ff6b 	bl	8000978 <ssd1312_WriteChar>

        col+=FONT_WIDTH;
 8000aa2:	1cbb      	adds	r3, r7, #2
 8000aa4:	1cba      	adds	r2, r7, #2
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	320c      	adds	r2, #12
 8000aaa:	701a      	strb	r2, [r3, #0]
        str++;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
    while(*str)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1d9      	bne.n	8000a6e <ssd1312_WriteString+0x1a>
    }
}
 8000aba:	e000      	b.n	8000abe <ssd1312_WriteString+0x6a>
                break;
 8000abc:	46c0      	nop			; (mov r8, r8)
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <hwInit>:




void hwInit(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  bspInit();
 8000aca:	f7ff fbc7 	bl	800025c <bspInit>

  //TODO: HW초기화설정(3)
  MX_I2C1_Init();
 8000ace:	f7ff fdc9 	bl	8000664 <MX_I2C1_Init>
  gpio_Init();
 8000ad2:	f7ff fcc3 	bl	800045c <gpio_Init>
  ssd1312_Init();
 8000ad6:	f7ff fea1 	bl	800081c <ssd1312_Init>


}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_Init+0x3c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_Init+0x3c>)
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	0049      	lsls	r1, r1, #1
 8000af6:	430a      	orrs	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afa:	2003      	movs	r0, #3
 8000afc:	f000 f810 	bl	8000b20 <HAL_InitTick>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	e001      	b.n	8000b10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff fc30 	bl	8000370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b10:	1dfb      	adds	r3, r7, #7
 8000b12:	781b      	ldrb	r3, [r3, #0]
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <HAL_InitTick+0x88>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d02b      	beq.n	8000b90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_InitTick+0x8c>)
 8000b3a:	681c      	ldr	r4, [r3, #0]
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_InitTick+0x88>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	0019      	movs	r1, r3
 8000b42:	23fa      	movs	r3, #250	; 0xfa
 8000b44:	0098      	lsls	r0, r3, #2
 8000b46:	f7ff fadd 	bl	8000104 <__udivsi3>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	0020      	movs	r0, r4
 8000b50:	f7ff fad8 	bl	8000104 <__udivsi3>
 8000b54:	0003      	movs	r3, r0
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 f929 	bl	8000dae <HAL_SYSTICK_Config>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d112      	bne.n	8000b86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d80a      	bhi.n	8000b7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	425b      	negs	r3, r3
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 f908 	bl	8000d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_InitTick+0x90>)
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e00d      	b.n	8000b98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	e008      	b.n	8000b98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b86:	230f      	movs	r3, #15
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e003      	b.n	8000b98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b90:	230f      	movs	r3, #15
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	781b      	ldrb	r3, [r3, #0]
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b005      	add	sp, #20
 8000ba4:	bd90      	pop	{r4, r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	20000014 	.word	0x20000014
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000010 	.word	0x20000010

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	18d2      	adds	r2, r2, r3
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	20000014 	.word	0x20000014
 8000bd4:	20000088 	.word	0x20000088

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	20000088 	.word	0x20000088

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff0 	bl	8000bd8 <HAL_GetTick>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3301      	adds	r3, #1
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	189b      	adds	r3, r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	f7ff ffe0 	bl	8000bd8 <HAL_GetTick>
 8000c18:	0002      	movs	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000014 	.word	0x20000014

08000c34 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	0019      	movs	r1, r3
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	fffff9ff 	.word	0xfffff9ff

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	0002      	movs	r2, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b7f      	cmp	r3, #127	; 0x7f
 8000c74:	d828      	bhi.n	8000cc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c76:	4a2f      	ldr	r2, [pc, #188]	; (8000d34 <__NVIC_SetPriority+0xd4>)
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	33c0      	adds	r3, #192	; 0xc0
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	589b      	ldr	r3, [r3, r2]
 8000c86:	1dfa      	adds	r2, r7, #7
 8000c88:	7812      	ldrb	r2, [r2, #0]
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	400a      	ands	r2, r1
 8000c90:	00d2      	lsls	r2, r2, #3
 8000c92:	21ff      	movs	r1, #255	; 0xff
 8000c94:	4091      	lsls	r1, r2
 8000c96:	000a      	movs	r2, r1
 8000c98:	43d2      	mvns	r2, r2
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	019b      	lsls	r3, r3, #6
 8000ca2:	22ff      	movs	r2, #255	; 0xff
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	0018      	movs	r0, r3
 8000cac:	2303      	movs	r3, #3
 8000cae:	4003      	ands	r3, r0
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb4:	481f      	ldr	r0, [pc, #124]	; (8000d34 <__NVIC_SetPriority+0xd4>)
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	33c0      	adds	r3, #192	; 0xc0
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cc6:	e031      	b.n	8000d2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc8:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <__NVIC_SetPriority+0xd8>)
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	0019      	movs	r1, r3
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	400b      	ands	r3, r1
 8000cd4:	3b08      	subs	r3, #8
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3306      	adds	r3, #6
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	3304      	adds	r3, #4
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	1dfa      	adds	r2, r7, #7
 8000ce4:	7812      	ldrb	r2, [r2, #0]
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	2203      	movs	r2, #3
 8000cea:	400a      	ands	r2, r1
 8000cec:	00d2      	lsls	r2, r2, #3
 8000cee:	21ff      	movs	r1, #255	; 0xff
 8000cf0:	4091      	lsls	r1, r2
 8000cf2:	000a      	movs	r2, r1
 8000cf4:	43d2      	mvns	r2, r2
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	019b      	lsls	r3, r3, #6
 8000cfe:	22ff      	movs	r2, #255	; 0xff
 8000d00:	401a      	ands	r2, r3
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	0018      	movs	r0, r3
 8000d08:	2303      	movs	r3, #3
 8000d0a:	4003      	ands	r3, r0
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <__NVIC_SetPriority+0xd8>)
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	001c      	movs	r4, r3
 8000d18:	230f      	movs	r3, #15
 8000d1a:	4023      	ands	r3, r4
 8000d1c:	3b08      	subs	r3, #8
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	430a      	orrs	r2, r1
 8000d22:	3306      	adds	r3, #6
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	18c3      	adds	r3, r0, r3
 8000d28:	3304      	adds	r3, #4
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b003      	add	sp, #12
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	1e5a      	subs	r2, r3, #1
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	045b      	lsls	r3, r3, #17
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d301      	bcc.n	8000d54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d50:	2301      	movs	r3, #1
 8000d52:	e010      	b.n	8000d76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <SysTick_Config+0x44>)
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	425b      	negs	r3, r3
 8000d60:	2103      	movs	r1, #3
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff ff7c 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SysTick_Config+0x44>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SysTick_Config+0x44>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	0018      	movs	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	210f      	movs	r1, #15
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	1c02      	adds	r2, r0, #0
 8000d94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff ff5d 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff ffbf 	bl	8000d3c <SysTick_Config>
 8000dbe:	0003      	movs	r3, r0
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b002      	add	sp, #8
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd6:	e147      	b.n	8001068 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2101      	movs	r1, #1
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4091      	lsls	r1, r2
 8000de2:	000a      	movs	r2, r1
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d100      	bne.n	8000df0 <HAL_GPIO_Init+0x28>
 8000dee:	e138      	b.n	8001062 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	4013      	ands	r3, r2
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d005      	beq.n	8000e08 <HAL_GPIO_Init+0x40>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2203      	movs	r2, #3
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d130      	bne.n	8000e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	409a      	lsls	r2, r3
 8000e16:	0013      	movs	r3, r2
 8000e18:	43da      	mvns	r2, r3
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	0013      	movs	r3, r2
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3e:	2201      	movs	r2, #1
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	43da      	mvns	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	2201      	movs	r2, #1
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d017      	beq.n	8000ea6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	43da      	mvns	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d123      	bne.n	8000efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	58d3      	ldr	r3, [r2, r3]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	691a      	ldr	r2, [r3, #16]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2107      	movs	r1, #7
 8000ede:	400b      	ands	r3, r1
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	6939      	ldr	r1, [r7, #16]
 8000ef8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2203      	movs	r2, #3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	23c0      	movs	r3, #192	; 0xc0
 8000f34:	029b      	lsls	r3, r3, #10
 8000f36:	4013      	ands	r3, r2
 8000f38:	d100      	bne.n	8000f3c <HAL_GPIO_Init+0x174>
 8000f3a:	e092      	b.n	8001062 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f3c:	4a50      	ldr	r2, [pc, #320]	; (8001080 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3318      	adds	r3, #24
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	589b      	ldr	r3, [r3, r2]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	220f      	movs	r2, #15
 8000f54:	409a      	lsls	r2, r3
 8000f56:	0013      	movs	r3, r2
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	23a0      	movs	r3, #160	; 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d013      	beq.n	8000f92 <HAL_GPIO_Init+0x1ca>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a45      	ldr	r2, [pc, #276]	; (8001084 <HAL_GPIO_Init+0x2bc>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d00d      	beq.n	8000f8e <HAL_GPIO_Init+0x1c6>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a44      	ldr	r2, [pc, #272]	; (8001088 <HAL_GPIO_Init+0x2c0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x1c2>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_GPIO_Init+0x2c4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_GPIO_Init+0x1be>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x1cc>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x1cc>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x1cc>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x1cc>
 8000f92:	2300      	movs	r3, #0
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	2103      	movs	r1, #3
 8000f98:	400a      	ands	r2, r1
 8000f9a:	00d2      	lsls	r2, r2, #3
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fa4:	4936      	ldr	r1, [pc, #216]	; (8001080 <HAL_GPIO_Init+0x2b8>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3318      	adds	r3, #24
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb2:	4b33      	ldr	r3, [pc, #204]	; (8001080 <HAL_GPIO_Init+0x2b8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	035b      	lsls	r3, r3, #13
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_GPIO_Init+0x2b8>)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_GPIO_Init+0x2b8>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	039b      	lsls	r3, r3, #14
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HAL_GPIO_Init+0x2b8>)
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001006:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <HAL_GPIO_Init+0x2b8>)
 8001008:	2384      	movs	r3, #132	; 0x84
 800100a:	58d3      	ldr	r3, [r2, r3]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	029b      	lsls	r3, r3, #10
 8001020:	4013      	ands	r3, r2
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102c:	4914      	ldr	r1, [pc, #80]	; (8001080 <HAL_GPIO_Init+0x2b8>)
 800102e:	2284      	movs	r2, #132	; 0x84
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <HAL_GPIO_Init+0x2b8>)
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	58d3      	ldr	r3, [r2, r3]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	025b      	lsls	r3, r3, #9
 800104e:	4013      	ands	r3, r2
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105a:	4909      	ldr	r1, [pc, #36]	; (8001080 <HAL_GPIO_Init+0x2b8>)
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	40da      	lsrs	r2, r3
 8001070:	1e13      	subs	r3, r2, #0
 8001072:	d000      	beq.n	8001076 <HAL_GPIO_Init+0x2ae>
 8001074:	e6b0      	b.n	8000dd8 <HAL_GPIO_Init+0x10>
  }
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b006      	add	sp, #24
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021800 	.word	0x40021800
 8001084:	50000400 	.word	0x50000400
 8001088:	50000800 	.word	0x50000800
 800108c:	50000c00 	.word	0x50000c00

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	0008      	movs	r0, r1
 800109a:	0011      	movs	r1, r2
 800109c:	1cbb      	adds	r3, r7, #2
 800109e:	1c02      	adds	r2, r0, #0
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	1c7b      	adds	r3, r7, #1
 80010a4:	1c0a      	adds	r2, r1, #0
 80010a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a8:	1c7b      	adds	r3, r7, #1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b0:	1cbb      	adds	r3, r7, #2
 80010b2:	881a      	ldrh	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b8:	e003      	b.n	80010c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ba:	1cbb      	adds	r3, r7, #2
 80010bc:	881a      	ldrh	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e082      	b.n	80011e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2241      	movs	r2, #65	; 0x41
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d107      	bne.n	80010fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2240      	movs	r2, #64	; 0x40
 80010ee:	2100      	movs	r1, #0
 80010f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff faf5 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2241      	movs	r2, #65	; 0x41
 80010fe:	2124      	movs	r1, #36	; 0x24
 8001100:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	438a      	bics	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4934      	ldr	r1, [pc, #208]	; (80011ec <HAL_I2C_Init+0x120>)
 800111c:	400a      	ands	r2, r1
 800111e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4931      	ldr	r1, [pc, #196]	; (80011f0 <HAL_I2C_Init+0x124>)
 800112c:	400a      	ands	r2, r1
 800112e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d108      	bne.n	800114a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0209      	lsls	r1, r1, #8
 8001144:	430a      	orrs	r2, r1
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	e007      	b.n	800115a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2184      	movs	r1, #132	; 0x84
 8001154:	0209      	lsls	r1, r1, #8
 8001156:	430a      	orrs	r2, r1
 8001158:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d104      	bne.n	800116c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	491f      	ldr	r1, [pc, #124]	; (80011f4 <HAL_I2C_Init+0x128>)
 8001178:	430a      	orrs	r2, r1
 800117a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	491a      	ldr	r1, [pc, #104]	; (80011f0 <HAL_I2C_Init+0x124>)
 8001188:	400a      	ands	r2, r1
 800118a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	431a      	orrs	r2, r3
 8001196:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69d9      	ldr	r1, [r3, #28]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1a      	ldr	r2, [r3, #32]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	430a      	orrs	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2241      	movs	r2, #65	; 0x41
 80011d0:	2120      	movs	r1, #32
 80011d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2242      	movs	r2, #66	; 0x42
 80011de:	2100      	movs	r1, #0
 80011e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b002      	add	sp, #8
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	f0ffffff 	.word	0xf0ffffff
 80011f0:	ffff7fff 	.word	0xffff7fff
 80011f4:	02008000 	.word	0x02008000

080011f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	0008      	movs	r0, r1
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	0019      	movs	r1, r3
 8001206:	230a      	movs	r3, #10
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	1c02      	adds	r2, r0, #0
 800120c:	801a      	strh	r2, [r3, #0]
 800120e:	2308      	movs	r3, #8
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	1c0a      	adds	r2, r1, #0
 8001214:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2241      	movs	r2, #65	; 0x41
 800121a:	5c9b      	ldrb	r3, [r3, r2]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b20      	cmp	r3, #32
 8001220:	d000      	beq.n	8001224 <HAL_I2C_Master_Transmit+0x2c>
 8001222:	e0e7      	b.n	80013f4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2240      	movs	r2, #64	; 0x40
 8001228:	5c9b      	ldrb	r3, [r3, r2]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_I2C_Master_Transmit+0x3a>
 800122e:	2302      	movs	r3, #2
 8001230:	e0e1      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2240      	movs	r2, #64	; 0x40
 8001236:	2101      	movs	r1, #1
 8001238:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800123a:	f7ff fccd 	bl	8000bd8 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	0219      	lsls	r1, r3, #8
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2319      	movs	r3, #25
 800124e:	2201      	movs	r2, #1
 8001250:	f000 fa8e 	bl	8001770 <I2C_WaitOnFlagUntilTimeout>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0cc      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2241      	movs	r2, #65	; 0x41
 8001260:	2121      	movs	r1, #33	; 0x21
 8001262:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2242      	movs	r2, #66	; 0x42
 8001268:	2110      	movs	r1, #16
 800126a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2208      	movs	r2, #8
 800127c:	18ba      	adds	r2, r7, r2
 800127e:	8812      	ldrh	r2, [r2, #0]
 8001280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800128c:	b29b      	uxth	r3, r3
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	d911      	bls.n	80012b6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	22ff      	movs	r2, #255	; 0xff
 8001296:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129c:	b2da      	uxtb	r2, r3
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	045c      	lsls	r4, r3, #17
 80012a2:	230a      	movs	r3, #10
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	8819      	ldrh	r1, [r3, #0]
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	4b55      	ldr	r3, [pc, #340]	; (8001400 <HAL_I2C_Master_Transmit+0x208>)
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	0023      	movs	r3, r4
 80012b0:	f000 fc18 	bl	8001ae4 <I2C_TransferConfig>
 80012b4:	e075      	b.n	80013a2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	049c      	lsls	r4, r3, #18
 80012ca:	230a      	movs	r3, #10
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	8819      	ldrh	r1, [r3, #0]
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_I2C_Master_Transmit+0x208>)
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	0023      	movs	r3, r4
 80012d8:	f000 fc04 	bl	8001ae4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80012dc:	e061      	b.n	80013a2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	0018      	movs	r0, r3
 80012e6:	f000 fa82 	bl	80017ee <I2C_WaitOnTXISFlagUntilTimeout>
 80012ea:	1e03      	subs	r3, r0, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e081      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	3b01      	subs	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d03a      	beq.n	80013a2 <HAL_I2C_Master_Transmit+0x1aa>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001330:	2b00      	cmp	r3, #0
 8001332:	d136      	bne.n	80013a2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	0013      	movs	r3, r2
 800133e:	2200      	movs	r2, #0
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	f000 fa15 	bl	8001770 <I2C_WaitOnFlagUntilTimeout>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d001      	beq.n	800134e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e053      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001352:	b29b      	uxth	r3, r3
 8001354:	2bff      	cmp	r3, #255	; 0xff
 8001356:	d911      	bls.n	800137c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	22ff      	movs	r2, #255	; 0xff
 800135c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001362:	b2da      	uxtb	r2, r3
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	045c      	lsls	r4, r3, #17
 8001368:	230a      	movs	r3, #10
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	8819      	ldrh	r1, [r3, #0]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	2300      	movs	r3, #0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	0023      	movs	r3, r4
 8001376:	f000 fbb5 	bl	8001ae4 <I2C_TransferConfig>
 800137a:	e012      	b.n	80013a2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001380:	b29a      	uxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138a:	b2da      	uxtb	r2, r3
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	049c      	lsls	r4, r3, #18
 8001390:	230a      	movs	r3, #10
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	8819      	ldrh	r1, [r3, #0]
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	2300      	movs	r3, #0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	0023      	movs	r3, r4
 800139e:	f000 fba1 	bl	8001ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d198      	bne.n	80012de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 fa5a 	bl	800186c <I2C_WaitOnSTOPFlagUntilTimeout>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e01a      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2220      	movs	r2, #32
 80013c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	490c      	ldr	r1, [pc, #48]	; (8001404 <HAL_I2C_Master_Transmit+0x20c>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2241      	movs	r2, #65	; 0x41
 80013dc:	2120      	movs	r1, #32
 80013de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2242      	movs	r2, #66	; 0x42
 80013e4:	2100      	movs	r1, #0
 80013e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	2100      	movs	r1, #0
 80013ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e000      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80013f4:	2302      	movs	r3, #2
  }
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b007      	add	sp, #28
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	80002000 	.word	0x80002000
 8001404:	fe00e800 	.word	0xfe00e800

08001408 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af02      	add	r7, sp, #8
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	000c      	movs	r4, r1
 8001412:	0010      	movs	r0, r2
 8001414:	0019      	movs	r1, r3
 8001416:	230a      	movs	r3, #10
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	1c22      	adds	r2, r4, #0
 800141c:	801a      	strh	r2, [r3, #0]
 800141e:	2308      	movs	r3, #8
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	1c02      	adds	r2, r0, #0
 8001424:	801a      	strh	r2, [r3, #0]
 8001426:	1dbb      	adds	r3, r7, #6
 8001428:	1c0a      	adds	r2, r1, #0
 800142a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2241      	movs	r2, #65	; 0x41
 8001430:	5c9b      	ldrb	r3, [r3, r2]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b20      	cmp	r3, #32
 8001436:	d000      	beq.n	800143a <HAL_I2C_Mem_Write+0x32>
 8001438:	e10c      	b.n	8001654 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <HAL_I2C_Mem_Write+0x42>
 8001440:	232c      	movs	r3, #44	; 0x2c
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d105      	bne.n	8001456 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0ff      	b.n	8001656 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	5c9b      	ldrb	r3, [r3, r2]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_I2C_Mem_Write+0x5c>
 8001460:	2302      	movs	r3, #2
 8001462:	e0f8      	b.n	8001656 <HAL_I2C_Mem_Write+0x24e>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2240      	movs	r2, #64	; 0x40
 8001468:	2101      	movs	r1, #1
 800146a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800146c:	f7ff fbb4 	bl	8000bd8 <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	0219      	lsls	r1, r3, #8
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2319      	movs	r3, #25
 8001480:	2201      	movs	r2, #1
 8001482:	f000 f975 	bl	8001770 <I2C_WaitOnFlagUntilTimeout>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0e3      	b.n	8001656 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2241      	movs	r2, #65	; 0x41
 8001492:	2121      	movs	r1, #33	; 0x21
 8001494:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2242      	movs	r2, #66	; 0x42
 800149a:	2140      	movs	r1, #64	; 0x40
 800149c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	222c      	movs	r2, #44	; 0x2c
 80014ae:	18ba      	adds	r2, r7, r2
 80014b0:	8812      	ldrh	r2, [r2, #0]
 80014b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014ba:	1dbb      	adds	r3, r7, #6
 80014bc:	881c      	ldrh	r4, [r3, #0]
 80014be:	2308      	movs	r3, #8
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	881a      	ldrh	r2, [r3, #0]
 80014c4:	230a      	movs	r3, #10
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	8819      	ldrh	r1, [r3, #0]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	0023      	movs	r3, r4
 80014d6:	f000 f8c5 	bl	8001664 <I2C_RequestMemoryWrite>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d005      	beq.n	80014ea <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	2100      	movs	r1, #0
 80014e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0b5      	b.n	8001656 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	2bff      	cmp	r3, #255	; 0xff
 80014f2:	d911      	bls.n	8001518 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	22ff      	movs	r2, #255	; 0xff
 80014f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	045c      	lsls	r4, r3, #17
 8001504:	230a      	movs	r3, #10
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	8819      	ldrh	r1, [r3, #0]
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	2300      	movs	r3, #0
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	0023      	movs	r3, r4
 8001512:	f000 fae7 	bl	8001ae4 <I2C_TransferConfig>
 8001516:	e012      	b.n	800153e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151c:	b29a      	uxth	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001526:	b2da      	uxtb	r2, r3
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	049c      	lsls	r4, r3, #18
 800152c:	230a      	movs	r3, #10
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	8819      	ldrh	r1, [r3, #0]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	2300      	movs	r3, #0
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	0023      	movs	r3, r4
 800153a:	f000 fad3 	bl	8001ae4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	0018      	movs	r0, r3
 8001546:	f000 f952 	bl	80017ee <I2C_WaitOnTXISFlagUntilTimeout>
 800154a:	1e03      	subs	r3, r0, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e081      	b.n	8001656 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29b      	uxth	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800157a:	3b01      	subs	r3, #1
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001586:	b29b      	uxth	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d03a      	beq.n	8001602 <HAL_I2C_Mem_Write+0x1fa>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d136      	bne.n	8001602 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	0013      	movs	r3, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	f000 f8e5 	bl	8001770 <I2C_WaitOnFlagUntilTimeout>
 80015a6:	1e03      	subs	r3, r0, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e053      	b.n	8001656 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	2bff      	cmp	r3, #255	; 0xff
 80015b6:	d911      	bls.n	80015dc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	045c      	lsls	r4, r3, #17
 80015c8:	230a      	movs	r3, #10
 80015ca:	18fb      	adds	r3, r7, r3
 80015cc:	8819      	ldrh	r1, [r3, #0]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	2300      	movs	r3, #0
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	0023      	movs	r3, r4
 80015d6:	f000 fa85 	bl	8001ae4 <I2C_TransferConfig>
 80015da:	e012      	b.n	8001602 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	049c      	lsls	r4, r3, #18
 80015f0:	230a      	movs	r3, #10
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	8819      	ldrh	r1, [r3, #0]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	2300      	movs	r3, #0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	0023      	movs	r3, r4
 80015fe:	f000 fa71 	bl	8001ae4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001606:	b29b      	uxth	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d198      	bne.n	800153e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	0018      	movs	r0, r3
 8001614:	f000 f92a 	bl	800186c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e01a      	b.n	8001656 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2220      	movs	r2, #32
 8001626:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	490b      	ldr	r1, [pc, #44]	; (8001660 <HAL_I2C_Mem_Write+0x258>)
 8001634:	400a      	ands	r2, r1
 8001636:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2241      	movs	r2, #65	; 0x41
 800163c:	2120      	movs	r1, #32
 800163e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2242      	movs	r2, #66	; 0x42
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	2100      	movs	r1, #0
 800164e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e000      	b.n	8001656 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001654:	2302      	movs	r3, #2
  }
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b007      	add	sp, #28
 800165c:	bd90      	pop	{r4, r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	fe00e800 	.word	0xfe00e800

08001664 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	000c      	movs	r4, r1
 800166e:	0010      	movs	r0, r2
 8001670:	0019      	movs	r1, r3
 8001672:	250a      	movs	r5, #10
 8001674:	197b      	adds	r3, r7, r5
 8001676:	1c22      	adds	r2, r4, #0
 8001678:	801a      	strh	r2, [r3, #0]
 800167a:	2308      	movs	r3, #8
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	1c02      	adds	r2, r0, #0
 8001680:	801a      	strh	r2, [r3, #0]
 8001682:	1dbb      	adds	r3, r7, #6
 8001684:	1c0a      	adds	r2, r1, #0
 8001686:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001688:	1dbb      	adds	r3, r7, #6
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	045c      	lsls	r4, r3, #17
 8001692:	197b      	adds	r3, r7, r5
 8001694:	8819      	ldrh	r1, [r3, #0]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <I2C_RequestMemoryWrite+0xc4>)
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	0023      	movs	r3, r4
 800169e:	f000 fa21 	bl	8001ae4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a4:	6a39      	ldr	r1, [r7, #32]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f000 f8a0 	bl	80017ee <I2C_WaitOnTXISFlagUntilTimeout>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d001      	beq.n	80016b6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e033      	b.n	800171e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016b6:	1dbb      	adds	r3, r7, #6
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016be:	2308      	movs	r3, #8
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	629a      	str	r2, [r3, #40]	; 0x28
 80016cc:	e019      	b.n	8001702 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016ce:	2308      	movs	r3, #8
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e2:	6a39      	ldr	r1, [r7, #32]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	0018      	movs	r0, r3
 80016e8:	f000 f881 	bl	80017ee <I2C_WaitOnTXISFlagUntilTimeout>
 80016ec:	1e03      	subs	r3, r0, #0
 80016ee:	d001      	beq.n	80016f4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e014      	b.n	800171e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016f4:	2308      	movs	r3, #8
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001702:	6a3a      	ldr	r2, [r7, #32]
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	0013      	movs	r3, r2
 800170c:	2200      	movs	r2, #0
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	f000 f82e 	bl	8001770 <I2C_WaitOnFlagUntilTimeout>
 8001714:	1e03      	subs	r3, r0, #0
 8001716:	d001      	beq.n	800171c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b004      	add	sp, #16
 8001724:	bdb0      	pop	{r4, r5, r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	80002000 	.word	0x80002000

0800172c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	2b02      	cmp	r3, #2
 8001740:	d103      	bne.n	800174a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2201      	movs	r2, #1
 8001752:	4013      	ands	r3, r2
 8001754:	2b01      	cmp	r3, #1
 8001756:	d007      	beq.n	8001768 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2101      	movs	r1, #1
 8001764:	430a      	orrs	r2, r1
 8001766:	619a      	str	r2, [r3, #24]
  }
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001780:	e021      	b.n	80017c6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	d01e      	beq.n	80017c6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001788:	f7ff fa26 	bl	8000bd8 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d302      	bcc.n	800179e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d113      	bne.n	80017c6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	2220      	movs	r2, #32
 80017a4:	431a      	orrs	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2241      	movs	r2, #65	; 0x41
 80017ae:	2120      	movs	r1, #32
 80017b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2242      	movs	r2, #66	; 0x42
 80017b6:	2100      	movs	r1, #0
 80017b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2240      	movs	r2, #64	; 0x40
 80017be:	2100      	movs	r1, #0
 80017c0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00f      	b.n	80017e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	4013      	ands	r3, r2
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	425a      	negs	r2, r3
 80017d6:	4153      	adcs	r3, r2
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	001a      	movs	r2, r3
 80017dc:	1dfb      	adds	r3, r7, #7
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d0ce      	beq.n	8001782 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b004      	add	sp, #16
 80017ec:	bd80      	pop	{r7, pc}

080017ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017fa:	e02b      	b.n	8001854 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	0018      	movs	r0, r3
 8001804:	f000 f86e 	bl	80018e4 <I2C_IsErrorOccurred>
 8001808:	1e03      	subs	r3, r0, #0
 800180a:	d001      	beq.n	8001810 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e029      	b.n	8001864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3301      	adds	r3, #1
 8001814:	d01e      	beq.n	8001854 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001816:	f7ff f9df 	bl	8000bd8 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d302      	bcc.n	800182c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d113      	bne.n	8001854 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	2220      	movs	r2, #32
 8001832:	431a      	orrs	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2241      	movs	r2, #65	; 0x41
 800183c:	2120      	movs	r1, #32
 800183e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2242      	movs	r2, #66	; 0x42
 8001844:	2100      	movs	r1, #0
 8001846:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2240      	movs	r2, #64	; 0x40
 800184c:	2100      	movs	r1, #0
 800184e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e007      	b.n	8001864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d1cc      	bne.n	80017fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b004      	add	sp, #16
 800186a:	bd80      	pop	{r7, pc}

0800186c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001878:	e028      	b.n	80018cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0018      	movs	r0, r3
 8001882:	f000 f82f 	bl	80018e4 <I2C_IsErrorOccurred>
 8001886:	1e03      	subs	r3, r0, #0
 8001888:	d001      	beq.n	800188e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e026      	b.n	80018dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188e:	f7ff f9a3 	bl	8000bd8 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	429a      	cmp	r2, r3
 800189c:	d302      	bcc.n	80018a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d113      	bne.n	80018cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	2220      	movs	r2, #32
 80018aa:	431a      	orrs	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2241      	movs	r2, #65	; 0x41
 80018b4:	2120      	movs	r1, #32
 80018b6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2242      	movs	r2, #66	; 0x42
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2240      	movs	r2, #64	; 0x40
 80018c4:	2100      	movs	r1, #0
 80018c6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e007      	b.n	80018dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2220      	movs	r2, #32
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	d1cf      	bne.n	800187a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b004      	add	sp, #16
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b08b      	sub	sp, #44	; 0x2c
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f0:	2327      	movs	r3, #39	; 0x27
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2210      	movs	r2, #16
 800190c:	4013      	ands	r3, r2
 800190e:	d100      	bne.n	8001912 <I2C_IsErrorOccurred+0x2e>
 8001910:	e082      	b.n	8001a18 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2210      	movs	r2, #16
 8001918:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800191a:	e060      	b.n	80019de <I2C_IsErrorOccurred+0xfa>
 800191c:	2427      	movs	r4, #39	; 0x27
 800191e:	193b      	adds	r3, r7, r4
 8001920:	193a      	adds	r2, r7, r4
 8001922:	7812      	ldrb	r2, [r2, #0]
 8001924:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	3301      	adds	r3, #1
 800192a:	d058      	beq.n	80019de <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800192c:	f7ff f954 	bl	8000bd8 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	429a      	cmp	r2, r3
 800193a:	d306      	bcc.n	800194a <I2C_IsErrorOccurred+0x66>
 800193c:	193b      	adds	r3, r7, r4
 800193e:	193a      	adds	r2, r7, r4
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	701a      	strb	r2, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d149      	bne.n	80019de <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	01db      	lsls	r3, r3, #7
 8001954:	4013      	ands	r3, r2
 8001956:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001958:	2013      	movs	r0, #19
 800195a:	183b      	adds	r3, r7, r0
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	2142      	movs	r1, #66	; 0x42
 8001960:	5c52      	ldrb	r2, [r2, r1]
 8001962:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	401a      	ands	r2, r3
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	429a      	cmp	r2, r3
 8001976:	d126      	bne.n	80019c6 <I2C_IsErrorOccurred+0xe2>
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	01db      	lsls	r3, r3, #7
 800197e:	429a      	cmp	r2, r3
 8001980:	d021      	beq.n	80019c6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001982:	183b      	adds	r3, r7, r0
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b20      	cmp	r3, #32
 8001988:	d01d      	beq.n	80019c6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	01c9      	lsls	r1, r1, #7
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800199c:	f7ff f91c 	bl	8000bd8 <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a4:	e00f      	b.n	80019c6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019a6:	f7ff f917 	bl	8000bd8 <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b19      	cmp	r3, #25
 80019b2:	d908      	bls.n	80019c6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	2220      	movs	r2, #32
 80019b8:	4313      	orrs	r3, r2
 80019ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80019bc:	2327      	movs	r3, #39	; 0x27
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]

              break;
 80019c4:	e00b      	b.n	80019de <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2220      	movs	r2, #32
 80019ce:	4013      	ands	r3, r2
 80019d0:	2127      	movs	r1, #39	; 0x27
 80019d2:	187a      	adds	r2, r7, r1
 80019d4:	1879      	adds	r1, r7, r1
 80019d6:	7809      	ldrb	r1, [r1, #0]
 80019d8:	7011      	strb	r1, [r2, #0]
 80019da:	2b20      	cmp	r3, #32
 80019dc:	d1e3      	bne.n	80019a6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2220      	movs	r2, #32
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d004      	beq.n	80019f6 <I2C_IsErrorOccurred+0x112>
 80019ec:	2327      	movs	r3, #39	; 0x27
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d092      	beq.n	800191c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80019f6:	2327      	movs	r3, #39	; 0x27
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2220      	movs	r2, #32
 8001a06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a10:	2327      	movs	r3, #39	; 0x27
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	d00c      	beq.n	8001a44 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	0052      	lsls	r2, r2, #1
 8001a3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a3c:	2327      	movs	r3, #39	; 0x27
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d00c      	beq.n	8001a68 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	2208      	movs	r2, #8
 8001a52:	4313      	orrs	r3, r2
 8001a54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	00d2      	lsls	r2, r2, #3
 8001a5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a60:	2327      	movs	r3, #39	; 0x27
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d00c      	beq.n	8001a8c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	2202      	movs	r2, #2
 8001a76:	4313      	orrs	r3, r2
 8001a78:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a84:	2327      	movs	r3, #39	; 0x27
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001a8c:	2327      	movs	r3, #39	; 0x27
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d01d      	beq.n	8001ad2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff fe47 	bl	800172c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	490d      	ldr	r1, [pc, #52]	; (8001ae0 <I2C_IsErrorOccurred+0x1fc>)
 8001aaa:	400a      	ands	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2241      	movs	r2, #65	; 0x41
 8001abe:	2120      	movs	r1, #32
 8001ac0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2242      	movs	r2, #66	; 0x42
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2240      	movs	r2, #64	; 0x40
 8001ace:	2100      	movs	r1, #0
 8001ad0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001ad2:	2327      	movs	r3, #39	; 0x27
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	781b      	ldrb	r3, [r3, #0]
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b00b      	add	sp, #44	; 0x2c
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	fe00e800 	.word	0xfe00e800

08001ae4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	0008      	movs	r0, r1
 8001aee:	0011      	movs	r1, r2
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	240a      	movs	r4, #10
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	1c02      	adds	r2, r0, #0
 8001af8:	801a      	strh	r2, [r3, #0]
 8001afa:	2009      	movs	r0, #9
 8001afc:	183b      	adds	r3, r7, r0
 8001afe:	1c0a      	adds	r2, r1, #0
 8001b00:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	059b      	lsls	r3, r3, #22
 8001b08:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b0a:	183b      	adds	r3, r7, r0
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	0419      	lsls	r1, r3, #16
 8001b10:	23ff      	movs	r3, #255	; 0xff
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b16:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b2e:	0d51      	lsrs	r1, r2, #21
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	00d2      	lsls	r2, r2, #3
 8001b34:	400a      	ands	r2, r1
 8001b36:	4907      	ldr	r1, [pc, #28]	; (8001b54 <I2C_TransferConfig+0x70>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	43d2      	mvns	r2, r2
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	0011      	movs	r1, r2
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b007      	add	sp, #28
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	03ff63ff 	.word	0x03ff63ff

08001b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2241      	movs	r2, #65	; 0x41
 8001b66:	5c9b      	ldrb	r3, [r3, r2]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d138      	bne.n	8001be0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2240      	movs	r2, #64	; 0x40
 8001b72:	5c9b      	ldrb	r3, [r3, r2]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e032      	b.n	8001be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2240      	movs	r2, #64	; 0x40
 8001b80:	2101      	movs	r1, #1
 8001b82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2241      	movs	r2, #65	; 0x41
 8001b88:	2124      	movs	r1, #36	; 0x24
 8001b8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	438a      	bics	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4911      	ldr	r1, [pc, #68]	; (8001bec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2241      	movs	r2, #65	; 0x41
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2240      	movs	r2, #64	; 0x40
 8001bd8:	2100      	movs	r1, #0
 8001bda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e000      	b.n	8001be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
  }
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	ffffefff 	.word	0xffffefff

08001bf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2241      	movs	r2, #65	; 0x41
 8001bfe:	5c9b      	ldrb	r3, [r3, r2]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d139      	bne.n	8001c7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2240      	movs	r2, #64	; 0x40
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e033      	b.n	8001c7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	2101      	movs	r1, #1
 8001c1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2241      	movs	r2, #65	; 0x41
 8001c20:	2124      	movs	r1, #36	; 0x24
 8001c22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	438a      	bics	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2101      	movs	r1, #1
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2241      	movs	r2, #65	; 0x41
 8001c6a:	2120      	movs	r1, #32
 8001c6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2240      	movs	r2, #64	; 0x40
 8001c72:	2100      	movs	r1, #0
 8001c74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
  }
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b004      	add	sp, #16
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	fffff0ff 	.word	0xfffff0ff

08001c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d11f      	bne.n	8001cec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	189b      	adds	r3, r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4912      	ldr	r1, [pc, #72]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7fe fa22 	bl	8000104 <__udivsi3>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cc6:	e008      	b.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e001      	b.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e009      	b.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d0ed      	beq.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b004      	add	sp, #16
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	fffff9ff 	.word	0xfffff9ff
 8001d00:	20000000 	.word	0x20000000
 8001d04:	000f4240 	.word	0x000f4240

08001d08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e2fe      	b.n	8002318 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	d100      	bne.n	8001d26 <HAL_RCC_OscConfig+0x1e>
 8001d24:	e07c      	b.n	8001e20 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d26:	4bc3      	ldr	r3, [pc, #780]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2238      	movs	r2, #56	; 0x38
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d30:	4bc0      	ldr	r3, [pc, #768]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2203      	movs	r2, #3
 8001d36:	4013      	ands	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3e>
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	4bb9      	ldr	r3, [pc, #740]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	029b      	lsls	r3, r3, #10
 8001d54:	4013      	ands	r3, r2
 8001d56:	d062      	beq.n	8001e1e <HAL_RCC_OscConfig+0x116>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d15e      	bne.n	8001e1e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e2d9      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	025b      	lsls	r3, r3, #9
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_OscConfig+0x78>
 8001d70:	4bb0      	ldr	r3, [pc, #704]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4baf      	ldr	r3, [pc, #700]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	0249      	lsls	r1, r1, #9
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e020      	b.n	8001dc2 <HAL_RCC_OscConfig+0xba>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	23a0      	movs	r3, #160	; 0xa0
 8001d86:	02db      	lsls	r3, r3, #11
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d10e      	bne.n	8001daa <HAL_RCC_OscConfig+0xa2>
 8001d8c:	4ba9      	ldr	r3, [pc, #676]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4ba8      	ldr	r3, [pc, #672]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	02c9      	lsls	r1, r1, #11
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	4ba6      	ldr	r3, [pc, #664]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4ba5      	ldr	r3, [pc, #660]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	0249      	lsls	r1, r1, #9
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e00b      	b.n	8001dc2 <HAL_RCC_OscConfig+0xba>
 8001daa:	4ba2      	ldr	r3, [pc, #648]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4ba1      	ldr	r3, [pc, #644]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001db0:	49a1      	ldr	r1, [pc, #644]	; (8002038 <HAL_RCC_OscConfig+0x330>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	4b9f      	ldr	r3, [pc, #636]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b9e      	ldr	r3, [pc, #632]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001dbc:	499f      	ldr	r1, [pc, #636]	; (800203c <HAL_RCC_OscConfig+0x334>)
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d014      	beq.n	8001df4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7fe ff05 	bl	8000bd8 <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7fe ff00 	bl	8000bd8 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e298      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de6:	4b93      	ldr	r3, [pc, #588]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	4013      	ands	r3, r2
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xcc>
 8001df2:	e015      	b.n	8001e20 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe fef0 	bl	8000bd8 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfe:	f7fe feeb 	bl	8000bd8 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b64      	cmp	r3, #100	; 0x64
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e283      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e10:	4b88      	ldr	r3, [pc, #544]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	029b      	lsls	r3, r3, #10
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0xf6>
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2202      	movs	r2, #2
 8001e26:	4013      	ands	r3, r2
 8001e28:	d100      	bne.n	8001e2c <HAL_RCC_OscConfig+0x124>
 8001e2a:	e099      	b.n	8001f60 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2c:	4b81      	ldr	r3, [pc, #516]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2238      	movs	r2, #56	; 0x38
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e36:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d102      	bne.n	8001e4c <HAL_RCC_OscConfig+0x144>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d002      	beq.n	8001e52 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d135      	bne.n	8001ebe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e52:	4b78      	ldr	r3, [pc, #480]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x162>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e256      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b72      	ldr	r3, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a74      	ldr	r2, [pc, #464]	; (8002040 <HAL_RCC_OscConfig+0x338>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	021a      	lsls	r2, r3, #8
 8001e7a:	4b6e      	ldr	r3, [pc, #440]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d112      	bne.n	8001eac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e86:	4b6b      	ldr	r3, [pc, #428]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6e      	ldr	r2, [pc, #440]	; (8002044 <HAL_RCC_OscConfig+0x33c>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	4b67      	ldr	r3, [pc, #412]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e9a:	4b66      	ldr	r3, [pc, #408]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0adb      	lsrs	r3, r3, #11
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	4a68      	ldr	r2, [pc, #416]	; (8002048 <HAL_RCC_OscConfig+0x340>)
 8001ea6:	40da      	lsrs	r2, r3
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCC_OscConfig+0x344>)
 8001eaa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x348>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7fe fe35 	bl	8000b20 <HAL_InitTick>
 8001eb6:	1e03      	subs	r3, r0, #0
 8001eb8:	d051      	beq.n	8001f5e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e22c      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d030      	beq.n	8001f28 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ec6:	4b5b      	ldr	r3, [pc, #364]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5e      	ldr	r2, [pc, #376]	; (8002044 <HAL_RCC_OscConfig+0x33c>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001eda:	4b56      	ldr	r3, [pc, #344]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b55      	ldr	r3, [pc, #340]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	0049      	lsls	r1, r1, #1
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7fe fe76 	bl	8000bd8 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7fe fe71 	bl	8000bd8 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e209      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f04:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b48      	ldr	r3, [pc, #288]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a4a      	ldr	r2, [pc, #296]	; (8002040 <HAL_RCC_OscConfig+0x338>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	021a      	lsls	r2, r3, #8
 8001f20:	4b44      	ldr	r3, [pc, #272]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	e01b      	b.n	8001f60 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b41      	ldr	r3, [pc, #260]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	4949      	ldr	r1, [pc, #292]	; (8002054 <HAL_RCC_OscConfig+0x34c>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7fe fe50 	bl	8000bd8 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7fe fe4b 	bl	8000bd8 <HAL_GetTick>
 8001f42:	0002      	movs	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1e3      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f50:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x236>
 8001f5c:	e000      	b.n	8001f60 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2208      	movs	r2, #8
 8001f66:	4013      	ands	r3, r2
 8001f68:	d047      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f6a:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2238      	movs	r2, #56	; 0x38
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b18      	cmp	r3, #24
 8001f74:	d10a      	bne.n	8001f8c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d03c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2f2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d138      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e1c5      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d019      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fe1a 	bl	8000bd8 <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001faa:	f7fe fe15 	bl	8000bd8 <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1ad      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d0f1      	beq.n	8001faa <HAL_RCC_OscConfig+0x2a2>
 8001fc6:	e018      	b.n	8001ffa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fcc:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001fce:	2101      	movs	r1, #1
 8001fd0:	438a      	bics	r2, r1
 8001fd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fe00 	bl	8000bd8 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fde:	f7fe fdfb 	bl	8000bd8 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e193      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d1f1      	bne.n	8001fde <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2204      	movs	r2, #4
 8002000:	4013      	ands	r3, r2
 8002002:	d100      	bne.n	8002006 <HAL_RCC_OscConfig+0x2fe>
 8002004:	e0c6      	b.n	8002194 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002006:	231f      	movs	r3, #31
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2238      	movs	r2, #56	; 0x38
 8002014:	4013      	ands	r3, r2
 8002016:	2b20      	cmp	r3, #32
 8002018:	d11e      	bne.n	8002058 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_RCC_OscConfig+0x32c>)
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	2202      	movs	r2, #2
 8002020:	4013      	ands	r3, r2
 8002022:	d100      	bne.n	8002026 <HAL_RCC_OscConfig+0x31e>
 8002024:	e0b6      	b.n	8002194 <HAL_RCC_OscConfig+0x48c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d000      	beq.n	8002030 <HAL_RCC_OscConfig+0x328>
 800202e:	e0b1      	b.n	8002194 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e171      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
 8002034:	40021000 	.word	0x40021000
 8002038:	fffeffff 	.word	0xfffeffff
 800203c:	fffbffff 	.word	0xfffbffff
 8002040:	ffff80ff 	.word	0xffff80ff
 8002044:	ffffc7ff 	.word	0xffffc7ff
 8002048:	00f42400 	.word	0x00f42400
 800204c:	20000000 	.word	0x20000000
 8002050:	20000010 	.word	0x20000010
 8002054:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002058:	4bb1      	ldr	r3, [pc, #708]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800205a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	055b      	lsls	r3, r3, #21
 8002060:	4013      	ands	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_RCC_OscConfig+0x360>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x362>
 8002068:	2300      	movs	r3, #0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d011      	beq.n	8002092 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4bac      	ldr	r3, [pc, #688]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002072:	4bab      	ldr	r3, [pc, #684]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0549      	lsls	r1, r1, #21
 8002078:	430a      	orrs	r2, r1
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c
 800207c:	4ba8      	ldr	r3, [pc, #672]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800207e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	055b      	lsls	r3, r3, #21
 8002084:	4013      	ands	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800208a:	231f      	movs	r3, #31
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002092:	4ba4      	ldr	r3, [pc, #656]	; (8002324 <HAL_RCC_OscConfig+0x61c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4013      	ands	r3, r2
 800209c:	d11a      	bne.n	80020d4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800209e:	4ba1      	ldr	r3, [pc, #644]	; (8002324 <HAL_RCC_OscConfig+0x61c>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4ba0      	ldr	r3, [pc, #640]	; (8002324 <HAL_RCC_OscConfig+0x61c>)
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	0049      	lsls	r1, r1, #1
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80020ac:	f7fe fd94 	bl	8000bd8 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b6:	f7fe fd8f 	bl	8000bd8 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e127      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c8:	4b96      	ldr	r3, [pc, #600]	; (8002324 <HAL_RCC_OscConfig+0x61c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4013      	ands	r3, r2
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x3e2>
 80020dc:	4b90      	ldr	r3, [pc, #576]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 80020de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020e0:	4b8f      	ldr	r3, [pc, #572]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 80020e2:	2101      	movs	r1, #1
 80020e4:	430a      	orrs	r2, r1
 80020e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80020e8:	e01c      	b.n	8002124 <HAL_RCC_OscConfig+0x41c>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x404>
 80020f2:	4b8b      	ldr	r3, [pc, #556]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 80020f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020f6:	4b8a      	ldr	r3, [pc, #552]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 80020f8:	2104      	movs	r1, #4
 80020fa:	430a      	orrs	r2, r1
 80020fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80020fe:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002100:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002102:	4b87      	ldr	r3, [pc, #540]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	65da      	str	r2, [r3, #92]	; 0x5c
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0x41c>
 800210c:	4b84      	ldr	r3, [pc, #528]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800210e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002110:	4b83      	ldr	r3, [pc, #524]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002112:	2101      	movs	r1, #1
 8002114:	438a      	bics	r2, r1
 8002116:	65da      	str	r2, [r3, #92]	; 0x5c
 8002118:	4b81      	ldr	r3, [pc, #516]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800211a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800211c:	4b80      	ldr	r3, [pc, #512]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800211e:	2104      	movs	r1, #4
 8002120:	438a      	bics	r2, r1
 8002122:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d014      	beq.n	8002156 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe fd54 	bl	8000bd8 <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002134:	e009      	b.n	800214a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe fd4f 	bl	8000bd8 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	4a79      	ldr	r2, [pc, #484]	; (8002328 <HAL_RCC_OscConfig+0x620>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e0e6      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214a:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	2202      	movs	r2, #2
 8002150:	4013      	ands	r3, r2
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x42e>
 8002154:	e013      	b.n	800217e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe fd3f 	bl	8000bd8 <HAL_GetTick>
 800215a:	0003      	movs	r3, r0
 800215c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800215e:	e009      	b.n	8002174 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe fd3a 	bl	8000bd8 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	4a6f      	ldr	r2, [pc, #444]	; (8002328 <HAL_RCC_OscConfig+0x620>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0d1      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002174:	4b6a      	ldr	r3, [pc, #424]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2202      	movs	r2, #2
 800217a:	4013      	ands	r3, r2
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800217e:	231f      	movs	r3, #31
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b65      	ldr	r3, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800218a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800218c:	4b64      	ldr	r3, [pc, #400]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800218e:	4967      	ldr	r1, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x624>)
 8002190:	400a      	ands	r2, r1
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d100      	bne.n	800219e <HAL_RCC_OscConfig+0x496>
 800219c:	e0bb      	b.n	8002316 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800219e:	4b60      	ldr	r3, [pc, #384]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2238      	movs	r2, #56	; 0x38
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d100      	bne.n	80021ac <HAL_RCC_OscConfig+0x4a4>
 80021aa:	e07b      	b.n	80022a4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d156      	bne.n	8002262 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b5a      	ldr	r3, [pc, #360]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b59      	ldr	r3, [pc, #356]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 80021ba:	495d      	ldr	r1, [pc, #372]	; (8002330 <HAL_RCC_OscConfig+0x628>)
 80021bc:	400a      	ands	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fd0a 	bl	8000bd8 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ca:	f7fe fd05 	bl	8000bd8 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e09d      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021dc:	4b50      	ldr	r3, [pc, #320]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	049b      	lsls	r3, r3, #18
 80021e4:	4013      	ands	r3, r2
 80021e6:	d1f0      	bne.n	80021ca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e8:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_RCC_OscConfig+0x62c>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	431a      	orrs	r2, r3
 8002216:	4b42      	ldr	r3, [pc, #264]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221c:	4b40      	ldr	r3, [pc, #256]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	0449      	lsls	r1, r1, #17
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	0549      	lsls	r1, r1, #21
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe fcce 	bl	8000bd8 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fcc9 	bl	8000bd8 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e061      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002254:	4b32      	ldr	r3, [pc, #200]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	049b      	lsls	r3, r3, #18
 800225c:	4013      	ands	r3, r2
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x53a>
 8002260:	e059      	b.n	8002316 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002268:	4931      	ldr	r1, [pc, #196]	; (8002330 <HAL_RCC_OscConfig+0x628>)
 800226a:	400a      	ands	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7fe fcb3 	bl	8000bd8 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe fcae 	bl	8000bd8 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e046      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228a:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	049b      	lsls	r3, r3, #18
 8002292:	4013      	ands	r3, r2
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 800229c:	4926      	ldr	r1, [pc, #152]	; (8002338 <HAL_RCC_OscConfig+0x630>)
 800229e:	400a      	ands	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	e038      	b.n	8002316 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e033      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x618>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2203      	movs	r2, #3
 80022ba:	401a      	ands	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d126      	bne.n	8002312 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2270      	movs	r2, #112	; 0x70
 80022c8:	401a      	ands	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d11f      	bne.n	8002312 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	23fe      	movs	r3, #254	; 0xfe
 80022d6:	01db      	lsls	r3, r3, #7
 80022d8:	401a      	ands	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d116      	bne.n	8002312 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	23f8      	movs	r3, #248	; 0xf8
 80022e8:	039b      	lsls	r3, r3, #14
 80022ea:	401a      	ands	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d10e      	bne.n	8002312 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	23e0      	movs	r3, #224	; 0xe0
 80022f8:	051b      	lsls	r3, r3, #20
 80022fa:	401a      	ands	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	0f5b      	lsrs	r3, r3, #29
 8002308:	075a      	lsls	r2, r3, #29
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b008      	add	sp, #32
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
 8002328:	00001388 	.word	0x00001388
 800232c:	efffffff 	.word	0xefffffff
 8002330:	feffffff 	.word	0xfeffffff
 8002334:	11c1808c 	.word	0x11c1808c
 8002338:	eefefffc 	.word	0xeefefffc

0800233c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0e9      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2207      	movs	r2, #7
 8002356:	4013      	ands	r3, r2
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d91e      	bls.n	800239c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b73      	ldr	r3, [pc, #460]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2207      	movs	r2, #7
 8002364:	4393      	bics	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	4b70      	ldr	r3, [pc, #448]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002370:	f7fe fc32 	bl	8000bd8 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002378:	e009      	b.n	800238e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237a:	f7fe fc2d 	bl	8000bd8 <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	4a6a      	ldr	r2, [pc, #424]	; (8002530 <HAL_RCC_ClockConfig+0x1f4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0ca      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2207      	movs	r2, #7
 8002394:	4013      	ands	r3, r2
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d1ee      	bne.n	800237a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2202      	movs	r2, #2
 80023a2:	4013      	ands	r3, r2
 80023a4:	d015      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2204      	movs	r2, #4
 80023ac:	4013      	ands	r3, r2
 80023ae:	d006      	beq.n	80023be <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023b0:	4b60      	ldr	r3, [pc, #384]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 80023b6:	21e0      	movs	r1, #224	; 0xe0
 80023b8:	01c9      	lsls	r1, r1, #7
 80023ba:	430a      	orrs	r2, r1
 80023bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <HAL_RCC_ClockConfig+0x1fc>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 80023ce:	430a      	orrs	r2, r1
 80023d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	d057      	beq.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	4013      	ands	r3, r2
 80023ee:	d12b      	bne.n	8002448 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e097      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fc:	4b4d      	ldr	r3, [pc, #308]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	049b      	lsls	r3, r3, #18
 8002404:	4013      	ands	r3, r2
 8002406:	d11f      	bne.n	8002448 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e08b      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002414:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4013      	ands	r3, r2
 800241e:	d113      	bne.n	8002448 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e07f      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d106      	bne.n	800243a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 800242e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002430:	2202      	movs	r2, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d108      	bne.n	8002448 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e074      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	2202      	movs	r2, #2
 8002440:	4013      	ands	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e06d      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2207      	movs	r2, #7
 800244e:	4393      	bics	r3, r2
 8002450:	0019      	movs	r1, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4b37      	ldr	r3, [pc, #220]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 8002458:	430a      	orrs	r2, r1
 800245a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245c:	f7fe fbbc 	bl	8000bd8 <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002464:	e009      	b.n	800247a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002466:	f7fe fbb7 	bl	8000bd8 <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <HAL_RCC_ClockConfig+0x1f4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e054      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2238      	movs	r2, #56	; 0x38
 8002480:	401a      	ands	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	429a      	cmp	r2, r3
 800248a:	d1ec      	bne.n	8002466 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2207      	movs	r2, #7
 8002492:	4013      	ands	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d21e      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2207      	movs	r2, #7
 80024a0:	4393      	bics	r3, r2
 80024a2:	0019      	movs	r1, r3
 80024a4:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024ac:	f7fe fb94 	bl	8000bd8 <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024b4:	e009      	b.n	80024ca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b6:	f7fe fb8f 	bl	8000bd8 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <HAL_RCC_ClockConfig+0x1f4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e02c      	b.n	8002524 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2207      	movs	r2, #7
 80024d0:	4013      	ands	r3, r2
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1ee      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2204      	movs	r2, #4
 80024de:	4013      	ands	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4a15      	ldr	r2, [pc, #84]	; (800253c <HAL_RCC_ClockConfig+0x200>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024f6:	f000 f829 	bl	800254c <HAL_RCC_GetSysClockFreq>
 80024fa:	0001      	movs	r1, r0
 80024fc:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	220f      	movs	r2, #15
 8002504:	401a      	ands	r2, r3
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <HAL_RCC_ClockConfig+0x204>)
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	58d3      	ldr	r3, [r2, r3]
 800250c:	221f      	movs	r2, #31
 800250e:	4013      	ands	r3, r2
 8002510:	000a      	movs	r2, r1
 8002512:	40da      	lsrs	r2, r3
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x208>)
 8002516:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x20c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0018      	movs	r0, r3
 800251e:	f7fe faff 	bl	8000b20 <HAL_InitTick>
 8002522:	0003      	movs	r3, r0
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40022000 	.word	0x40022000
 8002530:	00001388 	.word	0x00001388
 8002534:	40021000 	.word	0x40021000
 8002538:	fffff0ff 	.word	0xfffff0ff
 800253c:	ffff8fff 	.word	0xffff8fff
 8002540:	08002a58 	.word	0x08002a58
 8002544:	20000000 	.word	0x20000000
 8002548:	20000010 	.word	0x20000010

0800254c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002552:	4b3c      	ldr	r3, [pc, #240]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2238      	movs	r2, #56	; 0x38
 8002558:	4013      	ands	r3, r2
 800255a:	d10f      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800255c:	4b39      	ldr	r3, [pc, #228]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0adb      	lsrs	r3, r3, #11
 8002562:	2207      	movs	r2, #7
 8002564:	4013      	ands	r3, r2
 8002566:	2201      	movs	r2, #1
 8002568:	409a      	lsls	r2, r3
 800256a:	0013      	movs	r3, r2
 800256c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	4835      	ldr	r0, [pc, #212]	; (8002648 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002572:	f7fd fdc7 	bl	8000104 <__udivsi3>
 8002576:	0003      	movs	r3, r0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	e05d      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2238      	movs	r2, #56	; 0x38
 8002582:	4013      	ands	r3, r2
 8002584:	2b08      	cmp	r3, #8
 8002586:	d102      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002588:	4b30      	ldr	r3, [pc, #192]	; (800264c <HAL_RCC_GetSysClockFreq+0x100>)
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	e054      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258e:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2238      	movs	r2, #56	; 0x38
 8002594:	4013      	ands	r3, r2
 8002596:	2b10      	cmp	r3, #16
 8002598:	d138      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2203      	movs	r2, #3
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	2207      	movs	r2, #7
 80025ac:	4013      	ands	r3, r2
 80025ae:	3301      	adds	r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d10d      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	4824      	ldr	r0, [pc, #144]	; (800264c <HAL_RCC_GetSysClockFreq+0x100>)
 80025bc:	f7fd fda2 	bl	8000104 <__udivsi3>
 80025c0:	0003      	movs	r3, r0
 80025c2:	0019      	movs	r1, r3
 80025c4:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	227f      	movs	r2, #127	; 0x7f
 80025cc:	4013      	ands	r3, r2
 80025ce:	434b      	muls	r3, r1
 80025d0:	617b      	str	r3, [r7, #20]
        break;
 80025d2:	e00d      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	481c      	ldr	r0, [pc, #112]	; (8002648 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025d8:	f7fd fd94 	bl	8000104 <__udivsi3>
 80025dc:	0003      	movs	r3, r0
 80025de:	0019      	movs	r1, r3
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	227f      	movs	r2, #127	; 0x7f
 80025e8:	4013      	ands	r3, r2
 80025ea:	434b      	muls	r3, r1
 80025ec:	617b      	str	r3, [r7, #20]
        break;
 80025ee:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0f5b      	lsrs	r3, r3, #29
 80025f6:	2207      	movs	r2, #7
 80025f8:	4013      	ands	r3, r2
 80025fa:	3301      	adds	r3, #1
 80025fc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	6978      	ldr	r0, [r7, #20]
 8002602:	f7fd fd7f 	bl	8000104 <__udivsi3>
 8002606:	0003      	movs	r3, r0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	e015      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2238      	movs	r2, #56	; 0x38
 8002612:	4013      	ands	r3, r2
 8002614:	2b20      	cmp	r3, #32
 8002616:	d103      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2238      	movs	r2, #56	; 0x38
 8002626:	4013      	ands	r3, r2
 8002628:	2b18      	cmp	r3, #24
 800262a:	d103      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800262c:	23fa      	movs	r3, #250	; 0xfa
 800262e:	01db      	lsls	r3, r3, #7
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e001      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002638:	693b      	ldr	r3, [r7, #16]
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b006      	add	sp, #24
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	40021000 	.word	0x40021000
 8002648:	00f42400 	.word	0x00f42400
 800264c:	007a1200 	.word	0x007a1200

08002650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002658:	2313      	movs	r3, #19
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002660:	2312      	movs	r3, #18
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	4013      	ands	r3, r2
 8002672:	d100      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002674:	e0a3      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2011      	movs	r0, #17
 8002678:	183b      	adds	r3, r7, r0
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4bc3      	ldr	r3, [pc, #780]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	055b      	lsls	r3, r3, #21
 8002686:	4013      	ands	r3, r2
 8002688:	d110      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4bc0      	ldr	r3, [pc, #768]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800268c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800268e:	4bbf      	ldr	r3, [pc, #764]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	0549      	lsls	r1, r1, #21
 8002694:	430a      	orrs	r2, r1
 8002696:	63da      	str	r2, [r3, #60]	; 0x3c
 8002698:	4bbc      	ldr	r3, [pc, #752]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	183b      	adds	r3, r7, r0
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ac:	4bb8      	ldr	r3, [pc, #736]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4bb7      	ldr	r3, [pc, #732]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	0049      	lsls	r1, r1, #1
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026ba:	f7fe fa8d 	bl	8000bd8 <HAL_GetTick>
 80026be:	0003      	movs	r3, r0
 80026c0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026c2:	e00b      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c4:	f7fe fa88 	bl	8000bd8 <HAL_GetTick>
 80026c8:	0002      	movs	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d904      	bls.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80026d2:	2313      	movs	r3, #19
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2203      	movs	r2, #3
 80026d8:	701a      	strb	r2, [r3, #0]
        break;
 80026da:	e005      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026dc:	4bac      	ldr	r3, [pc, #688]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	d0ed      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80026e8:	2313      	movs	r3, #19
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d154      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026f2:	4ba6      	ldr	r3, [pc, #664]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026f6:	23c0      	movs	r3, #192	; 0xc0
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4013      	ands	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d019      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	429a      	cmp	r2, r3
 800270c:	d014      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800270e:	4b9f      	ldr	r3, [pc, #636]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	4aa0      	ldr	r2, [pc, #640]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002714:	4013      	ands	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002718:	4b9c      	ldr	r3, [pc, #624]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800271a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800271c:	4b9b      	ldr	r3, [pc, #620]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800271e:	2180      	movs	r1, #128	; 0x80
 8002720:	0249      	lsls	r1, r1, #9
 8002722:	430a      	orrs	r2, r1
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002726:	4b99      	ldr	r3, [pc, #612]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800272a:	4b98      	ldr	r3, [pc, #608]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800272c:	499a      	ldr	r1, [pc, #616]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800272e:	400a      	ands	r2, r1
 8002730:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002732:	4b96      	ldr	r3, [pc, #600]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2201      	movs	r2, #1
 800273c:	4013      	ands	r3, r2
 800273e:	d016      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fa4a 	bl	8000bd8 <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002748:	e00c      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7fe fa45 	bl	8000bd8 <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	4a91      	ldr	r2, [pc, #580]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d904      	bls.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800275a:	2313      	movs	r3, #19
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2203      	movs	r2, #3
 8002760:	701a      	strb	r2, [r3, #0]
            break;
 8002762:	e004      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002764:	4b89      	ldr	r3, [pc, #548]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d0ed      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800276e:	2313      	movs	r3, #19
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002778:	4b84      	ldr	r3, [pc, #528]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	4a85      	ldr	r2, [pc, #532]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002786:	4b81      	ldr	r3, [pc, #516]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002788:	430a      	orrs	r2, r1
 800278a:	65da      	str	r2, [r3, #92]	; 0x5c
 800278c:	e00c      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800278e:	2312      	movs	r3, #18
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2213      	movs	r2, #19
 8002794:	18ba      	adds	r2, r7, r2
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e005      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800279c:	2312      	movs	r3, #18
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2213      	movs	r2, #19
 80027a2:	18ba      	adds	r2, r7, r2
 80027a4:	7812      	ldrb	r2, [r2, #0]
 80027a6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027a8:	2311      	movs	r3, #17
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d105      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b2:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b6:	4b75      	ldr	r3, [pc, #468]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027b8:	4979      	ldr	r1, [pc, #484]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80027ba:	400a      	ands	r2, r1
 80027bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4013      	ands	r3, r2
 80027c6:	d009      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c8:	4b70      	ldr	r3, [pc, #448]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027cc:	2203      	movs	r2, #3
 80027ce:	4393      	bics	r3, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	4b6d      	ldr	r3, [pc, #436]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027d8:	430a      	orrs	r2, r1
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2202      	movs	r2, #2
 80027e2:	4013      	ands	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e6:	4b69      	ldr	r3, [pc, #420]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ea:	220c      	movs	r2, #12
 80027ec:	4393      	bics	r3, r2
 80027ee:	0019      	movs	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027f6:	430a      	orrs	r2, r1
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2210      	movs	r2, #16
 8002800:	4013      	ands	r3, r2
 8002802:	d009      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002804:	4b61      	ldr	r3, [pc, #388]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	4a66      	ldr	r2, [pc, #408]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	4b5e      	ldr	r3, [pc, #376]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002814:	430a      	orrs	r2, r1
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4013      	ands	r3, r2
 8002822:	d009      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	4a5f      	ldr	r2, [pc, #380]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	4b56      	ldr	r3, [pc, #344]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002834:	430a      	orrs	r2, r1
 8002836:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4013      	ands	r3, r2
 8002842:	d009      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002844:	4b51      	ldr	r3, [pc, #324]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800284a:	4013      	ands	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	4b4e      	ldr	r3, [pc, #312]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002854:	430a      	orrs	r2, r1
 8002856:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2220      	movs	r2, #32
 800285e:	4013      	ands	r3, r2
 8002860:	d009      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002862:	4b4a      	ldr	r3, [pc, #296]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	4a52      	ldr	r2, [pc, #328]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	4b46      	ldr	r3, [pc, #280]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002872:	430a      	orrs	r2, r1
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	01db      	lsls	r3, r3, #7
 800287e:	4013      	ands	r3, r2
 8002880:	d015      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002882:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	0899      	lsrs	r1, r3, #2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1a      	ldr	r2, [r3, #32]
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002890:	430a      	orrs	r2, r1
 8002892:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	05db      	lsls	r3, r3, #23
 800289c:	429a      	cmp	r2, r3
 800289e:	d106      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028a0:	4b3a      	ldr	r3, [pc, #232]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a6:	2180      	movs	r1, #128	; 0x80
 80028a8:	0249      	lsls	r1, r1, #9
 80028aa:	430a      	orrs	r2, r1
 80028ac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	031b      	lsls	r3, r3, #12
 80028b6:	4013      	ands	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028ba:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	4393      	bics	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c8:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	039b      	lsls	r3, r3, #14
 80028d6:	4013      	ands	r3, r2
 80028d8:	d016      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e8:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	03db      	lsls	r3, r3, #15
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d106      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	0449      	lsls	r1, r1, #17
 8002904:	430a      	orrs	r2, r1
 8002906:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	03db      	lsls	r3, r3, #15
 8002910:	4013      	ands	r3, r2
 8002912:	d016      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800291a:	4013      	ands	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002924:	430a      	orrs	r2, r1
 8002926:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	045b      	lsls	r3, r3, #17
 8002930:	429a      	cmp	r2, r3
 8002932:	d106      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	0449      	lsls	r1, r1, #17
 800293e:	430a      	orrs	r2, r1
 8002940:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	4013      	ands	r3, r2
 800294c:	d016      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002954:	4013      	ands	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800295e:	430a      	orrs	r2, r1
 8002960:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	01db      	lsls	r3, r3, #7
 800296a:	429a      	cmp	r2, r3
 800296c:	d106      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	0249      	lsls	r1, r1, #9
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800297c:	2312      	movs	r3, #18
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	781b      	ldrb	r3, [r3, #0]
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b006      	add	sp, #24
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
 8002994:	fffffcff 	.word	0xfffffcff
 8002998:	fffeffff 	.word	0xfffeffff
 800299c:	00001388 	.word	0x00001388
 80029a0:	efffffff 	.word	0xefffffff
 80029a4:	fffff3ff 	.word	0xfffff3ff
 80029a8:	fff3ffff 	.word	0xfff3ffff
 80029ac:	ffcfffff 	.word	0xffcfffff
 80029b0:	ffffcfff 	.word	0xffffcfff
 80029b4:	ffbfffff 	.word	0xffbfffff
 80029b8:	feffffff 	.word	0xfeffffff
 80029bc:	ffff3fff 	.word	0xffff3fff

080029c0 <main>:




int main(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  hwInit();
 80029c4:	f7fe f87f 	bl	8000ac6 <hwInit>
  apInit();
 80029c8:	f7fd fc28 	bl	800021c <apInit>

  apMain();
 80029cc:	f7fd fc30 	bl	8000230 <apMain>

  return 0;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <__libc_init_array>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	2600      	movs	r6, #0
 80029dc:	4d0c      	ldr	r5, [pc, #48]	; (8002a10 <__libc_init_array+0x38>)
 80029de:	4c0d      	ldr	r4, [pc, #52]	; (8002a14 <__libc_init_array+0x3c>)
 80029e0:	1b64      	subs	r4, r4, r5
 80029e2:	10a4      	asrs	r4, r4, #2
 80029e4:	42a6      	cmp	r6, r4
 80029e6:	d109      	bne.n	80029fc <__libc_init_array+0x24>
 80029e8:	2600      	movs	r6, #0
 80029ea:	f000 f821 	bl	8002a30 <_init>
 80029ee:	4d0a      	ldr	r5, [pc, #40]	; (8002a18 <__libc_init_array+0x40>)
 80029f0:	4c0a      	ldr	r4, [pc, #40]	; (8002a1c <__libc_init_array+0x44>)
 80029f2:	1b64      	subs	r4, r4, r5
 80029f4:	10a4      	asrs	r4, r4, #2
 80029f6:	42a6      	cmp	r6, r4
 80029f8:	d105      	bne.n	8002a06 <__libc_init_array+0x2e>
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
 80029fc:	00b3      	lsls	r3, r6, #2
 80029fe:	58eb      	ldr	r3, [r5, r3]
 8002a00:	4798      	blx	r3
 8002a02:	3601      	adds	r6, #1
 8002a04:	e7ee      	b.n	80029e4 <__libc_init_array+0xc>
 8002a06:	00b3      	lsls	r3, r6, #2
 8002a08:	58eb      	ldr	r3, [r5, r3]
 8002a0a:	4798      	blx	r3
 8002a0c:	3601      	adds	r6, #1
 8002a0e:	e7f2      	b.n	80029f6 <__libc_init_array+0x1e>
 8002a10:	08003398 	.word	0x08003398
 8002a14:	08003398 	.word	0x08003398
 8002a18:	08003398 	.word	0x08003398
 8002a1c:	0800339c 	.word	0x0800339c

08002a20 <memset>:
 8002a20:	0003      	movs	r3, r0
 8002a22:	1882      	adds	r2, r0, r2
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d100      	bne.n	8002a2a <memset+0xa>
 8002a28:	4770      	bx	lr
 8002a2a:	7019      	strb	r1, [r3, #0]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	e7f9      	b.n	8002a24 <memset+0x4>

08002a30 <_init>:
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a36:	bc08      	pop	{r3}
 8002a38:	469e      	mov	lr, r3
 8002a3a:	4770      	bx	lr

08002a3c <_fini>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr
