
stm32g071rbt6_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d4  080033d4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080033d4  080033d4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d4  080033d4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080033dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000018  080033f4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080033f4  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d1d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002628  00000000  00000000  00030d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  00033388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  00033cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001959a  00000000  00000000  000344f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001083e  00000000  00000000  0004da8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f8d  00000000  00000000  0005e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e7c  00000000  00000000  000f22a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002a6c 	.word	0x08002a6c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08002a6c 	.word	0x08002a6c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <apInit>:




void apInit(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  gpio_PinMode(_DEF_LED1, _DEF_OUTPUT_PULLUP);
 8000220:	2104      	movs	r1, #4
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f95a 	bl	80004dc <gpio_PinMode>
}
 8000228:	46c0      	nop			; (mov r8, r8)
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <apMain>:


void apMain(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  ssd1312_Clear();
 8000234:	f000 fb42 	bl	80008bc <ssd1312_Clear>

/* TODO: OLED ap TEST .. */

   //ssd1312_DisplayON();

   ssd1312_WriteString("Hello,",0,0);
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <apMain+0x3c>)
 800023a:	2200      	movs	r2, #0
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f000 fc14 	bl	8000a6c <ssd1312_WriteString>
   ssd1312_WriteString("World!",2,0);
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <apMain+0x40>)
 8000246:	2200      	movs	r2, #0
 8000248:	2102      	movs	r1, #2
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fc0e 	bl	8000a6c <ssd1312_WriteString>
   ssd1312_SetContrast(0x10);
 8000250:	2010      	movs	r0, #16
 8000252:	f000 fc44 	bl	8000ade <ssd1312_SetContrast>
   delay_ms(100);
 8000256:	2064      	movs	r0, #100	; 0x64
 8000258:	f000 f826 	bl	80002a8 <delay_ms>
   ssd1312_SetContrast(0xFF);
 800025c:	20ff      	movs	r0, #255	; 0xff
 800025e:	f000 fc3e 	bl	8000ade <ssd1312_SetContrast>
   delay_ms(100);
 8000262:	2064      	movs	r0, #100	; 0x64
 8000264:	f000 f820 	bl	80002a8 <delay_ms>
   ssd1312_WriteString("Hello,",0,0);
 8000268:	e7e6      	b.n	8000238 <apMain+0x8>
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	08002a84 	.word	0x08002a84
 8000270:	08002a8c 	.word	0x08002a8c

08000274 <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
    HAL_Init();
 800027a:	f000 fc4f 	bl	8000b1c <HAL_Init>
    SystemClock_Config();
 800027e:	f000 f81f 	bl	80002c0 <SystemClock_Config>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <bspInit+0x30>)
 8000284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000286:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <bspInit+0x30>)
 8000288:	2101      	movs	r1, #1
 800028a:	430a      	orrs	r2, r1
 800028c:	635a      	str	r2, [r3, #52]	; 0x34
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <bspInit+0x30>)
 8000290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000292:	2201      	movs	r2, #1
 8000294:	4013      	ands	r3, r2
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	b002      	add	sp, #8
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	40021000 	.word	0x40021000

080002a8 <delay_ms>:


void delay_ms(uint32_t ms)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fcb8 	bl	8000c28 <HAL_Delay>
}
 80002b8:	46c0      	nop			; (mov r8, r8)
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}

080002c0 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b093      	sub	sp, #76	; 0x4c
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	2410      	movs	r4, #16
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	0018      	movs	r0, r3
 80002cc:	2338      	movs	r3, #56	; 0x38
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f002 fbc3 	bl	8002a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	003b      	movs	r3, r7
 80002d8:	0018      	movs	r0, r3
 80002da:	2310      	movs	r3, #16
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f002 fbbc 	bl	8002a5c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002e4:	2380      	movs	r3, #128	; 0x80
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fceb 	bl	8001cc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2202      	movs	r2, #2
 80002f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2280      	movs	r2, #128	; 0x80
 80002f8:	0052      	lsls	r2, r2, #1
 80002fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002fc:	0021      	movs	r1, r4
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2240      	movs	r2, #64	; 0x40
 8000308:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2202      	movs	r2, #2
 800030e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2202      	movs	r2, #2
 8000314:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2208      	movs	r2, #8
 8000320:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	0292      	lsls	r2, r2, #10
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	0492      	lsls	r2, r2, #18
 8000330:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2280      	movs	r2, #128	; 0x80
 8000336:	0592      	lsls	r2, r2, #22
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	187b      	adds	r3, r7, r1
 800033c:	0018      	movs	r0, r3
 800033e:	f001 fd01 	bl	8001d44 <HAL_RCC_OscConfig>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000346:	f000 f819 	bl	800037c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	003b      	movs	r3, r7
 800034c:	2207      	movs	r2, #7
 800034e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000350:	003b      	movs	r3, r7
 8000352:	2202      	movs	r2, #2
 8000354:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	003b      	movs	r3, r7
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	003b      	movs	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000362:	003b      	movs	r3, r7
 8000364:	2102      	movs	r1, #2
 8000366:	0018      	movs	r0, r3
 8000368:	f002 f806 	bl	8002378 <HAL_RCC_ClockConfig>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000370:	f000 f804 	bl	800037c <Error_Handler>
  }
}
 8000374:	46c0      	nop			; (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	b013      	add	sp, #76	; 0x4c
 800037a:	bd90      	pop	{r4, r7, pc}

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000384:	e7fe      	b.n	8000384 <Error_Handler+0x8>
	...

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <HAL_MspInit+0x4c>)
 8000390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000392:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <HAL_MspInit+0x4c>)
 8000394:	2101      	movs	r1, #1
 8000396:	430a      	orrs	r2, r1
 8000398:	641a      	str	r2, [r3, #64]	; 0x40
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <HAL_MspInit+0x4c>)
 800039c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800039e:	2201      	movs	r2, #1
 80003a0:	4013      	ands	r3, r2
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <HAL_MspInit+0x4c>)
 80003a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <HAL_MspInit+0x4c>)
 80003ac:	2180      	movs	r1, #128	; 0x80
 80003ae:	0549      	lsls	r1, r1, #21
 80003b0:	430a      	orrs	r2, r1
 80003b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <HAL_MspInit+0x4c>)
 80003b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	055b      	lsls	r3, r3, #21
 80003bc:	4013      	ands	r3, r2
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80003c2:	23c0      	movs	r3, #192	; 0xc0
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 fc52 	bl	8000c70 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b002      	add	sp, #8
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000

080003d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <NMI_Handler+0x4>

080003de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <HardFault_Handler+0x4>

080003e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fc:	f000 fbf8 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <SystemInit+0x14>)
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	0512      	lsls	r2, r2, #20
 8000412:	609a      	str	r2, [r3, #8]
#endif
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000422:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000424:	f7ff fff0 	bl	8000408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	; (8000460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044e:	f002 fae1 	bl	8002a14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000452:	f002 fad3 	bl	80029fc <main>

08000456 <LoopForever>:

LoopForever:
  b LoopForever
 8000456:	e7fe      	b.n	8000456 <LoopForever>
  ldr   r0, =_estack
 8000458:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000464:	080033dc 	.word	0x080033dc
  ldr r2, =_sbss
 8000468:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800046c:	2000008c 	.word	0x2000008c

08000470 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC1_COMP_IRQHandler>
	...

08000474 <gpio_Init>:




bool gpio_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
    bool ret = true;
 800047a:	1cfb      	adds	r3, r7, #3
 800047c:	2201      	movs	r2, #1
 800047e:	701a      	strb	r2, [r3, #0]



    for(int i = 0; i < GPIO_MAX_CH; i++)
 8000480:	2300      	movs	r3, #0
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	e01e      	b.n	80004c4 <gpio_Init+0x50>
    {
        gpio_PinMode(i, gpio_tbl[i].mode);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	b2d8      	uxtb	r0, r3
 800048a:	4913      	ldr	r1, [pc, #76]	; (80004d8 <gpio_Init+0x64>)
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	0013      	movs	r3, r2
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	189b      	adds	r3, r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	18cb      	adds	r3, r1, r3
 8000498:	3308      	adds	r3, #8
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	0019      	movs	r1, r3
 800049e:	f000 f81d 	bl	80004dc <gpio_PinMode>
        gpio_PinWrite(i, gpio_tbl[i].init_value);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	b2d8      	uxtb	r0, r3
 80004a6:	490c      	ldr	r1, [pc, #48]	; (80004d8 <gpio_Init+0x64>)
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	0013      	movs	r3, r2
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	189b      	adds	r3, r3, r2
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	18cb      	adds	r3, r1, r3
 80004b4:	330b      	adds	r3, #11
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	0019      	movs	r1, r3
 80004ba:	f000 f883 	bl	80005c4 <gpio_PinWrite>
    for(int i = 0; i < GPIO_MAX_CH; i++)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3301      	adds	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dddd      	ble.n	8000486 <gpio_Init+0x12>
    }


    return ret;
 80004ca:	1cfb      	adds	r3, r7, #3
 80004cc:	781b      	ldrb	r3, [r3, #0]
}
 80004ce:	0018      	movs	r0, r3
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	20000004 	.word	0x20000004

080004dc <gpio_PinMode>:


bool gpio_PinMode(uint8_t ch, uint8_t mode)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	0002      	movs	r2, r0
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	1dbb      	adds	r3, r7, #6
 80004ea:	1c0a      	adds	r2, r1, #0
 80004ec:	701a      	strb	r2, [r3, #0]
    bool ret = true;
 80004ee:	231f      	movs	r3, #31
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	2308      	movs	r3, #8
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	0018      	movs	r0, r3
 80004fc:	2314      	movs	r3, #20
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f002 faab 	bl	8002a5c <memset>

    switch(mode)
 8000506:	1dbb      	adds	r3, r7, #6
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b05      	cmp	r3, #5
 800050c:	d834      	bhi.n	8000578 <gpio_PinMode+0x9c>
 800050e:	009a      	lsls	r2, r3, #2
 8000510:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <gpio_PinMode+0xe0>)
 8000512:	18d3      	adds	r3, r2, r3
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	469f      	mov	pc, r3
    {
        case _DEF_INPUT:
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2108      	movs	r1, #8
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
            break;
 8000526:	e027      	b.n	8000578 <gpio_PinMode+0x9c>

        case _DEF_INPUT_PULLUP:
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2108      	movs	r1, #8
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2201      	movs	r2, #1
 8000534:	609a      	str	r2, [r3, #8]
            break;
 8000536:	e01f      	b.n	8000578 <gpio_PinMode+0x9c>

        case _DEF_INPUT_PULLDOWN:
            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000538:	2108      	movs	r1, #8
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2202      	movs	r2, #2
 8000544:	609a      	str	r2, [r3, #8]
            break;
 8000546:	e017      	b.n	8000578 <gpio_PinMode+0x9c>

        case _DEF_OUTPUT:
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8000548:	2108      	movs	r1, #8
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
            break;
 8000556:	e00f      	b.n	8000578 <gpio_PinMode+0x9c>

        case _DEF_OUTPUT_PULLUP:
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8000558:	2108      	movs	r1, #8
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2201      	movs	r2, #1
 800055e:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2201      	movs	r2, #1
 8000564:	609a      	str	r2, [r3, #8]
            break;
 8000566:	e007      	b.n	8000578 <gpio_PinMode+0x9c>

        case _DEF_OUTPUT_PULLDWON:
            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8000568:	2108      	movs	r1, #8
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2201      	movs	r2, #1
 800056e:	605a      	str	r2, [r3, #4]
            GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2202      	movs	r2, #2
 8000574:	609a      	str	r2, [r3, #8]
            break;
 8000576:	46c0      	nop			; (mov r8, r8)
      }


    GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781a      	ldrb	r2, [r3, #0]
 800057c:	4910      	ldr	r1, [pc, #64]	; (80005c0 <gpio_PinMode+0xe4>)
 800057e:	0013      	movs	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	189b      	adds	r3, r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	18cb      	adds	r3, r1, r3
 8000588:	3304      	adds	r3, #4
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	2008      	movs	r0, #8
 800058e:	183b      	adds	r3, r7, r0
 8000590:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8000592:	1dfb      	adds	r3, r7, #7
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	490a      	ldr	r1, [pc, #40]	; (80005c0 <gpio_PinMode+0xe4>)
 8000598:	0013      	movs	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	189b      	adds	r3, r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	585b      	ldr	r3, [r3, r1]
 80005a2:	183a      	adds	r2, r7, r0
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fc2c 	bl	8000e04 <HAL_GPIO_Init>


    return ret;
 80005ac:	231f      	movs	r3, #31
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	781b      	ldrb	r3, [r3, #0]
}
 80005b2:	0018      	movs	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b008      	add	sp, #32
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	08002ad4 	.word	0x08002ad4
 80005c0:	20000004 	.word	0x20000004

080005c4 <gpio_PinWrite>:


void gpio_PinWrite(uint8_t ch, bool value)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	0002      	movs	r2, r0
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	1dbb      	adds	r3, r7, #6
 80005d2:	1c0a      	adds	r2, r1, #0
 80005d4:	701a      	strb	r2, [r3, #0]
    if( ch >= GPIO_MAX_CH)
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d147      	bne.n	800066e <gpio_PinWrite+0xaa>
    {
        return ;
    }

    if (value == true)
 80005de:	1dbb      	adds	r3, r7, #6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d021      	beq.n	800062a <gpio_PinWrite+0x66>
    {
          HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	4923      	ldr	r1, [pc, #140]	; (8000678 <gpio_PinWrite+0xb4>)
 80005ec:	0013      	movs	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	189b      	adds	r3, r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	5858      	ldr	r0, [r3, r1]
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	491f      	ldr	r1, [pc, #124]	; (8000678 <gpio_PinWrite+0xb4>)
 80005fc:	0013      	movs	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	189b      	adds	r3, r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	18cb      	adds	r3, r1, r3
 8000606:	3304      	adds	r3, #4
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	b29c      	uxth	r4, r3
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781a      	ldrb	r2, [r3, #0]
 8000610:	4919      	ldr	r1, [pc, #100]	; (8000678 <gpio_PinWrite+0xb4>)
 8000612:	0013      	movs	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	189b      	adds	r3, r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	18cb      	adds	r3, r1, r3
 800061c:	3309      	adds	r3, #9
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	001a      	movs	r2, r3
 8000622:	0021      	movs	r1, r4
 8000624:	f000 fd52 	bl	80010cc <HAL_GPIO_WritePin>
 8000628:	e022      	b.n	8000670 <gpio_PinWrite+0xac>
    }
    else
    {
          HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	4912      	ldr	r1, [pc, #72]	; (8000678 <gpio_PinWrite+0xb4>)
 8000630:	0013      	movs	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	189b      	adds	r3, r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	5858      	ldr	r0, [r3, r1]
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	490e      	ldr	r1, [pc, #56]	; (8000678 <gpio_PinWrite+0xb4>)
 8000640:	0013      	movs	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	189b      	adds	r3, r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	18cb      	adds	r3, r1, r3
 800064a:	3304      	adds	r3, #4
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	b29c      	uxth	r4, r3
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	4908      	ldr	r1, [pc, #32]	; (8000678 <gpio_PinWrite+0xb4>)
 8000656:	0013      	movs	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	189b      	adds	r3, r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	18cb      	adds	r3, r1, r3
 8000660:	330a      	adds	r3, #10
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	001a      	movs	r2, r3
 8000666:	0021      	movs	r1, r4
 8000668:	f000 fd30 	bl	80010cc <HAL_GPIO_WritePin>
 800066c:	e000      	b.n	8000670 <gpio_PinWrite+0xac>
        return ;
 800066e:	46c0      	nop			; (mov r8, r8)
    }

}
 8000670:	46bd      	mov	sp, r7
 8000672:	b003      	add	sp, #12
 8000674:	bd90      	pop	{r4, r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	20000004 	.word	0x20000004

0800067c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_I2C1_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000694:	2201      	movs	r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fd25 	bl	8001108 <HAL_I2C_Init>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006c2:	f7ff fe5b 	bl	800037c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fa62 	bl	8001b94 <HAL_I2CEx_ConfigAnalogFilter>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f7ff fe52 	bl	800037c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006da:	2100      	movs	r1, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 faa5 	bl	8001c2c <HAL_I2CEx_ConfigDigitalFilter>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f7ff fe49 	bl	800037c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000034 	.word	0x20000034
 80006f4:	40005400 	.word	0x40005400
 80006f8:	00602173 	.word	0x00602173

080006fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b097      	sub	sp, #92	; 0x5c
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	2344      	movs	r3, #68	; 0x44
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	0018      	movs	r0, r3
 800070a:	2314      	movs	r3, #20
 800070c:	001a      	movs	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f002 f9a4 	bl	8002a5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	2410      	movs	r4, #16
 8000716:	193b      	adds	r3, r7, r4
 8000718:	0018      	movs	r0, r3
 800071a:	2334      	movs	r3, #52	; 0x34
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f002 f99c 	bl	8002a5c <memset>
  if(i2cHandle->Instance==I2C1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a23      	ldr	r2, [pc, #140]	; (80007b8 <HAL_I2C_MspInit+0xbc>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d13f      	bne.n	80007ae <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2220      	movs	r2, #32
 8000732:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	193b      	adds	r3, r7, r4
 800073c:	0018      	movs	r0, r3
 800073e:	f001 ffa5 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000746:	f7ff fe19 	bl	800037c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <HAL_I2C_MspInit+0xc0>)
 800074c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <HAL_I2C_MspInit+0xc0>)
 8000750:	2101      	movs	r1, #1
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HAL_I2C_MspInit+0xc0>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075a:	2201      	movs	r2, #1
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000762:	2144      	movs	r1, #68	; 0x44
 8000764:	187b      	adds	r3, r7, r1
 8000766:	22c0      	movs	r2, #192	; 0xc0
 8000768:	00d2      	lsls	r2, r2, #3
 800076a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2212      	movs	r2, #18
 8000770:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2206      	movs	r2, #6
 8000782:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	187a      	adds	r2, r7, r1
 8000786:	23a0      	movs	r3, #160	; 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f000 fb39 	bl	8000e04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_I2C_MspInit+0xc0>)
 8000794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_I2C_MspInit+0xc0>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0389      	lsls	r1, r1, #14
 800079c:	430a      	orrs	r2, r1
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_I2C_MspInit+0xc0>)
 80007a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	039b      	lsls	r3, r3, #14
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b017      	add	sp, #92	; 0x5c
 80007b4:	bd90      	pop	{r4, r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40005400 	.word	0x40005400
 80007bc:	40021000 	.word	0x40021000

080007c0 <ssd1312_WriteCommand>:

/*
 *
 */
static void ssd1312_WriteCommand(uint8_t cmd)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	0002      	movs	r2, r0
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[2]={0};      //Control Byte + Command Byte
 80007cc:	210c      	movs	r1, #12
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	801a      	strh	r2, [r3, #0]
    buffer[0]=(0<<7)|(0<<6);    //Co=0 , D/C=0
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
    buffer[1]=cmd;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	1dfa      	adds	r2, r7, #7
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	705a      	strb	r2, [r3, #1]

    HAL_I2C_Master_Transmit(&SSD1312_I2C_PORT, SSD1312_I2C_ADDR, (uint8_t*)buffer, 2, HAL_MAX_DELAY);
 80007e2:	187a      	adds	r2, r7, r1
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <ssd1312_WriteCommand+0x3c>)
 80007e6:	2301      	movs	r3, #1
 80007e8:	425b      	negs	r3, r3
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2302      	movs	r3, #2
 80007ee:	2178      	movs	r1, #120	; 0x78
 80007f0:	f000 fd20 	bl	8001234 <HAL_I2C_Master_Transmit>
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b004      	add	sp, #16
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000034 	.word	0x20000034

08000800 <ssd1312_WriteData>:

/*
 *
 */
static void ssd1312_WriteData(uint8_t * buffer, size_t buff_size)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af04      	add	r7, sp, #16
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  HAL_I2C_Mem_Write(&SSD1312_I2C_PORT, SSD1312_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b29b      	uxth	r3, r3
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <ssd1312_WriteData+0x30>)
 8000810:	2201      	movs	r2, #1
 8000812:	4252      	negs	r2, r2
 8000814:	9202      	str	r2, [sp, #8]
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2301      	movs	r3, #1
 800081e:	2240      	movs	r2, #64	; 0x40
 8000820:	2178      	movs	r1, #120	; 0x78
 8000822:	f000 fe0f 	bl	8001444 <HAL_I2C_Mem_Write>
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000034 	.word	0x20000034

08000834 <ssd1312_Init>:

/*
 *
 */
void ssd1312_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
    delay_ms(200);
 8000838:	20c8      	movs	r0, #200	; 0xc8
 800083a:	f7ff fd35 	bl	80002a8 <delay_ms>


    ssd1312_WriteCommand(0xA8);    //Set Mux Ratio
 800083e:	20a8      	movs	r0, #168	; 0xa8
 8000840:	f7ff ffbe 	bl	80007c0 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x3F);    //64MUX
 8000844:	203f      	movs	r0, #63	; 0x3f
 8000846:	f7ff ffbb 	bl	80007c0 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xD3);    //Set Display Offset
 800084a:	20d3      	movs	r0, #211	; 0xd3
 800084c:	f7ff ffb8 	bl	80007c0 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x00);    //COM0
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff ffb5 	bl	80007c0 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0x40);    //Set Display Start Line
 8000856:	2040      	movs	r0, #64	; 0x40
 8000858:	f7ff ffb2 	bl	80007c0 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xA0);    //Set Segment re-map, Default 0xA0
 800085c:	20a0      	movs	r0, #160	; 0xa0
 800085e:	f7ff ffaf 	bl	80007c0 <ssd1312_WriteCommand>
                        //column address 127 is mapped to SEG0 (좌우 반전)

    ssd1312_WriteCommand(0xC8);    //Set COM Output Scan Direction, default 0xC0
 8000862:	20c8      	movs	r0, #200	; 0xc8
 8000864:	f7ff ffac 	bl	80007c0 <ssd1312_WriteCommand>
                        //remapped mode. Scan from COM[N-1] to COM0 (상하 반전)

    ssd1312_WriteCommand(0xDA);    //Set COM Pins hardware configuration
 8000868:	20da      	movs	r0, #218	; 0xda
 800086a:	f7ff ffa9 	bl	80007c0 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x12);
 800086e:	2012      	movs	r0, #18
 8000870:	f7ff ffa6 	bl	80007c0 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0x20);    //Set Memory Addressing Mode
 8000874:	2020      	movs	r0, #32
 8000876:	f7ff ffa3 	bl	80007c0 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x02);    //Page Addressing Mode
 800087a:	2002      	movs	r0, #2
 800087c:	f7ff ffa0 	bl	80007c0 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0x81);    //Set Contrast Control
 8000880:	2081      	movs	r0, #129	; 0x81
 8000882:	f7ff ff9d 	bl	80007c0 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x7F);    //1~256
 8000886:	207f      	movs	r0, #127	; 0x7f
 8000888:	f7ff ff9a 	bl	80007c0 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xA4);    //Disable Entire Display On
 800088c:	20a4      	movs	r0, #164	; 0xa4
 800088e:	f7ff ff97 	bl	80007c0 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xA6);    //Set Normal Display
 8000892:	20a6      	movs	r0, #166	; 0xa6
 8000894:	f7ff ff94 	bl	80007c0 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xD5);    //Set Osc Frequency
 8000898:	20d5      	movs	r0, #213	; 0xd5
 800089a:	f7ff ff91 	bl	80007c0 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x80);
 800089e:	2080      	movs	r0, #128	; 0x80
 80008a0:	f7ff ff8e 	bl	80007c0 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0x8D);    //Enable charge pump regulator
 80008a4:	208d      	movs	r0, #141	; 0x8d
 80008a6:	f7ff ff8b 	bl	80007c0 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x14);
 80008aa:	2014      	movs	r0, #20
 80008ac:	f7ff ff88 	bl	80007c0 <ssd1312_WriteCommand>

    ssd1312_WriteCommand(0xAF);    //Display ON
 80008b0:	20af      	movs	r0, #175	; 0xaf
 80008b2:	f7ff ff85 	bl	80007c0 <ssd1312_WriteCommand>
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ssd1312_Clear>:

/*
 *
 */
void ssd1312_Clear(void)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b0a3      	sub	sp, #140	; 0x8c
 80008c0:	af00      	add	r7, sp, #0
    uint8_t buffer[128]={0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	3304      	adds	r3, #4
 80008ca:	227c      	movs	r2, #124	; 0x7c
 80008cc:	2100      	movs	r1, #0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 f8c4 	bl	8002a5c <memset>

    ssd1312_WriteCommand(0x00);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff73 	bl	80007c0 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(0x10);
 80008da:	2010      	movs	r0, #16
 80008dc:	f7ff ff70 	bl	80007c0 <ssd1312_WriteCommand>

    for(uint8_t i=0;i<8;i++)
 80008e0:	2387      	movs	r3, #135	; 0x87
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	e011      	b.n	800090e <ssd1312_Clear+0x52>
    {
      ssd1312_WriteCommand(0xB0+i);
 80008ea:	2487      	movs	r4, #135	; 0x87
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3b50      	subs	r3, #80	; 0x50
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff ff63 	bl	80007c0 <ssd1312_WriteCommand>
      ssd1312_WriteData(buffer,128);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0018      	movs	r0, r3
 8000900:	f7ff ff7e 	bl	8000800 <ssd1312_WriteData>
    for(uint8_t i=0;i<8;i++)
 8000904:	193b      	adds	r3, r7, r4
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	193b      	adds	r3, r7, r4
 800090a:	3201      	adds	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	2387      	movs	r3, #135	; 0x87
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b07      	cmp	r3, #7
 8000916:	d9e8      	bls.n	80008ea <ssd1312_Clear+0x2e>
    }
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b023      	add	sp, #140	; 0x8c
 8000920:	bd90      	pop	{r4, r7, pc}

08000922 <ssd1312_SetCoord>:
/*
 *
 *
 */
void ssd1312_SetCoord(uint8_t page, uint8_t col)
{
 8000922:	b5b0      	push	{r4, r5, r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af00      	add	r7, sp, #0
 8000928:	0002      	movs	r2, r0
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	1dbb      	adds	r3, r7, #6
 8000930:	1c0a      	adds	r2, r1, #0
 8000932:	701a      	strb	r2, [r3, #0]
    uint8_t col_low=0x0F,col_high=0x1F;
 8000934:	240f      	movs	r4, #15
 8000936:	193b      	adds	r3, r7, r4
 8000938:	220f      	movs	r2, #15
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	200e      	movs	r0, #14
 800093e:	183b      	adds	r3, r7, r0
 8000940:	221f      	movs	r2, #31
 8000942:	701a      	strb	r2, [r3, #0]
    col_low=(col&0x0F);
 8000944:	193b      	adds	r3, r7, r4
 8000946:	1dba      	adds	r2, r7, #6
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	210f      	movs	r1, #15
 800094c:	400a      	ands	r2, r1
 800094e:	701a      	strb	r2, [r3, #0]
    col_high=0x10|((col>>4)&0x0F);
 8000950:	1dbb      	adds	r3, r7, #6
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	b2db      	uxtb	r3, r3
 8000958:	b25b      	sxtb	r3, r3
 800095a:	2210      	movs	r2, #16
 800095c:	4313      	orrs	r3, r2
 800095e:	b25a      	sxtb	r2, r3
 8000960:	0005      	movs	r5, r0
 8000962:	183b      	adds	r3, r7, r0
 8000964:	701a      	strb	r2, [r3, #0]
    ssd1312_WriteCommand(0xB0+page);
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	3b50      	subs	r3, #80	; 0x50
 800096c:	b2db      	uxtb	r3, r3
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ff26 	bl	80007c0 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(col_low);
 8000974:	193b      	adds	r3, r7, r4
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff ff21 	bl	80007c0 <ssd1312_WriteCommand>
    ssd1312_WriteCommand(col_high);
 800097e:	197b      	adds	r3, r7, r5
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	0018      	movs	r0, r3
 8000984:	f7ff ff1c 	bl	80007c0 <ssd1312_WriteCommand>
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b004      	add	sp, #16
 800098e:	bdb0      	pop	{r4, r5, r7, pc}

08000990 <ssd1312_WriteChar>:
/*
 *
 *
 */
void ssd1312_WriteChar(uint8_t character_Code, uint8_t page, uint16_t column)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b08b      	sub	sp, #44	; 0x2c
 8000994:	af00      	add	r7, sp, #0
 8000996:	0004      	movs	r4, r0
 8000998:	0008      	movs	r0, r1
 800099a:	0011      	movs	r1, r2
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	1c22      	adds	r2, r4, #0
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	1dbb      	adds	r3, r7, #6
 80009a4:	1c02      	adds	r2, r0, #0
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	1c0a      	adds	r2, r1, #0
 80009ac:	801a      	strh	r2, [r3, #0]
    uint8_t char_Buffer[FONT_WIDTH*2]={0};
 80009ae:	230c      	movs	r3, #12
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	3304      	adds	r3, #4
 80009b8:	2214      	movs	r2, #20
 80009ba:	2100      	movs	r1, #0
 80009bc:	0018      	movs	r0, r3
 80009be:	f002 f84d 	bl	8002a5c <memset>

    for(uint8_t i=0;i<FONT_WIDTH*2;i++)
 80009c2:	2327      	movs	r3, #39	; 0x27
 80009c4:	18fb      	adds	r3, r7, r3
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	e018      	b.n	80009fe <ssd1312_WriteChar+0x6e>
    {
        char_Buffer[i]=ssd1312_Fonts[(character_Code-32)*(FONT_WIDTH*2)+i];
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	3b20      	subs	r3, #32
 80009d2:	001a      	movs	r2, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	189b      	adds	r3, r3, r2
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	001a      	movs	r2, r3
 80009de:	2027      	movs	r0, #39	; 0x27
 80009e0:	183b      	adds	r3, r7, r0
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	18d2      	adds	r2, r2, r3
 80009e6:	183b      	adds	r3, r7, r0
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	491f      	ldr	r1, [pc, #124]	; (8000a68 <ssd1312_WriteChar+0xd8>)
 80009ec:	5c89      	ldrb	r1, [r1, r2]
 80009ee:	220c      	movs	r2, #12
 80009f0:	18ba      	adds	r2, r7, r2
 80009f2:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i=0;i<FONT_WIDTH*2;i++)
 80009f4:	183b      	adds	r3, r7, r0
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	183b      	adds	r3, r7, r0
 80009fa:	3201      	adds	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	2327      	movs	r3, #39	; 0x27
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b17      	cmp	r3, #23
 8000a06:	d9e1      	bls.n	80009cc <ssd1312_WriteChar+0x3c>
    }

    for(uint8_t i=0;i<2;i++)
 8000a08:	2326      	movs	r3, #38	; 0x26
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e020      	b.n	8000a54 <ssd1312_WriteChar+0xc4>
    {
      ssd1312_SetCoord(page+i,column);
 8000a12:	1dba      	adds	r2, r7, #6
 8000a14:	2426      	movs	r4, #38	; 0x26
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	18d3      	adds	r3, r2, r3
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	0019      	movs	r1, r3
 8000a28:	0010      	movs	r0, r2
 8000a2a:	f7ff ff7a 	bl	8000922 <ssd1312_SetCoord>
      ssd1312_WriteData(&char_Buffer[i*FONT_WIDTH],FONT_WIDTH);
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	0013      	movs	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	189b      	adds	r3, r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	189b      	adds	r3, r3, r2
 8000a42:	210c      	movs	r1, #12
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fedb 	bl	8000800 <ssd1312_WriteData>
    for(uint8_t i=0;i<2;i++)
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	3201      	adds	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	2326      	movs	r3, #38	; 0x26
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d9d9      	bls.n	8000a12 <ssd1312_WriteChar+0x82>
    }
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b00b      	add	sp, #44	; 0x2c
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	08002aec 	.word	0x08002aec

08000a6c <ssd1312_WriteString>:

/*
 *
 */
void ssd1312_WriteString(char *str, uint8_t page, uint8_t col)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	0008      	movs	r0, r1
 8000a76:	0011      	movs	r1, r2
 8000a78:	1cfb      	adds	r3, r7, #3
 8000a7a:	1c02      	adds	r2, r0, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	1cbb      	adds	r3, r7, #2
 8000a80:	1c0a      	adds	r2, r1, #0
 8000a82:	701a      	strb	r2, [r3, #0]
    while(*str)
 8000a84:	e021      	b.n	8000aca <ssd1312_WriteString+0x5e>
    {
        if((127<col+FONT_WIDTH))
 8000a86:	1cbb      	adds	r3, r7, #2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b73      	cmp	r3, #115	; 0x73
 8000a8c:	d90b      	bls.n	8000aa6 <ssd1312_WriteString+0x3a>
        {
            if(page==6)
 8000a8e:	1cfb      	adds	r3, r7, #3
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d01e      	beq.n	8000ad4 <ssd1312_WriteString+0x68>
            {
                break;
            }
            page+=2;
 8000a96:	1cfb      	adds	r3, r7, #3
 8000a98:	1cfa      	adds	r2, r7, #3
 8000a9a:	7812      	ldrb	r2, [r2, #0]
 8000a9c:	3202      	adds	r2, #2
 8000a9e:	701a      	strb	r2, [r3, #0]
            col=0;
 8000aa0:	1cbb      	adds	r3, r7, #2
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
        }
        ssd1312_WriteChar(*str,page,col);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	7818      	ldrb	r0, [r3, #0]
 8000aaa:	1cbb      	adds	r3, r7, #2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	1cfb      	adds	r3, r7, #3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	f7ff ff6b 	bl	8000990 <ssd1312_WriteChar>

        col+=FONT_WIDTH;
 8000aba:	1cbb      	adds	r3, r7, #2
 8000abc:	1cba      	adds	r2, r7, #2
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	320c      	adds	r2, #12
 8000ac2:	701a      	strb	r2, [r3, #0]
        str++;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
    while(*str)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1d9      	bne.n	8000a86 <ssd1312_WriteString+0x1a>
    }
}
 8000ad2:	e000      	b.n	8000ad6 <ssd1312_WriteString+0x6a>
                break;
 8000ad4:	46c0      	nop			; (mov r8, r8)
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}

08000ade <ssd1312_SetContrast>:

/*
 *
 */
void ssd1312_SetContrast(uint8_t val)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	701a      	strb	r2, [r3, #0]
  ssd1312_WriteCommand(CONTROL_CONTRAST_CONTROL);
 8000aea:	2081      	movs	r0, #129	; 0x81
 8000aec:	f7ff fe68 	bl	80007c0 <ssd1312_WriteCommand>
  ssd1312_WriteCommand(DATA_CONTRAST_VALUE(val));
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	0018      	movs	r0, r3
 8000af6:	f7ff fe63 	bl	80007c0 <ssd1312_WriteCommand>
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <hwInit>:




void hwInit(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  bspInit();
 8000b06:	f7ff fbb5 	bl	8000274 <bspInit>

  //TODO: HW초기화설정(3)
  MX_I2C1_Init();
 8000b0a:	f7ff fdb7 	bl	800067c <MX_I2C1_Init>
  gpio_Init();
 8000b0e:	f7ff fcb1 	bl	8000474 <gpio_Init>
  ssd1312_Init();
 8000b12:	f7ff fe8f 	bl	8000834 <ssd1312_Init>


}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_Init+0x3c>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_Init+0x3c>)
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	0049      	lsls	r1, r1, #1
 8000b32:	430a      	orrs	r2, r1
 8000b34:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b36:	2003      	movs	r0, #3
 8000b38:	f000 f810 	bl	8000b5c <HAL_InitTick>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d003      	beq.n	8000b48 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e001      	b.n	8000b4c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fc1e 	bl	8000388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b64:	230f      	movs	r3, #15
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <HAL_InitTick+0x88>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d02b      	beq.n	8000bcc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_InitTick+0x8c>)
 8000b76:	681c      	ldr	r4, [r3, #0]
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <HAL_InitTick+0x88>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	23fa      	movs	r3, #250	; 0xfa
 8000b80:	0098      	lsls	r0, r3, #2
 8000b82:	f7ff fabf 	bl	8000104 <__udivsi3>
 8000b86:	0003      	movs	r3, r0
 8000b88:	0019      	movs	r1, r3
 8000b8a:	0020      	movs	r0, r4
 8000b8c:	f7ff faba 	bl	8000104 <__udivsi3>
 8000b90:	0003      	movs	r3, r0
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 f929 	bl	8000dea <HAL_SYSTICK_Config>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d112      	bne.n	8000bc2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	d80a      	bhi.n	8000bb8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	425b      	negs	r3, r3
 8000ba8:	2200      	movs	r2, #0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 f908 	bl	8000dc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_InitTick+0x90>)
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e00d      	b.n	8000bd4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bb8:	230f      	movs	r3, #15
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	e008      	b.n	8000bd4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	e003      	b.n	8000bd4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bcc:	230f      	movs	r3, #15
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b005      	add	sp, #20
 8000be0:	bd90      	pop	{r4, r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	20000014 	.word	0x20000014
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000010 	.word	0x20000010

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	18d2      	adds	r2, r2, r3
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_IncTick+0x20>)
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	20000014 	.word	0x20000014
 8000c10:	20000088 	.word	0x20000088

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	20000088 	.word	0x20000088

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff0 	bl	8000c14 <HAL_GetTick>
 8000c34:	0003      	movs	r3, r0
 8000c36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	001a      	movs	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	189b      	adds	r3, r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	f7ff ffe0 	bl	8000c14 <HAL_GetTick>
 8000c54:	0002      	movs	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b004      	add	sp, #16
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000014 	.word	0x20000014

08000c70 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c7e:	4013      	ands	r3, r2
 8000c80:	0019      	movs	r1, r3
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	40010000 	.word	0x40010000
 8000c98:	fffff9ff 	.word	0xfffff9ff

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb0:	d828      	bhi.n	8000d04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb2:	4a2f      	ldr	r2, [pc, #188]	; (8000d70 <__NVIC_SetPriority+0xd4>)
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	33c0      	adds	r3, #192	; 0xc0
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	589b      	ldr	r3, [r3, r2]
 8000cc2:	1dfa      	adds	r2, r7, #7
 8000cc4:	7812      	ldrb	r2, [r2, #0]
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	2203      	movs	r2, #3
 8000cca:	400a      	ands	r2, r1
 8000ccc:	00d2      	lsls	r2, r2, #3
 8000cce:	21ff      	movs	r1, #255	; 0xff
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	000a      	movs	r2, r1
 8000cd4:	43d2      	mvns	r2, r2
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	019b      	lsls	r3, r3, #6
 8000cde:	22ff      	movs	r2, #255	; 0xff
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2303      	movs	r3, #3
 8000cea:	4003      	ands	r3, r0
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf0:	481f      	ldr	r0, [pc, #124]	; (8000d70 <__NVIC_SetPriority+0xd4>)
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	33c0      	adds	r3, #192	; 0xc0
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d02:	e031      	b.n	8000d68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <__NVIC_SetPriority+0xd8>)
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	400b      	ands	r3, r1
 8000d10:	3b08      	subs	r3, #8
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3306      	adds	r3, #6
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	18d3      	adds	r3, r2, r3
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	1dfa      	adds	r2, r7, #7
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	0011      	movs	r1, r2
 8000d24:	2203      	movs	r2, #3
 8000d26:	400a      	ands	r2, r1
 8000d28:	00d2      	lsls	r2, r2, #3
 8000d2a:	21ff      	movs	r1, #255	; 0xff
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	000a      	movs	r2, r1
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	401a      	ands	r2, r3
 8000d34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	22ff      	movs	r2, #255	; 0xff
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0018      	movs	r0, r3
 8000d44:	2303      	movs	r3, #3
 8000d46:	4003      	ands	r3, r0
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4c:	4809      	ldr	r0, [pc, #36]	; (8000d74 <__NVIC_SetPriority+0xd8>)
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	001c      	movs	r4, r3
 8000d54:	230f      	movs	r3, #15
 8000d56:	4023      	ands	r3, r4
 8000d58:	3b08      	subs	r3, #8
 8000d5a:	089b      	lsrs	r3, r3, #2
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	3306      	adds	r3, #6
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	18c3      	adds	r3, r0, r3
 8000d64:	3304      	adds	r3, #4
 8000d66:	601a      	str	r2, [r3, #0]
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b003      	add	sp, #12
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	1e5a      	subs	r2, r3, #1
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	045b      	lsls	r3, r3, #17
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d301      	bcc.n	8000d90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e010      	b.n	8000db2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <SysTick_Config+0x44>)
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	3a01      	subs	r2, #1
 8000d96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d98:	2301      	movs	r3, #1
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	2103      	movs	r1, #3
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff ff7c 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x44>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x44>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	0018      	movs	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	210f      	movs	r1, #15
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	1c02      	adds	r2, r0, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff ff5d 	bl	8000c9c <__NVIC_SetPriority>
}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b004      	add	sp, #16
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff ffbf 	bl	8000d78 <SysTick_Config>
 8000dfa:	0003      	movs	r3, r0
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b002      	add	sp, #8
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	e147      	b.n	80010a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4091      	lsls	r1, r2
 8000e1e:	000a      	movs	r2, r1
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d100      	bne.n	8000e2c <HAL_GPIO_Init+0x28>
 8000e2a:	e138      	b.n	800109e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2203      	movs	r2, #3
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <HAL_GPIO_Init+0x40>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d130      	bne.n	8000ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	409a      	lsls	r2, r3
 8000e52:	0013      	movs	r3, r2
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	2201      	movs	r2, #1
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d017      	beq.n	8000ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d123      	bne.n	8000f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	58d3      	ldr	r3, [r2, r3]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2207      	movs	r2, #7
 8000f00:	4013      	ands	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2107      	movs	r1, #7
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	6939      	ldr	r1, [r7, #16]
 8000f34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2203      	movs	r2, #3
 8000f54:	401a      	ands	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	23c0      	movs	r3, #192	; 0xc0
 8000f70:	029b      	lsls	r3, r3, #10
 8000f72:	4013      	ands	r3, r2
 8000f74:	d100      	bne.n	8000f78 <HAL_GPIO_Init+0x174>
 8000f76:	e092      	b.n	800109e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f78:	4a50      	ldr	r2, [pc, #320]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	3318      	adds	r3, #24
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	589b      	ldr	r3, [r3, r2]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2203      	movs	r2, #3
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	220f      	movs	r2, #15
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	43da      	mvns	r2, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	23a0      	movs	r3, #160	; 0xa0
 8000fa0:	05db      	lsls	r3, r3, #23
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x1ca>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <HAL_GPIO_Init+0x2bc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x1c6>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a44      	ldr	r2, [pc, #272]	; (80010c4 <HAL_GPIO_Init+0x2c0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x1c2>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a43      	ldr	r2, [pc, #268]	; (80010c8 <HAL_GPIO_Init+0x2c4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x1be>
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x1cc>
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x1cc>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x1cc>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x1cc>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	00d2      	lsls	r2, r2, #3
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fe0:	4936      	ldr	r1, [pc, #216]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3318      	adds	r3, #24
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	035b      	lsls	r3, r3, #13
 8001006:	4013      	ands	r3, r2
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43da      	mvns	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	039b      	lsls	r3, r3, #14
 8001030:	4013      	ands	r3, r2
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8001044:	2384      	movs	r3, #132	; 0x84
 8001046:	58d3      	ldr	r3, [r2, r3]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	029b      	lsls	r3, r3, #10
 800105c:	4013      	ands	r3, r2
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001068:	4914      	ldr	r1, [pc, #80]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 800106a:	2284      	movs	r2, #132	; 0x84
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	58d3      	ldr	r3, [r2, r3]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	025b      	lsls	r3, r3, #9
 800108a:	4013      	ands	r3, r2
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001096:	4909      	ldr	r1, [pc, #36]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	40da      	lsrs	r2, r3
 80010ac:	1e13      	subs	r3, r2, #0
 80010ae:	d000      	beq.n	80010b2 <HAL_GPIO_Init+0x2ae>
 80010b0:	e6b0      	b.n	8000e14 <HAL_GPIO_Init+0x10>
  }
}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b006      	add	sp, #24
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021800 	.word	0x40021800
 80010c0:	50000400 	.word	0x50000400
 80010c4:	50000800 	.word	0x50000800
 80010c8:	50000c00 	.word	0x50000c00

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	0008      	movs	r0, r1
 80010d6:	0011      	movs	r1, r2
 80010d8:	1cbb      	adds	r3, r7, #2
 80010da:	1c02      	adds	r2, r0, #0
 80010dc:	801a      	strh	r2, [r3, #0]
 80010de:	1c7b      	adds	r3, r7, #1
 80010e0:	1c0a      	adds	r2, r1, #0
 80010e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e4:	1c7b      	adds	r3, r7, #1
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ec:	1cbb      	adds	r3, r7, #2
 80010ee:	881a      	ldrh	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f4:	e003      	b.n	80010fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010f6:	1cbb      	adds	r3, r7, #2
 80010f8:	881a      	ldrh	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e082      	b.n	8001220 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2241      	movs	r2, #65	; 0x41
 800111e:	5c9b      	ldrb	r3, [r3, r2]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d107      	bne.n	8001136 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2240      	movs	r2, #64	; 0x40
 800112a:	2100      	movs	r1, #0
 800112c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff fae3 	bl	80006fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2241      	movs	r2, #65	; 0x41
 800113a:	2124      	movs	r1, #36	; 0x24
 800113c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2101      	movs	r1, #1
 800114a:	438a      	bics	r2, r1
 800114c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4934      	ldr	r1, [pc, #208]	; (8001228 <HAL_I2C_Init+0x120>)
 8001158:	400a      	ands	r2, r1
 800115a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4931      	ldr	r1, [pc, #196]	; (800122c <HAL_I2C_Init+0x124>)
 8001168:	400a      	ands	r2, r1
 800116a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d108      	bne.n	8001186 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	0209      	lsls	r1, r1, #8
 8001180:	430a      	orrs	r2, r1
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	e007      	b.n	8001196 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2184      	movs	r1, #132	; 0x84
 8001190:	0209      	lsls	r1, r1, #8
 8001192:	430a      	orrs	r2, r1
 8001194:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d104      	bne.n	80011a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	491f      	ldr	r1, [pc, #124]	; (8001230 <HAL_I2C_Init+0x128>)
 80011b4:	430a      	orrs	r2, r1
 80011b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	491a      	ldr	r1, [pc, #104]	; (800122c <HAL_I2C_Init+0x124>)
 80011c4:	400a      	ands	r2, r1
 80011c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69d9      	ldr	r1, [r3, #28]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1a      	ldr	r2, [r3, #32]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2241      	movs	r2, #65	; 0x41
 800120c:	2120      	movs	r1, #32
 800120e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2242      	movs	r2, #66	; 0x42
 800121a:	2100      	movs	r1, #0
 800121c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}
 8001228:	f0ffffff 	.word	0xf0ffffff
 800122c:	ffff7fff 	.word	0xffff7fff
 8001230:	02008000 	.word	0x02008000

08001234 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af02      	add	r7, sp, #8
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	0008      	movs	r0, r1
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	0019      	movs	r1, r3
 8001242:	230a      	movs	r3, #10
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	1c02      	adds	r2, r0, #0
 8001248:	801a      	strh	r2, [r3, #0]
 800124a:	2308      	movs	r3, #8
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	1c0a      	adds	r2, r1, #0
 8001250:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2241      	movs	r2, #65	; 0x41
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b20      	cmp	r3, #32
 800125c:	d000      	beq.n	8001260 <HAL_I2C_Master_Transmit+0x2c>
 800125e:	e0e7      	b.n	8001430 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	5c9b      	ldrb	r3, [r3, r2]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_I2C_Master_Transmit+0x3a>
 800126a:	2302      	movs	r3, #2
 800126c:	e0e1      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1fe>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2240      	movs	r2, #64	; 0x40
 8001272:	2101      	movs	r1, #1
 8001274:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001276:	f7ff fccd 	bl	8000c14 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	0219      	lsls	r1, r3, #8
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2319      	movs	r3, #25
 800128a:	2201      	movs	r2, #1
 800128c:	f000 fa8e 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 8001290:	1e03      	subs	r3, r0, #0
 8001292:	d001      	beq.n	8001298 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0cc      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2241      	movs	r2, #65	; 0x41
 800129c:	2121      	movs	r1, #33	; 0x21
 800129e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2242      	movs	r2, #66	; 0x42
 80012a4:	2110      	movs	r1, #16
 80012a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2208      	movs	r2, #8
 80012b8:	18ba      	adds	r2, r7, r2
 80012ba:	8812      	ldrh	r2, [r2, #0]
 80012bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d911      	bls.n	80012f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	22ff      	movs	r2, #255	; 0xff
 80012d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	045c      	lsls	r4, r3, #17
 80012de:	230a      	movs	r3, #10
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	8819      	ldrh	r1, [r3, #0]
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	4b55      	ldr	r3, [pc, #340]	; (800143c <HAL_I2C_Master_Transmit+0x208>)
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	0023      	movs	r3, r4
 80012ec:	f000 fc18 	bl	8001b20 <I2C_TransferConfig>
 80012f0:	e075      	b.n	80013de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001300:	b2da      	uxtb	r2, r3
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	049c      	lsls	r4, r3, #18
 8001306:	230a      	movs	r3, #10
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	8819      	ldrh	r1, [r3, #0]
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	4b4b      	ldr	r3, [pc, #300]	; (800143c <HAL_I2C_Master_Transmit+0x208>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	0023      	movs	r3, r4
 8001314:	f000 fc04 	bl	8001b20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001318:	e061      	b.n	80013de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	0018      	movs	r0, r3
 8001322:	f000 fa82 	bl	800182a <I2C_WaitOnTXISFlagUntilTimeout>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d001      	beq.n	800132e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e081      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001348:	b29b      	uxth	r3, r3
 800134a:	3b01      	subs	r3, #1
 800134c:	b29a      	uxth	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001356:	3b01      	subs	r3, #1
 8001358:	b29a      	uxth	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001362:	b29b      	uxth	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d03a      	beq.n	80013de <HAL_I2C_Master_Transmit+0x1aa>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136c:	2b00      	cmp	r3, #0
 800136e:	d136      	bne.n	80013de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	0013      	movs	r3, r2
 800137a:	2200      	movs	r2, #0
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	f000 fa15 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d001      	beq.n	800138a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e053      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138e:	b29b      	uxth	r3, r3
 8001390:	2bff      	cmp	r3, #255	; 0xff
 8001392:	d911      	bls.n	80013b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	22ff      	movs	r2, #255	; 0xff
 8001398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	045c      	lsls	r4, r3, #17
 80013a4:	230a      	movs	r3, #10
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	8819      	ldrh	r1, [r3, #0]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	2300      	movs	r3, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	0023      	movs	r3, r4
 80013b2:	f000 fbb5 	bl	8001b20 <I2C_TransferConfig>
 80013b6:	e012      	b.n	80013de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013bc:	b29a      	uxth	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	049c      	lsls	r4, r3, #18
 80013cc:	230a      	movs	r3, #10
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	8819      	ldrh	r1, [r3, #0]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	2300      	movs	r3, #0
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	0023      	movs	r3, r4
 80013da:	f000 fba1 	bl	8001b20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d198      	bne.n	800131a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 fa5a 	bl	80018a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013f4:	1e03      	subs	r3, r0, #0
 80013f6:	d001      	beq.n	80013fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e01a      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2220      	movs	r2, #32
 8001402:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	490c      	ldr	r1, [pc, #48]	; (8001440 <HAL_I2C_Master_Transmit+0x20c>)
 8001410:	400a      	ands	r2, r1
 8001412:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2241      	movs	r2, #65	; 0x41
 8001418:	2120      	movs	r1, #32
 800141a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2242      	movs	r2, #66	; 0x42
 8001420:	2100      	movs	r1, #0
 8001422:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2240      	movs	r2, #64	; 0x40
 8001428:	2100      	movs	r1, #0
 800142a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	e000      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001430:	2302      	movs	r3, #2
  }
}
 8001432:	0018      	movs	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	b007      	add	sp, #28
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	80002000 	.word	0x80002000
 8001440:	fe00e800 	.word	0xfe00e800

08001444 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af02      	add	r7, sp, #8
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	000c      	movs	r4, r1
 800144e:	0010      	movs	r0, r2
 8001450:	0019      	movs	r1, r3
 8001452:	230a      	movs	r3, #10
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	1c22      	adds	r2, r4, #0
 8001458:	801a      	strh	r2, [r3, #0]
 800145a:	2308      	movs	r3, #8
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	1c02      	adds	r2, r0, #0
 8001460:	801a      	strh	r2, [r3, #0]
 8001462:	1dbb      	adds	r3, r7, #6
 8001464:	1c0a      	adds	r2, r1, #0
 8001466:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2241      	movs	r2, #65	; 0x41
 800146c:	5c9b      	ldrb	r3, [r3, r2]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b20      	cmp	r3, #32
 8001472:	d000      	beq.n	8001476 <HAL_I2C_Mem_Write+0x32>
 8001474:	e10c      	b.n	8001690 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <HAL_I2C_Mem_Write+0x42>
 800147c:	232c      	movs	r3, #44	; 0x2c
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0ff      	b.n	8001692 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	5c9b      	ldrb	r3, [r3, r2]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_I2C_Mem_Write+0x5c>
 800149c:	2302      	movs	r3, #2
 800149e:	e0f8      	b.n	8001692 <HAL_I2C_Mem_Write+0x24e>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	2101      	movs	r1, #1
 80014a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014a8:	f7ff fbb4 	bl	8000c14 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	0219      	lsls	r1, r3, #8
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2319      	movs	r3, #25
 80014bc:	2201      	movs	r2, #1
 80014be:	f000 f975 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0e3      	b.n	8001692 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2241      	movs	r2, #65	; 0x41
 80014ce:	2121      	movs	r1, #33	; 0x21
 80014d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2242      	movs	r2, #66	; 0x42
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	222c      	movs	r2, #44	; 0x2c
 80014ea:	18ba      	adds	r2, r7, r2
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014f6:	1dbb      	adds	r3, r7, #6
 80014f8:	881c      	ldrh	r4, [r3, #0]
 80014fa:	2308      	movs	r3, #8
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	230a      	movs	r3, #10
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	8819      	ldrh	r1, [r3, #0]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	0023      	movs	r3, r4
 8001512:	f000 f8c5 	bl	80016a0 <I2C_RequestMemoryWrite>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d005      	beq.n	8001526 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2240      	movs	r2, #64	; 0x40
 800151e:	2100      	movs	r1, #0
 8001520:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0b5      	b.n	8001692 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	2bff      	cmp	r3, #255	; 0xff
 800152e:	d911      	bls.n	8001554 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	22ff      	movs	r2, #255	; 0xff
 8001534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153a:	b2da      	uxtb	r2, r3
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	045c      	lsls	r4, r3, #17
 8001540:	230a      	movs	r3, #10
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	8819      	ldrh	r1, [r3, #0]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	2300      	movs	r3, #0
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	0023      	movs	r3, r4
 800154e:	f000 fae7 	bl	8001b20 <I2C_TransferConfig>
 8001552:	e012      	b.n	800157a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001558:	b29a      	uxth	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001562:	b2da      	uxtb	r2, r3
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	049c      	lsls	r4, r3, #18
 8001568:	230a      	movs	r3, #10
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	8819      	ldrh	r1, [r3, #0]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	2300      	movs	r3, #0
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	0023      	movs	r3, r4
 8001576:	f000 fad3 	bl	8001b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	0018      	movs	r0, r3
 8001582:	f000 f952 	bl	800182a <I2C_WaitOnTXISFlagUntilTimeout>
 8001586:	1e03      	subs	r3, r0, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e081      	b.n	8001692 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d03a      	beq.n	800163e <HAL_I2C_Mem_Write+0x1fa>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d136      	bne.n	800163e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	0013      	movs	r3, r2
 80015da:	2200      	movs	r2, #0
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	f000 f8e5 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 80015e2:	1e03      	subs	r3, r0, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e053      	b.n	8001692 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2bff      	cmp	r3, #255	; 0xff
 80015f2:	d911      	bls.n	8001618 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	22ff      	movs	r2, #255	; 0xff
 80015f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	045c      	lsls	r4, r3, #17
 8001604:	230a      	movs	r3, #10
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	8819      	ldrh	r1, [r3, #0]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	2300      	movs	r3, #0
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	0023      	movs	r3, r4
 8001612:	f000 fa85 	bl	8001b20 <I2C_TransferConfig>
 8001616:	e012      	b.n	800163e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001626:	b2da      	uxtb	r2, r3
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	049c      	lsls	r4, r3, #18
 800162c:	230a      	movs	r3, #10
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	8819      	ldrh	r1, [r3, #0]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	2300      	movs	r3, #0
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	0023      	movs	r3, r4
 800163a:	f000 fa71 	bl	8001b20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001642:	b29b      	uxth	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d198      	bne.n	800157a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	0018      	movs	r0, r3
 8001650:	f000 f92a 	bl	80018a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d001      	beq.n	800165c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e01a      	b.n	8001692 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2220      	movs	r2, #32
 8001662:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	490b      	ldr	r1, [pc, #44]	; (800169c <HAL_I2C_Mem_Write+0x258>)
 8001670:	400a      	ands	r2, r1
 8001672:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2241      	movs	r2, #65	; 0x41
 8001678:	2120      	movs	r1, #32
 800167a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2242      	movs	r2, #66	; 0x42
 8001680:	2100      	movs	r1, #0
 8001682:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2240      	movs	r2, #64	; 0x40
 8001688:	2100      	movs	r1, #0
 800168a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	e000      	b.n	8001692 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001690:	2302      	movs	r3, #2
  }
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b007      	add	sp, #28
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	fe00e800 	.word	0xfe00e800

080016a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	000c      	movs	r4, r1
 80016aa:	0010      	movs	r0, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	250a      	movs	r5, #10
 80016b0:	197b      	adds	r3, r7, r5
 80016b2:	1c22      	adds	r2, r4, #0
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	2308      	movs	r3, #8
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	1c02      	adds	r2, r0, #0
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	1dbb      	adds	r3, r7, #6
 80016c0:	1c0a      	adds	r2, r1, #0
 80016c2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80016c4:	1dbb      	adds	r3, r7, #6
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	045c      	lsls	r4, r3, #17
 80016ce:	197b      	adds	r3, r7, r5
 80016d0:	8819      	ldrh	r1, [r3, #0]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <I2C_RequestMemoryWrite+0xc4>)
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	0023      	movs	r3, r4
 80016da:	f000 fa21 	bl	8001b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e0:	6a39      	ldr	r1, [r7, #32]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 f8a0 	bl	800182a <I2C_WaitOnTXISFlagUntilTimeout>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d001      	beq.n	80016f2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e033      	b.n	800175a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016f2:	1dbb      	adds	r3, r7, #6
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d107      	bne.n	800170a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016fa:	2308      	movs	r3, #8
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
 8001708:	e019      	b.n	800173e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800170a:	2308      	movs	r3, #8
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	b29b      	uxth	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800171c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171e:	6a39      	ldr	r1, [r7, #32]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	0018      	movs	r0, r3
 8001724:	f000 f881 	bl	800182a <I2C_WaitOnTXISFlagUntilTimeout>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d001      	beq.n	8001730 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e014      	b.n	800175a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001730:	2308      	movs	r3, #8
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800173e:	6a3a      	ldr	r2, [r7, #32]
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	0013      	movs	r3, r2
 8001748:	2200      	movs	r2, #0
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	f000 f82e 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b004      	add	sp, #16
 8001760:	bdb0      	pop	{r4, r5, r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	80002000 	.word	0x80002000

08001768 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	2b02      	cmp	r3, #2
 800177c:	d103      	bne.n	8001786 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2200      	movs	r2, #0
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2201      	movs	r2, #1
 800178e:	4013      	ands	r3, r2
 8001790:	2b01      	cmp	r3, #1
 8001792:	d007      	beq.n	80017a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	430a      	orrs	r2, r1
 80017a2:	619a      	str	r2, [r3, #24]
  }
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}

080017ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017bc:	e021      	b.n	8001802 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	d01e      	beq.n	8001802 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c4:	f7ff fa26 	bl	8000c14 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d302      	bcc.n	80017da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d113      	bne.n	8001802 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	2220      	movs	r2, #32
 80017e0:	431a      	orrs	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2241      	movs	r2, #65	; 0x41
 80017ea:	2120      	movs	r1, #32
 80017ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2242      	movs	r2, #66	; 0x42
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2240      	movs	r2, #64	; 0x40
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	4013      	ands	r3, r2
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	425a      	negs	r2, r3
 8001812:	4153      	adcs	r3, r2
 8001814:	b2db      	uxtb	r3, r3
 8001816:	001a      	movs	r2, r3
 8001818:	1dfb      	adds	r3, r7, #7
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d0ce      	beq.n	80017be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bd80      	pop	{r7, pc}

0800182a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001836:	e02b      	b.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	68b9      	ldr	r1, [r7, #8]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	0018      	movs	r0, r3
 8001840:	f000 f86e 	bl	8001920 <I2C_IsErrorOccurred>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d001      	beq.n	800184c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e029      	b.n	80018a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	3301      	adds	r3, #1
 8001850:	d01e      	beq.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001852:	f7ff f9df 	bl	8000c14 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	429a      	cmp	r2, r3
 8001860:	d302      	bcc.n	8001868 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d113      	bne.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	2220      	movs	r2, #32
 800186e:	431a      	orrs	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2241      	movs	r2, #65	; 0x41
 8001878:	2120      	movs	r1, #32
 800187a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2242      	movs	r2, #66	; 0x42
 8001880:	2100      	movs	r1, #0
 8001882:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	2100      	movs	r1, #0
 800188a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e007      	b.n	80018a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2202      	movs	r2, #2
 8001898:	4013      	ands	r3, r2
 800189a:	2b02      	cmp	r3, #2
 800189c:	d1cc      	bne.n	8001838 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b004      	add	sp, #16
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018b4:	e028      	b.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	0018      	movs	r0, r3
 80018be:	f000 f82f 	bl	8001920 <I2C_IsErrorOccurred>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d001      	beq.n	80018ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e026      	b.n	8001918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ca:	f7ff f9a3 	bl	8000c14 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d302      	bcc.n	80018e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d113      	bne.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e4:	2220      	movs	r2, #32
 80018e6:	431a      	orrs	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2241      	movs	r2, #65	; 0x41
 80018f0:	2120      	movs	r1, #32
 80018f2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2242      	movs	r2, #66	; 0x42
 80018f8:	2100      	movs	r1, #0
 80018fa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2240      	movs	r2, #64	; 0x40
 8001900:	2100      	movs	r1, #0
 8001902:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e007      	b.n	8001918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2220      	movs	r2, #32
 8001910:	4013      	ands	r3, r2
 8001912:	2b20      	cmp	r3, #32
 8001914:	d1cf      	bne.n	80018b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}

08001920 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b08b      	sub	sp, #44	; 0x2c
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2327      	movs	r3, #39	; 0x27
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2210      	movs	r2, #16
 8001948:	4013      	ands	r3, r2
 800194a:	d100      	bne.n	800194e <I2C_IsErrorOccurred+0x2e>
 800194c:	e082      	b.n	8001a54 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2210      	movs	r2, #16
 8001954:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001956:	e060      	b.n	8001a1a <I2C_IsErrorOccurred+0xfa>
 8001958:	2427      	movs	r4, #39	; 0x27
 800195a:	193b      	adds	r3, r7, r4
 800195c:	193a      	adds	r2, r7, r4
 800195e:	7812      	ldrb	r2, [r2, #0]
 8001960:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3301      	adds	r3, #1
 8001966:	d058      	beq.n	8001a1a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001968:	f7ff f954 	bl	8000c14 <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	429a      	cmp	r2, r3
 8001976:	d306      	bcc.n	8001986 <I2C_IsErrorOccurred+0x66>
 8001978:	193b      	adds	r3, r7, r4
 800197a:	193a      	adds	r2, r7, r4
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d149      	bne.n	8001a1a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	01db      	lsls	r3, r3, #7
 8001990:	4013      	ands	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001994:	2013      	movs	r0, #19
 8001996:	183b      	adds	r3, r7, r0
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	2142      	movs	r1, #66	; 0x42
 800199c:	5c52      	ldrb	r2, [r2, r1]
 800199e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	401a      	ands	r2, r3
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d126      	bne.n	8001a02 <I2C_IsErrorOccurred+0xe2>
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	01db      	lsls	r3, r3, #7
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d021      	beq.n	8001a02 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80019be:	183b      	adds	r3, r7, r0
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d01d      	beq.n	8001a02 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	01c9      	lsls	r1, r1, #7
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80019d8:	f7ff f91c 	bl	8000c14 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e0:	e00f      	b.n	8001a02 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019e2:	f7ff f917 	bl	8000c14 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b19      	cmp	r3, #25
 80019ee:	d908      	bls.n	8001a02 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	2220      	movs	r2, #32
 80019f4:	4313      	orrs	r3, r2
 80019f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80019f8:	2327      	movs	r3, #39	; 0x27
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]

              break;
 8001a00:	e00b      	b.n	8001a1a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2127      	movs	r1, #39	; 0x27
 8001a0e:	187a      	adds	r2, r7, r1
 8001a10:	1879      	adds	r1, r7, r1
 8001a12:	7809      	ldrb	r1, [r1, #0]
 8001a14:	7011      	strb	r1, [r2, #0]
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d1e3      	bne.n	80019e2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2220      	movs	r2, #32
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d004      	beq.n	8001a32 <I2C_IsErrorOccurred+0x112>
 8001a28:	2327      	movs	r3, #39	; 0x27
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d092      	beq.n	8001958 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a32:	2327      	movs	r3, #39	; 0x27
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d103      	bne.n	8001a44 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2220      	movs	r2, #32
 8001a42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	2204      	movs	r2, #4
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a4c:	2327      	movs	r3, #39	; 0x27
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4013      	ands	r3, r2
 8001a64:	d00c      	beq.n	8001a80 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	0052      	lsls	r2, r2, #1
 8001a76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a78:	2327      	movs	r3, #39	; 0x27
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4013      	ands	r3, r2
 8001a88:	d00c      	beq.n	8001aa4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	00d2      	lsls	r2, r2, #3
 8001a9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a9c:	2327      	movs	r3, #39	; 0x27
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d00c      	beq.n	8001ac8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ac0:	2327      	movs	r3, #39	; 0x27
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001ac8:	2327      	movs	r3, #39	; 0x27
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d01d      	beq.n	8001b0e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff fe47 	bl	8001768 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	490d      	ldr	r1, [pc, #52]	; (8001b1c <I2C_IsErrorOccurred+0x1fc>)
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2241      	movs	r2, #65	; 0x41
 8001afa:	2120      	movs	r1, #32
 8001afc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2242      	movs	r2, #66	; 0x42
 8001b02:	2100      	movs	r1, #0
 8001b04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2240      	movs	r2, #64	; 0x40
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001b0e:	2327      	movs	r3, #39	; 0x27
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	781b      	ldrb	r3, [r3, #0]
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b00b      	add	sp, #44	; 0x2c
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	fe00e800 	.word	0xfe00e800

08001b20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	0008      	movs	r0, r1
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	240a      	movs	r4, #10
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	1c02      	adds	r2, r0, #0
 8001b34:	801a      	strh	r2, [r3, #0]
 8001b36:	2009      	movs	r0, #9
 8001b38:	183b      	adds	r3, r7, r0
 8001b3a:	1c0a      	adds	r2, r1, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b3e:	193b      	adds	r3, r7, r4
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	059b      	lsls	r3, r3, #22
 8001b44:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b46:	183b      	adds	r3, r7, r0
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	0419      	lsls	r1, r3, #16
 8001b4c:	23ff      	movs	r3, #255	; 0xff
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b52:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b6a:	0d51      	lsrs	r1, r2, #21
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	00d2      	lsls	r2, r2, #3
 8001b70:	400a      	ands	r2, r1
 8001b72:	4907      	ldr	r1, [pc, #28]	; (8001b90 <I2C_TransferConfig+0x70>)
 8001b74:	430a      	orrs	r2, r1
 8001b76:	43d2      	mvns	r2, r2
 8001b78:	401a      	ands	r2, r3
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b007      	add	sp, #28
 8001b8c:	bd90      	pop	{r4, r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	03ff63ff 	.word	0x03ff63ff

08001b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2241      	movs	r2, #65	; 0x41
 8001ba2:	5c9b      	ldrb	r3, [r3, r2]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b20      	cmp	r3, #32
 8001ba8:	d138      	bne.n	8001c1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2240      	movs	r2, #64	; 0x40
 8001bae:	5c9b      	ldrb	r3, [r3, r2]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e032      	b.n	8001c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2241      	movs	r2, #65	; 0x41
 8001bc4:	2124      	movs	r1, #36	; 0x24
 8001bc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	438a      	bics	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4911      	ldr	r1, [pc, #68]	; (8001c28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2101      	movs	r1, #1
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2241      	movs	r2, #65	; 0x41
 8001c0c:	2120      	movs	r1, #32
 8001c0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2240      	movs	r2, #64	; 0x40
 8001c14:	2100      	movs	r1, #0
 8001c16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c1c:	2302      	movs	r3, #2
  }
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b002      	add	sp, #8
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	ffffefff 	.word	0xffffefff

08001c2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2241      	movs	r2, #65	; 0x41
 8001c3a:	5c9b      	ldrb	r3, [r3, r2]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	d139      	bne.n	8001cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2240      	movs	r2, #64	; 0x40
 8001c46:	5c9b      	ldrb	r3, [r3, r2]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e033      	b.n	8001cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	2101      	movs	r1, #1
 8001c56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2241      	movs	r2, #65	; 0x41
 8001c5c:	2124      	movs	r1, #36	; 0x24
 8001c5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2241      	movs	r2, #65	; 0x41
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2240      	movs	r2, #64	; 0x40
 8001cae:	2100      	movs	r1, #0
 8001cb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cb6:	2302      	movs	r3, #2
  }
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b004      	add	sp, #16
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	fffff0ff 	.word	0xfffff0ff

08001cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d11f      	bne.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	0013      	movs	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	189b      	adds	r3, r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4912      	ldr	r1, [pc, #72]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7fe fa04 	bl	8000104 <__udivsi3>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	3301      	adds	r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d02:	e008      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e001      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e009      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	401a      	ands	r2, r3
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d0ed      	beq.n	8001d04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	40007000 	.word	0x40007000
 8001d38:	fffff9ff 	.word	0xfffff9ff
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	000f4240 	.word	0x000f4240

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e2fe      	b.n	8002354 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1e>
 8001d60:	e07c      	b.n	8001e5c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d62:	4bc3      	ldr	r3, [pc, #780]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2238      	movs	r2, #56	; 0x38
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d6c:	4bc0      	ldr	r3, [pc, #768]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2203      	movs	r2, #3
 8001d72:	4013      	ands	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3e>
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d002      	beq.n	8001d88 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d10b      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	4bb9      	ldr	r3, [pc, #740]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	d062      	beq.n	8001e5a <HAL_RCC_OscConfig+0x116>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d15e      	bne.n	8001e5a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e2d9      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_OscConfig+0x78>
 8001dac:	4bb0      	ldr	r3, [pc, #704]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4baf      	ldr	r3, [pc, #700]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	0249      	lsls	r1, r1, #9
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e020      	b.n	8001dfe <HAL_RCC_OscConfig+0xba>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	23a0      	movs	r3, #160	; 0xa0
 8001dc2:	02db      	lsls	r3, r3, #11
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d10e      	bne.n	8001de6 <HAL_RCC_OscConfig+0xa2>
 8001dc8:	4ba9      	ldr	r3, [pc, #676]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4ba8      	ldr	r3, [pc, #672]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	02c9      	lsls	r1, r1, #11
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	4ba6      	ldr	r3, [pc, #664]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4ba5      	ldr	r3, [pc, #660]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	0249      	lsls	r1, r1, #9
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0xba>
 8001de6:	4ba2      	ldr	r3, [pc, #648]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4ba1      	ldr	r3, [pc, #644]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001dec:	49a1      	ldr	r1, [pc, #644]	; (8002074 <HAL_RCC_OscConfig+0x330>)
 8001dee:	400a      	ands	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	4b9f      	ldr	r3, [pc, #636]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b9e      	ldr	r3, [pc, #632]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001df8:	499f      	ldr	r1, [pc, #636]	; (8002078 <HAL_RCC_OscConfig+0x334>)
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d014      	beq.n	8001e30 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7fe ff05 	bl	8000c14 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7fe ff00 	bl	8000c14 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e298      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e22:	4b93      	ldr	r3, [pc, #588]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	029b      	lsls	r3, r3, #10
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xcc>
 8001e2e:	e015      	b.n	8001e5c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe fef0 	bl	8000c14 <HAL_GetTick>
 8001e34:	0003      	movs	r3, r0
 8001e36:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3a:	f7fe feeb 	bl	8000c14 <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e283      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4c:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	4013      	ands	r3, r2
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0xf6>
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d100      	bne.n	8001e68 <HAL_RCC_OscConfig+0x124>
 8001e66:	e099      	b.n	8001f9c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e68:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2238      	movs	r2, #56	; 0x38
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e72:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2203      	movs	r2, #3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d102      	bne.n	8001e88 <HAL_RCC_OscConfig+0x144>
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d002      	beq.n	8001e8e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d135      	bne.n	8001efa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8e:	4b78      	ldr	r3, [pc, #480]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4013      	ands	r3, r2
 8001e98:	d005      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x162>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e256      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b72      	ldr	r3, [pc, #456]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a74      	ldr	r2, [pc, #464]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	021a      	lsls	r2, r3, #8
 8001eb6:	4b6e      	ldr	r3, [pc, #440]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d112      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ec2:	4b6b      	ldr	r3, [pc, #428]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6e      	ldr	r2, [pc, #440]	; (8002080 <HAL_RCC_OscConfig+0x33c>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ed6:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0adb      	lsrs	r3, r3, #11
 8001edc:	2207      	movs	r2, #7
 8001ede:	4013      	ands	r3, r2
 8001ee0:	4a68      	ldr	r2, [pc, #416]	; (8002084 <HAL_RCC_OscConfig+0x340>)
 8001ee2:	40da      	lsrs	r2, r3
 8001ee4:	4b68      	ldr	r3, [pc, #416]	; (8002088 <HAL_RCC_OscConfig+0x344>)
 8001ee6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_RCC_OscConfig+0x348>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7fe fe35 	bl	8000b5c <HAL_InitTick>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d051      	beq.n	8001f9a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e22c      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d030      	beq.n	8001f64 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f02:	4b5b      	ldr	r3, [pc, #364]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5e      	ldr	r2, [pc, #376]	; (8002080 <HAL_RCC_OscConfig+0x33c>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	4b57      	ldr	r3, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f16:	4b56      	ldr	r3, [pc, #344]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b55      	ldr	r3, [pc, #340]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0049      	lsls	r1, r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7fe fe76 	bl	8000c14 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7fe fe71 	bl	8000c14 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e209      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b48      	ldr	r3, [pc, #288]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a4a      	ldr	r2, [pc, #296]	; (800207c <HAL_RCC_OscConfig+0x338>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	021a      	lsls	r2, r3, #8
 8001f5c:	4b44      	ldr	r3, [pc, #272]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	e01b      	b.n	8001f9c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f64:	4b42      	ldr	r3, [pc, #264]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	4949      	ldr	r1, [pc, #292]	; (8002090 <HAL_RCC_OscConfig+0x34c>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7fe fe50 	bl	8000c14 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7fe fe4b 	bl	8000c14 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e1e3      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4013      	ands	r3, r2
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCC_OscConfig+0x236>
 8001f98:	e000      	b.n	8001f9c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f9a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d047      	beq.n	8002036 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fa6:	4b32      	ldr	r3, [pc, #200]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2238      	movs	r2, #56	; 0x38
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b18      	cmp	r3, #24
 8001fb0:	d10a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d03c      	beq.n	8002036 <HAL_RCC_OscConfig+0x2f2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d138      	bne.n	8002036 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e1c5      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d019      	beq.n	8002004 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fe1a 	bl	8000c14 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe6:	f7fe fe15 	bl	8000c14 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1ad      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	4013      	ands	r3, r2
 8002000:	d0f1      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x2a2>
 8002002:	e018      	b.n	8002036 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8002006:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 800200a:	2101      	movs	r1, #1
 800200c:	438a      	bics	r2, r1
 800200e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe fe00 	bl	8000c14 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201a:	f7fe fdfb 	bl	8000c14 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e193      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 800202e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d1f1      	bne.n	800201a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2204      	movs	r2, #4
 800203c:	4013      	ands	r3, r2
 800203e:	d100      	bne.n	8002042 <HAL_RCC_OscConfig+0x2fe>
 8002040:	e0c6      	b.n	80021d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002042:	231f      	movs	r3, #31
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2238      	movs	r2, #56	; 0x38
 8002050:	4013      	ands	r3, r2
 8002052:	2b20      	cmp	r3, #32
 8002054:	d11e      	bne.n	8002094 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_OscConfig+0x32c>)
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d100      	bne.n	8002062 <HAL_RCC_OscConfig+0x31e>
 8002060:	e0b6      	b.n	80021d0 <HAL_RCC_OscConfig+0x48c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d000      	beq.n	800206c <HAL_RCC_OscConfig+0x328>
 800206a:	e0b1      	b.n	80021d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e171      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
 8002070:	40021000 	.word	0x40021000
 8002074:	fffeffff 	.word	0xfffeffff
 8002078:	fffbffff 	.word	0xfffbffff
 800207c:	ffff80ff 	.word	0xffff80ff
 8002080:	ffffc7ff 	.word	0xffffc7ff
 8002084:	00f42400 	.word	0x00f42400
 8002088:	20000000 	.word	0x20000000
 800208c:	20000010 	.word	0x20000010
 8002090:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002094:	4bb1      	ldr	r3, [pc, #708]	; (800235c <HAL_RCC_OscConfig+0x618>)
 8002096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	055b      	lsls	r3, r3, #21
 800209c:	4013      	ands	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_OscConfig+0x360>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x362>
 80020a4:	2300      	movs	r3, #0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d011      	beq.n	80020ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4bac      	ldr	r3, [pc, #688]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80020ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ae:	4bab      	ldr	r3, [pc, #684]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0549      	lsls	r1, r1, #21
 80020b4:	430a      	orrs	r2, r1
 80020b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80020b8:	4ba8      	ldr	r3, [pc, #672]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80020ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	055b      	lsls	r3, r3, #21
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80020c6:	231f      	movs	r3, #31
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ce:	4ba4      	ldr	r3, [pc, #656]	; (8002360 <HAL_RCC_OscConfig+0x61c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d11a      	bne.n	8002110 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020da:	4ba1      	ldr	r3, [pc, #644]	; (8002360 <HAL_RCC_OscConfig+0x61c>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4ba0      	ldr	r3, [pc, #640]	; (8002360 <HAL_RCC_OscConfig+0x61c>)
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	0049      	lsls	r1, r1, #1
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fd94 	bl	8000c14 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7fe fd8f 	bl	8000c14 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e127      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002104:	4b96      	ldr	r3, [pc, #600]	; (8002360 <HAL_RCC_OscConfig+0x61c>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4013      	ands	r3, r2
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x3e2>
 8002118:	4b90      	ldr	r3, [pc, #576]	; (800235c <HAL_RCC_OscConfig+0x618>)
 800211a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800211c:	4b8f      	ldr	r3, [pc, #572]	; (800235c <HAL_RCC_OscConfig+0x618>)
 800211e:	2101      	movs	r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	65da      	str	r2, [r3, #92]	; 0x5c
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x41c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b05      	cmp	r3, #5
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x404>
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <HAL_RCC_OscConfig+0x618>)
 8002130:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002132:	4b8a      	ldr	r3, [pc, #552]	; (800235c <HAL_RCC_OscConfig+0x618>)
 8002134:	2104      	movs	r1, #4
 8002136:	430a      	orrs	r2, r1
 8002138:	65da      	str	r2, [r3, #92]	; 0x5c
 800213a:	4b88      	ldr	r3, [pc, #544]	; (800235c <HAL_RCC_OscConfig+0x618>)
 800213c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800213e:	4b87      	ldr	r3, [pc, #540]	; (800235c <HAL_RCC_OscConfig+0x618>)
 8002140:	2101      	movs	r1, #1
 8002142:	430a      	orrs	r2, r1
 8002144:	65da      	str	r2, [r3, #92]	; 0x5c
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0x41c>
 8002148:	4b84      	ldr	r3, [pc, #528]	; (800235c <HAL_RCC_OscConfig+0x618>)
 800214a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800214c:	4b83      	ldr	r3, [pc, #524]	; (800235c <HAL_RCC_OscConfig+0x618>)
 800214e:	2101      	movs	r1, #1
 8002150:	438a      	bics	r2, r1
 8002152:	65da      	str	r2, [r3, #92]	; 0x5c
 8002154:	4b81      	ldr	r3, [pc, #516]	; (800235c <HAL_RCC_OscConfig+0x618>)
 8002156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002158:	4b80      	ldr	r3, [pc, #512]	; (800235c <HAL_RCC_OscConfig+0x618>)
 800215a:	2104      	movs	r1, #4
 800215c:	438a      	bics	r2, r1
 800215e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d014      	beq.n	8002192 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7fe fd54 	bl	8000c14 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002170:	e009      	b.n	8002186 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe fd4f 	bl	8000c14 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	4a79      	ldr	r2, [pc, #484]	; (8002364 <HAL_RCC_OscConfig+0x620>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0e6      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002186:	4b75      	ldr	r3, [pc, #468]	; (800235c <HAL_RCC_OscConfig+0x618>)
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x42e>
 8002190:	e013      	b.n	80021ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7fe fd3f 	bl	8000c14 <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800219a:	e009      	b.n	80021b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7fe fd3a 	bl	8000c14 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	4a6f      	ldr	r2, [pc, #444]	; (8002364 <HAL_RCC_OscConfig+0x620>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0d1      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b0:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021ba:	231f      	movs	r3, #31
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021c4:	4b65      	ldr	r3, [pc, #404]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80021c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c8:	4b64      	ldr	r3, [pc, #400]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80021ca:	4967      	ldr	r1, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x624>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d100      	bne.n	80021da <HAL_RCC_OscConfig+0x496>
 80021d8:	e0bb      	b.n	8002352 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021da:	4b60      	ldr	r3, [pc, #384]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2238      	movs	r2, #56	; 0x38
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d100      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4a4>
 80021e6:	e07b      	b.n	80022e0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d156      	bne.n	800229e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f0:	4b5a      	ldr	r3, [pc, #360]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b59      	ldr	r3, [pc, #356]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80021f6:	495d      	ldr	r1, [pc, #372]	; (800236c <HAL_RCC_OscConfig+0x628>)
 80021f8:	400a      	ands	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fd0a 	bl	8000c14 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fd05 	bl	8000c14 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e09d      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_RCC_OscConfig+0x618>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	049b      	lsls	r3, r3, #18
 8002220:	4013      	ands	r3, r2
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002224:	4b4d      	ldr	r3, [pc, #308]	; (800235c <HAL_RCC_OscConfig+0x618>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a51      	ldr	r2, [pc, #324]	; (8002370 <HAL_RCC_OscConfig+0x62c>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	431a      	orrs	r2, r3
 8002252:	4b42      	ldr	r3, [pc, #264]	; (800235c <HAL_RCC_OscConfig+0x618>)
 8002254:	430a      	orrs	r2, r1
 8002256:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b40      	ldr	r3, [pc, #256]	; (800235c <HAL_RCC_OscConfig+0x618>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b3f      	ldr	r3, [pc, #252]	; (800235c <HAL_RCC_OscConfig+0x618>)
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	0449      	lsls	r1, r1, #17
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <HAL_RCC_OscConfig+0x618>)
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <HAL_RCC_OscConfig+0x618>)
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	0549      	lsls	r1, r1, #21
 8002270:	430a      	orrs	r2, r1
 8002272:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe fcce 	bl	8000c14 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7fe fcc9 	bl	8000c14 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e061      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002290:	4b32      	ldr	r3, [pc, #200]	; (800235c <HAL_RCC_OscConfig+0x618>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	049b      	lsls	r3, r3, #18
 8002298:	4013      	ands	r3, r2
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x53a>
 800229c:	e059      	b.n	8002352 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80022a4:	4931      	ldr	r1, [pc, #196]	; (800236c <HAL_RCC_OscConfig+0x628>)
 80022a6:	400a      	ands	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7fe fcb3 	bl	8000c14 <HAL_GetTick>
 80022ae:	0003      	movs	r3, r0
 80022b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe fcae 	bl	8000c14 <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e046      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	049b      	lsls	r3, r3, #18
 80022ce:	4013      	ands	r3, r2
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4b21      	ldr	r3, [pc, #132]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80022d8:	4926      	ldr	r1, [pc, #152]	; (8002374 <HAL_RCC_OscConfig+0x630>)
 80022da:	400a      	ands	r2, r1
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	e038      	b.n	8002352 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e033      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x618>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2203      	movs	r2, #3
 80022f6:	401a      	ands	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d126      	bne.n	800234e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2270      	movs	r2, #112	; 0x70
 8002304:	401a      	ands	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d11f      	bne.n	800234e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	23fe      	movs	r3, #254	; 0xfe
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	401a      	ands	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d116      	bne.n	800234e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	23f8      	movs	r3, #248	; 0xf8
 8002324:	039b      	lsls	r3, r3, #14
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d10e      	bne.n	800234e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	23e0      	movs	r3, #224	; 0xe0
 8002334:	051b      	lsls	r3, r3, #20
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	0f5b      	lsrs	r3, r3, #29
 8002344:	075a      	lsls	r2, r3, #29
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b008      	add	sp, #32
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	00001388 	.word	0x00001388
 8002368:	efffffff 	.word	0xefffffff
 800236c:	feffffff 	.word	0xfeffffff
 8002370:	11c1808c 	.word	0x11c1808c
 8002374:	eefefffc 	.word	0xeefefffc

08002378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0e9      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b76      	ldr	r3, [pc, #472]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2207      	movs	r2, #7
 8002392:	4013      	ands	r3, r2
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d91e      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b73      	ldr	r3, [pc, #460]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2207      	movs	r2, #7
 80023a0:	4393      	bics	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	4b70      	ldr	r3, [pc, #448]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023ac:	f7fe fc32 	bl	8000c14 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023b4:	e009      	b.n	80023ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b6:	f7fe fc2d 	bl	8000c14 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	4a6a      	ldr	r2, [pc, #424]	; (800256c <HAL_RCC_ClockConfig+0x1f4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0ca      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023ca:	4b67      	ldr	r3, [pc, #412]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2207      	movs	r2, #7
 80023d0:	4013      	ands	r3, r2
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1ee      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2202      	movs	r2, #2
 80023de:	4013      	ands	r3, r2
 80023e0:	d015      	beq.n	800240e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2204      	movs	r2, #4
 80023e8:	4013      	ands	r3, r2
 80023ea:	d006      	beq.n	80023fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023ec:	4b60      	ldr	r3, [pc, #384]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 80023f2:	21e0      	movs	r1, #224	; 0xe0
 80023f4:	01c9      	lsls	r1, r1, #7
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4a5d      	ldr	r2, [pc, #372]	; (8002574 <HAL_RCC_ClockConfig+0x1fc>)
 8002400:	4013      	ands	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	4b59      	ldr	r3, [pc, #356]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 800240a:	430a      	orrs	r2, r1
 800240c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	d057      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	029b      	lsls	r3, r3, #10
 8002428:	4013      	ands	r3, r2
 800242a:	d12b      	bne.n	8002484 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e097      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002438:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	049b      	lsls	r3, r3, #18
 8002440:	4013      	ands	r3, r2
 8002442:	d11f      	bne.n	8002484 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e08b      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002450:	4b47      	ldr	r3, [pc, #284]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4013      	ands	r3, r2
 800245a:	d113      	bne.n	8002484 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e07f      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d106      	bne.n	8002476 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002468:	4b41      	ldr	r3, [pc, #260]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	2202      	movs	r2, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d108      	bne.n	8002484 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e074      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e06d      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002484:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2207      	movs	r2, #7
 800248a:	4393      	bics	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7fe fbbc 	bl	8000c14 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a0:	e009      	b.n	80024b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a2:	f7fe fbb7 	bl	8000c14 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4a2f      	ldr	r2, [pc, #188]	; (800256c <HAL_RCC_ClockConfig+0x1f4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e054      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2238      	movs	r2, #56	; 0x38
 80024bc:	401a      	ands	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1ec      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2207      	movs	r2, #7
 80024ce:	4013      	ands	r3, r2
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d21e      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2207      	movs	r2, #7
 80024dc:	4393      	bics	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fb94 	bl	8000c14 <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024f0:	e009      	b.n	8002506 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f2:	f7fe fb8f 	bl	8000c14 <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_RCC_ClockConfig+0x1f4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e02c      	b.n	8002560 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2207      	movs	r2, #7
 800250c:	4013      	ands	r3, r2
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d1ee      	bne.n	80024f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2204      	movs	r2, #4
 800251a:	4013      	ands	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4a15      	ldr	r2, [pc, #84]	; (8002578 <HAL_RCC_ClockConfig+0x200>)
 8002524:	4013      	ands	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002532:	f000 f829 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002536:	0001      	movs	r1, r0
 8002538:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	220f      	movs	r2, #15
 8002540:	401a      	ands	r2, r3
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_RCC_ClockConfig+0x204>)
 8002544:	0092      	lsls	r2, r2, #2
 8002546:	58d3      	ldr	r3, [r2, r3]
 8002548:	221f      	movs	r2, #31
 800254a:	4013      	ands	r3, r2
 800254c:	000a      	movs	r2, r1
 800254e:	40da      	lsrs	r2, r3
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_ClockConfig+0x208>)
 8002552:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCC_ClockConfig+0x20c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0018      	movs	r0, r3
 800255a:	f7fe faff 	bl	8000b5c <HAL_InitTick>
 800255e:	0003      	movs	r3, r0
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b004      	add	sp, #16
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40022000 	.word	0x40022000
 800256c:	00001388 	.word	0x00001388
 8002570:	40021000 	.word	0x40021000
 8002574:	fffff0ff 	.word	0xfffff0ff
 8002578:	ffff8fff 	.word	0xffff8fff
 800257c:	08002a94 	.word	0x08002a94
 8002580:	20000000 	.word	0x20000000
 8002584:	20000010 	.word	0x20000010

08002588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2238      	movs	r2, #56	; 0x38
 8002594:	4013      	ands	r3, r2
 8002596:	d10f      	bne.n	80025b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0adb      	lsrs	r3, r3, #11
 800259e:	2207      	movs	r2, #7
 80025a0:	4013      	ands	r3, r2
 80025a2:	2201      	movs	r2, #1
 80025a4:	409a      	lsls	r2, r3
 80025a6:	0013      	movs	r3, r2
 80025a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025aa:	6839      	ldr	r1, [r7, #0]
 80025ac:	4835      	ldr	r0, [pc, #212]	; (8002684 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025ae:	f7fd fda9 	bl	8000104 <__udivsi3>
 80025b2:	0003      	movs	r3, r0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	e05d      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2238      	movs	r2, #56	; 0x38
 80025be:	4013      	ands	r3, r2
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d102      	bne.n	80025ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_RCC_GetSysClockFreq+0x100>)
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	e054      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2238      	movs	r2, #56	; 0x38
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d138      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025d6:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2203      	movs	r2, #3
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	2207      	movs	r2, #7
 80025e8:	4013      	ands	r3, r2
 80025ea:	3301      	adds	r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d10d      	bne.n	8002610 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	4824      	ldr	r0, [pc, #144]	; (8002688 <HAL_RCC_GetSysClockFreq+0x100>)
 80025f8:	f7fd fd84 	bl	8000104 <__udivsi3>
 80025fc:	0003      	movs	r3, r0
 80025fe:	0019      	movs	r1, r3
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	227f      	movs	r2, #127	; 0x7f
 8002608:	4013      	ands	r3, r2
 800260a:	434b      	muls	r3, r1
 800260c:	617b      	str	r3, [r7, #20]
        break;
 800260e:	e00d      	b.n	800262c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	481c      	ldr	r0, [pc, #112]	; (8002684 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002614:	f7fd fd76 	bl	8000104 <__udivsi3>
 8002618:	0003      	movs	r3, r0
 800261a:	0019      	movs	r1, r3
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	227f      	movs	r2, #127	; 0x7f
 8002624:	4013      	ands	r3, r2
 8002626:	434b      	muls	r3, r1
 8002628:	617b      	str	r3, [r7, #20]
        break;
 800262a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0f5b      	lsrs	r3, r3, #29
 8002632:	2207      	movs	r2, #7
 8002634:	4013      	ands	r3, r2
 8002636:	3301      	adds	r3, #1
 8002638:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	6978      	ldr	r0, [r7, #20]
 800263e:	f7fd fd61 	bl	8000104 <__udivsi3>
 8002642:	0003      	movs	r3, r0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	e015      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2238      	movs	r2, #56	; 0x38
 800264e:	4013      	ands	r3, r2
 8002650:	2b20      	cmp	r3, #32
 8002652:	d103      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_RCC_GetSysClockFreq+0xf8>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2238      	movs	r2, #56	; 0x38
 8002662:	4013      	ands	r3, r2
 8002664:	2b18      	cmp	r3, #24
 8002666:	d103      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002668:	23fa      	movs	r3, #250	; 0xfa
 800266a:	01db      	lsls	r3, r3, #7
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	e001      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002674:	693b      	ldr	r3, [r7, #16]
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b006      	add	sp, #24
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	40021000 	.word	0x40021000
 8002684:	00f42400 	.word	0x00f42400
 8002688:	007a1200 	.word	0x007a1200

0800268c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002694:	2313      	movs	r3, #19
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800269c:	2312      	movs	r3, #18
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	029b      	lsls	r3, r3, #10
 80026ac:	4013      	ands	r3, r2
 80026ae:	d100      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80026b0:	e0a3      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b2:	2011      	movs	r0, #17
 80026b4:	183b      	adds	r3, r7, r0
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4bc3      	ldr	r3, [pc, #780]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	055b      	lsls	r3, r3, #21
 80026c2:	4013      	ands	r3, r2
 80026c4:	d110      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	4bc0      	ldr	r3, [pc, #768]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ca:	4bbf      	ldr	r3, [pc, #764]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	0549      	lsls	r1, r1, #21
 80026d0:	430a      	orrs	r2, r1
 80026d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80026d4:	4bbc      	ldr	r3, [pc, #752]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	055b      	lsls	r3, r3, #21
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e2:	183b      	adds	r3, r7, r0
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026e8:	4bb8      	ldr	r3, [pc, #736]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4bb7      	ldr	r3, [pc, #732]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	0049      	lsls	r1, r1, #1
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026f6:	f7fe fa8d 	bl	8000c14 <HAL_GetTick>
 80026fa:	0003      	movs	r3, r0
 80026fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026fe:	e00b      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002700:	f7fe fa88 	bl	8000c14 <HAL_GetTick>
 8002704:	0002      	movs	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d904      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800270e:	2313      	movs	r3, #19
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2203      	movs	r2, #3
 8002714:	701a      	strb	r2, [r3, #0]
        break;
 8002716:	e005      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002718:	4bac      	ldr	r3, [pc, #688]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4013      	ands	r3, r2
 8002722:	d0ed      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002724:	2313      	movs	r3, #19
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d154      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800272e:	4ba6      	ldr	r3, [pc, #664]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002730:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002732:	23c0      	movs	r3, #192	; 0xc0
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4013      	ands	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d019      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	429a      	cmp	r2, r3
 8002748:	d014      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800274a:	4b9f      	ldr	r3, [pc, #636]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	4aa0      	ldr	r2, [pc, #640]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002750:	4013      	ands	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002754:	4b9c      	ldr	r3, [pc, #624]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002756:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002758:	4b9b      	ldr	r3, [pc, #620]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800275a:	2180      	movs	r1, #128	; 0x80
 800275c:	0249      	lsls	r1, r1, #9
 800275e:	430a      	orrs	r2, r1
 8002760:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002762:	4b99      	ldr	r3, [pc, #612]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002766:	4b98      	ldr	r3, [pc, #608]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002768:	499a      	ldr	r1, [pc, #616]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800276a:	400a      	ands	r2, r1
 800276c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800276e:	4b96      	ldr	r3, [pc, #600]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2201      	movs	r2, #1
 8002778:	4013      	ands	r3, r2
 800277a:	d016      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fa4a 	bl	8000c14 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002784:	e00c      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe fa45 	bl	8000c14 <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	4a91      	ldr	r2, [pc, #580]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d904      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002796:	2313      	movs	r3, #19
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2203      	movs	r2, #3
 800279c:	701a      	strb	r2, [r3, #0]
            break;
 800279e:	e004      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a0:	4b89      	ldr	r3, [pc, #548]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	2202      	movs	r2, #2
 80027a6:	4013      	ands	r3, r2
 80027a8:	d0ed      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80027aa:	2313      	movs	r3, #19
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10a      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b4:	4b84      	ldr	r3, [pc, #528]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	4a85      	ldr	r2, [pc, #532]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c2:	4b81      	ldr	r3, [pc, #516]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80027c8:	e00c      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027ca:	2312      	movs	r3, #18
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2213      	movs	r2, #19
 80027d0:	18ba      	adds	r2, r7, r2
 80027d2:	7812      	ldrb	r2, [r2, #0]
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e005      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d8:	2312      	movs	r3, #18
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	2213      	movs	r2, #19
 80027de:	18ba      	adds	r2, r7, r2
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027e4:	2311      	movs	r3, #17
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d105      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f2:	4b75      	ldr	r3, [pc, #468]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027f4:	4979      	ldr	r1, [pc, #484]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80027f6:	400a      	ands	r2, r1
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	4013      	ands	r3, r2
 8002802:	d009      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002804:	4b70      	ldr	r3, [pc, #448]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	2203      	movs	r2, #3
 800280a:	4393      	bics	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4b6d      	ldr	r3, [pc, #436]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002814:	430a      	orrs	r2, r1
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2202      	movs	r2, #2
 800281e:	4013      	ands	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002822:	4b69      	ldr	r3, [pc, #420]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	220c      	movs	r2, #12
 8002828:	4393      	bics	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002832:	430a      	orrs	r2, r1
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2210      	movs	r2, #16
 800283c:	4013      	ands	r3, r2
 800283e:	d009      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002840:	4b61      	ldr	r3, [pc, #388]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	4a66      	ldr	r2, [pc, #408]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	4b5e      	ldr	r3, [pc, #376]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002850:	430a      	orrs	r2, r1
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002860:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	4a5f      	ldr	r2, [pc, #380]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002870:	430a      	orrs	r2, r1
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4013      	ands	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002880:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002886:	4013      	ands	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	4b4e      	ldr	r3, [pc, #312]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002890:	430a      	orrs	r2, r1
 8002892:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2220      	movs	r2, #32
 800289a:	4013      	ands	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800289e:	4b4a      	ldr	r3, [pc, #296]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	4a52      	ldr	r2, [pc, #328]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ae:	430a      	orrs	r2, r1
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	01db      	lsls	r3, r3, #7
 80028ba:	4013      	ands	r3, r2
 80028bc:	d015      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028be:	4b42      	ldr	r3, [pc, #264]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	0899      	lsrs	r1, r3, #2
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1a      	ldr	r2, [r3, #32]
 80028ca:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1a      	ldr	r2, [r3, #32]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	05db      	lsls	r3, r3, #23
 80028d8:	429a      	cmp	r2, r3
 80028da:	d106      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	0249      	lsls	r1, r1, #9
 80028e6:	430a      	orrs	r2, r1
 80028e8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	031b      	lsls	r3, r3, #12
 80028f2:	4013      	ands	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028f6:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	4393      	bics	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002904:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002906:	430a      	orrs	r2, r1
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	039b      	lsls	r3, r3, #14
 8002912:	4013      	ands	r3, r2
 8002914:	d016      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002916:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	4a35      	ldr	r2, [pc, #212]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800291c:	4013      	ands	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002926:	430a      	orrs	r2, r1
 8002928:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	03db      	lsls	r3, r3, #15
 8002932:	429a      	cmp	r2, r3
 8002934:	d106      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	0449      	lsls	r1, r1, #17
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	03db      	lsls	r3, r3, #15
 800294c:	4013      	ands	r3, r2
 800294e:	d016      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002956:	4013      	ands	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002960:	430a      	orrs	r2, r1
 8002962:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	045b      	lsls	r3, r3, #17
 800296c:	429a      	cmp	r2, r3
 800296e:	d106      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	0449      	lsls	r1, r1, #17
 800297a:	430a      	orrs	r2, r1
 800297c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	4013      	ands	r3, r2
 8002988:	d016      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	4a1a      	ldr	r2, [pc, #104]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002990:	4013      	ands	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800299a:	430a      	orrs	r2, r1
 800299c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	01db      	lsls	r3, r3, #7
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d106      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	0249      	lsls	r1, r1, #9
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80029b8:	2312      	movs	r3, #18
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	781b      	ldrb	r3, [r3, #0]
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b006      	add	sp, #24
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40007000 	.word	0x40007000
 80029d0:	fffffcff 	.word	0xfffffcff
 80029d4:	fffeffff 	.word	0xfffeffff
 80029d8:	00001388 	.word	0x00001388
 80029dc:	efffffff 	.word	0xefffffff
 80029e0:	fffff3ff 	.word	0xfffff3ff
 80029e4:	fff3ffff 	.word	0xfff3ffff
 80029e8:	ffcfffff 	.word	0xffcfffff
 80029ec:	ffffcfff 	.word	0xffffcfff
 80029f0:	ffbfffff 	.word	0xffbfffff
 80029f4:	feffffff 	.word	0xfeffffff
 80029f8:	ffff3fff 	.word	0xffff3fff

080029fc <main>:




int main(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  hwInit();
 8002a00:	f7fe f87f 	bl	8000b02 <hwInit>
  apInit();
 8002a04:	f7fd fc0a 	bl	800021c <apInit>

  apMain();
 8002a08:	f7fd fc12 	bl	8000230 <apMain>

  return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <__libc_init_array>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	2600      	movs	r6, #0
 8002a18:	4d0c      	ldr	r5, [pc, #48]	; (8002a4c <__libc_init_array+0x38>)
 8002a1a:	4c0d      	ldr	r4, [pc, #52]	; (8002a50 <__libc_init_array+0x3c>)
 8002a1c:	1b64      	subs	r4, r4, r5
 8002a1e:	10a4      	asrs	r4, r4, #2
 8002a20:	42a6      	cmp	r6, r4
 8002a22:	d109      	bne.n	8002a38 <__libc_init_array+0x24>
 8002a24:	2600      	movs	r6, #0
 8002a26:	f000 f821 	bl	8002a6c <_init>
 8002a2a:	4d0a      	ldr	r5, [pc, #40]	; (8002a54 <__libc_init_array+0x40>)
 8002a2c:	4c0a      	ldr	r4, [pc, #40]	; (8002a58 <__libc_init_array+0x44>)
 8002a2e:	1b64      	subs	r4, r4, r5
 8002a30:	10a4      	asrs	r4, r4, #2
 8002a32:	42a6      	cmp	r6, r4
 8002a34:	d105      	bne.n	8002a42 <__libc_init_array+0x2e>
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
 8002a38:	00b3      	lsls	r3, r6, #2
 8002a3a:	58eb      	ldr	r3, [r5, r3]
 8002a3c:	4798      	blx	r3
 8002a3e:	3601      	adds	r6, #1
 8002a40:	e7ee      	b.n	8002a20 <__libc_init_array+0xc>
 8002a42:	00b3      	lsls	r3, r6, #2
 8002a44:	58eb      	ldr	r3, [r5, r3]
 8002a46:	4798      	blx	r3
 8002a48:	3601      	adds	r6, #1
 8002a4a:	e7f2      	b.n	8002a32 <__libc_init_array+0x1e>
 8002a4c:	080033d4 	.word	0x080033d4
 8002a50:	080033d4 	.word	0x080033d4
 8002a54:	080033d4 	.word	0x080033d4
 8002a58:	080033d8 	.word	0x080033d8

08002a5c <memset>:
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	1882      	adds	r2, r0, r2
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d100      	bne.n	8002a66 <memset+0xa>
 8002a64:	4770      	bx	lr
 8002a66:	7019      	strb	r1, [r3, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	e7f9      	b.n	8002a60 <memset+0x4>

08002a6c <_init>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a72:	bc08      	pop	{r3}
 8002a74:	469e      	mov	lr, r3
 8002a76:	4770      	bx	lr

08002a78 <_fini>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	469e      	mov	lr, r3
 8002a82:	4770      	bx	lr
