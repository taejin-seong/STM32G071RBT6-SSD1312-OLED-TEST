
stm32g071_oled_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001554  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001610  08001610  00011610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016a0  080016a0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080016a0  080016a0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016a0  080016a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016a0  080016a0  000116a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016a4  080016a4  000116a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080016a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080016ac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080016ac  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004643  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000111f  00000000  00000000  0002466f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  00025790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000568  00000000  00000000  00025db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f59  00000000  00000000  00026318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000050ec  00000000  00000000  00037271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d617  00000000  00000000  0003c35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00099974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000142c  00000000  00000000  000999c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080015f8 	.word	0x080015f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	080015f8 	.word	0x080015f8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <LL_IOP_GRP1_EnableClock+0x28>)
 8000226:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <LL_IOP_GRP1_EnableClock+0x28>)
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	430a      	orrs	r2, r1
 800022e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <LL_IOP_GRP1_EnableClock+0x28>)
 8000232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4013      	ands	r3, r2
 8000238:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800023a:	68fb      	ldr	r3, [r7, #12]
}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	b004      	add	sp, #16
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40021000 	.word	0x40021000

08000248 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	683a      	ldr	r2, [r7, #0]
 8000256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b002      	add	sp, #8
 800025e:	bd80      	pop	{r7, pc}

08000260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	003b      	movs	r3, r7
 8000268:	0018      	movs	r0, r3
 800026a:	2318      	movs	r3, #24
 800026c:	001a      	movs	r2, r3
 800026e:	2100      	movs	r1, #0
 8000270:	f001 f9ba 	bl	80015e8 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000274:	2001      	movs	r0, #1
 8000276:	f7ff ffd1 	bl	800021c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(USER_LED_GPIO_Port, USER_LED_Pin);
 800027a:	23a0      	movs	r3, #160	; 0xa0
 800027c:	05db      	lsls	r3, r3, #23
 800027e:	2120      	movs	r1, #32
 8000280:	0018      	movs	r0, r3
 8000282:	f7ff ffe1 	bl	8000248 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000286:	003b      	movs	r3, r7
 8000288:	2220      	movs	r2, #32
 800028a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800028c:	003b      	movs	r3, r7
 800028e:	2201      	movs	r2, #1
 8000290:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000292:	003b      	movs	r3, r7
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000298:	003b      	movs	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800029e:	003b      	movs	r3, r7
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80002a4:	003a      	movs	r2, r7
 80002a6:	23a0      	movs	r3, #160	; 0xa0
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	0011      	movs	r1, r2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fd05 	bl	8000cbc <LL_GPIO_Init>

}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b006      	add	sp, #24
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <LL_I2C_EnableClockStretching+0x1c>)
 80002ca:	401a      	ands	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	601a      	str	r2, [r3, #0]
}
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b002      	add	sp, #8
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	fffdffff 	.word	0xfffdffff

080002dc <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a03      	ldr	r2, [pc, #12]	; (80002f8 <LL_I2C_DisableGeneralCall+0x1c>)
 80002ea:	401a      	ands	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	601a      	str	r2, [r3, #0]
}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b002      	add	sp, #8
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	fff7ffff 	.word	0xfff7ffff

080002fc <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a05      	ldr	r2, [pc, #20]	; (8000324 <LL_I2C_SetOwnAddress2+0x28>)
 800030e:	401a      	ands	r2, r3
 8000310:	68b9      	ldr	r1, [r7, #8]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	430b      	orrs	r3, r1
 8000316:	431a      	orrs	r2, r3
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	60da      	str	r2, [r3, #12]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b004      	add	sp, #16
 8000322:	bd80      	pop	{r7, pc}
 8000324:	fffff801 	.word	0xfffff801

08000328 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	4a03      	ldr	r2, [pc, #12]	; (8000344 <LL_I2C_DisableOwnAddress2+0x1c>)
 8000336:	401a      	ands	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	60da      	str	r2, [r3, #12]
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}
 8000344:	ffff7fff 	.word	0xffff7fff

08000348 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	0492      	lsls	r2, r2, #18
 8000358:	431a      	orrs	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	605a      	str	r2, [r3, #4]
}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	b002      	add	sp, #8
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <LL_APB1_GRP1_EnableClock>:
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <LL_APB1_GRP1_EnableClock+0x28>)
 8000372:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <LL_APB1_GRP1_EnableClock+0x28>)
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	430a      	orrs	r2, r1
 800037a:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <LL_APB1_GRP1_EnableClock+0x28>)
 800037e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	4013      	ands	r3, r2
 8000384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000386:	68fb      	ldr	r3, [r7, #12]
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b004      	add	sp, #16
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000

08000394 <LL_IOP_GRP1_EnableClock>:
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <LL_IOP_GRP1_EnableClock+0x28>)
 800039e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <LL_IOP_GRP1_EnableClock+0x28>)
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <LL_IOP_GRP1_EnableClock+0x28>)
 80003aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	4013      	ands	r3, r2
 80003b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003b2:	68fb      	ldr	r3, [r7, #12]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b004      	add	sp, #16
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000

080003c0 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003c0:	b590      	push	{r4, r7, lr}
 80003c2:	b08f      	sub	sp, #60	; 0x3c
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80003c6:	241c      	movs	r4, #28
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	0018      	movs	r0, r3
 80003cc:	231c      	movs	r3, #28
 80003ce:	001a      	movs	r2, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	f001 f909 	bl	80015e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	0018      	movs	r0, r3
 80003da:	2318      	movs	r3, #24
 80003dc:	001a      	movs	r2, r3
 80003de:	2100      	movs	r1, #0
 80003e0:	f001 f902 	bl	80015e8 <memset>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80003e4:	2001      	movs	r0, #1
 80003e6:	f7ff ffd5 	bl	8000394 <LL_IOP_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PA9   ------> I2C1_SCL
  PA10   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2280      	movs	r2, #128	; 0x80
 80003ee:	0092      	lsls	r2, r2, #2
 80003f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2202      	movs	r2, #2
 80003f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2201      	movs	r2, #1
 8000402:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2201      	movs	r2, #1
 8000408:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2206      	movs	r2, #6
 800040e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000410:	1d3a      	adds	r2, r7, #4
 8000412:	23a0      	movs	r3, #160	; 0xa0
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	0011      	movs	r1, r2
 8000418:	0018      	movs	r0, r3
 800041a:	f000 fc4f 	bl	8000cbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2280      	movs	r2, #128	; 0x80
 8000422:	00d2      	lsls	r2, r2, #3
 8000424:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2202      	movs	r2, #2
 800042a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2201      	movs	r2, #1
 8000436:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2201      	movs	r2, #1
 800043c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2206      	movs	r2, #6
 8000442:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	1d3a      	adds	r2, r7, #4
 8000446:	23a0      	movs	r3, #160	; 0xa0
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	0011      	movs	r1, r2
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fc35 	bl	8000cbc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	039b      	lsls	r3, r3, #14
 8000456:	0018      	movs	r0, r3
 8000458:	f7ff ff86 	bl	8000368 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800045c:	0021      	movs	r1, r4
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x00602173;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <MX_I2C1_Init+0x108>)
 8000468:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000488:	187b      	adds	r3, r7, r1
 800048a:	4a10      	ldr	r2, [pc, #64]	; (80004cc <MX_I2C1_Init+0x10c>)
 800048c:	0019      	movs	r1, r3
 800048e:	0010      	movs	r0, r2
 8000490:	f000 fd0c 	bl	8000eac <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C1);
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <MX_I2C1_Init+0x10c>)
 8000496:	0018      	movs	r0, r3
 8000498:	f7ff ff56 	bl	8000348 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_I2C1_Init+0x10c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	0018      	movs	r0, r3
 80004a4:	f7ff ff2a 	bl	80002fc <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_I2C1_Init+0x10c>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f7ff ff3c 	bl	8000328 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_I2C1_Init+0x10c>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff ff12 	bl	80002dc <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <MX_I2C1_Init+0x10c>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f7ff fefe 	bl	80002bc <LL_I2C_EnableClockStretching>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b00f      	add	sp, #60	; 0x3c
 80004c6:	bd90      	pop	{r4, r7, pc}
 80004c8:	00602173 	.word	0x00602173
 80004cc:	40005400 	.word	0x40005400

080004d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_RCC_HSI_Enable+0x18>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <LL_RCC_HSI_Enable+0x18>)
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0049      	lsls	r1, r1, #1
 80004de:	430a      	orrs	r2, r1
 80004e0:	601a      	str	r2, [r3, #0]
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <LL_RCC_HSI_IsReady+0x24>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	401a      	ands	r2, r3
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	00db      	lsls	r3, r3, #3
 80004fe:	429a      	cmp	r2, r3
 8000500:	d101      	bne.n	8000506 <LL_RCC_HSI_IsReady+0x1a>
 8000502:	2301      	movs	r3, #1
 8000504:	e000      	b.n	8000508 <LL_RCC_HSI_IsReady+0x1c>
 8000506:	2300      	movs	r3, #0
}
 8000508:	0018      	movs	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40021000 	.word	0x40021000

08000514 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LL_RCC_SetSysClkSource+0x24>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	2207      	movs	r2, #7
 8000522:	4393      	bics	r3, r2
 8000524:	0019      	movs	r1, r3
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <LL_RCC_SetSysClkSource+0x24>)
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	430a      	orrs	r2, r1
 800052c:	609a      	str	r2, [r3, #8]
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40021000 	.word	0x40021000

0800053c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <LL_RCC_GetSysClkSource+0x14>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	2238      	movs	r2, #56	; 0x38
 8000546:	4013      	ands	r3, r2
}
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	40021000 	.word	0x40021000

08000554 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <LL_RCC_SetAHBPrescaler+0x24>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <LL_RCC_SetAHBPrescaler+0x28>)
 8000562:	4013      	ands	r3, r2
 8000564:	0019      	movs	r1, r3
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <LL_RCC_SetAHBPrescaler+0x24>)
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	430a      	orrs	r2, r1
 800056c:	609a      	str	r2, [r3, #8]
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40021000 	.word	0x40021000
 800057c:	fffff0ff 	.word	0xfffff0ff

08000580 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <LL_RCC_SetAPB1Prescaler+0x28>)
 800058e:	4013      	ands	r3, r2
 8000590:	0019      	movs	r1, r3
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	430a      	orrs	r2, r1
 8000598:	609a      	str	r2, [r3, #8]
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	40021000 	.word	0x40021000
 80005a8:	ffff8fff 	.word	0xffff8fff

080005ac <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80005b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	0c12      	lsrs	r2, r2, #16
 80005bc:	43d2      	mvns	r2, r2
 80005be:	401a      	ands	r2, r3
 80005c0:	0011      	movs	r1, r2
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	041b      	lsls	r3, r3, #16
 80005c6:	0c1a      	lsrs	r2, r3, #16
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80005ca:	430a      	orrs	r2, r1
 80005cc:	655a      	str	r2, [r3, #84]	; 0x54
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b002      	add	sp, #8
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40021000 	.word	0x40021000

080005dc <LL_RCC_SetI2CClockSource>:
  *         @arg @ref LL_RCC_I2C2_CLKSOURCE_HSI (*)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (I2CxSource >> 16U), (I2CxSource & 0x0000FFFFU));
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <LL_RCC_SetI2CClockSource+0x2c>)
 80005e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	0c12      	lsrs	r2, r2, #16
 80005ec:	43d2      	mvns	r2, r2
 80005ee:	401a      	ands	r2, r3
 80005f0:	0011      	movs	r1, r2
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	0c1a      	lsrs	r2, r3, #16
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <LL_RCC_SetI2CClockSource+0x2c>)
 80005fa:	430a      	orrs	r2, r1
 80005fc:	655a      	str	r2, [r3, #84]	; 0x54
}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	40021000 	.word	0x40021000

0800060c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <LL_RCC_PLL_Enable+0x18>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <LL_RCC_PLL_Enable+0x18>)
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	0449      	lsls	r1, r1, #17
 800061a:	430a      	orrs	r2, r1
 800061c:	601a      	str	r2, [r3, #0]
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000

08000628 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <LL_RCC_PLL_IsReady+0x24>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	049b      	lsls	r3, r3, #18
 8000634:	401a      	ands	r2, r3
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	049b      	lsls	r3, r3, #18
 800063a:	429a      	cmp	r2, r3
 800063c:	d101      	bne.n	8000642 <LL_RCC_PLL_IsReady+0x1a>
 800063e:	2301      	movs	r3, #1
 8000640:	e000      	b.n	8000644 <LL_RCC_PLL_IsReady+0x1c>
 8000642:	2300      	movs	r3, #0
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40021000 	.word	0x40021000

08000650 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	4a0a      	ldr	r2, [pc, #40]	; (800068c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000664:	4013      	ands	r3, r2
 8000666:	0019      	movs	r1, r3
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	431a      	orrs	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	431a      	orrs	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	431a      	orrs	r2, r3
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800067a:	430a      	orrs	r2, r1
 800067c:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b004      	add	sp, #16
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000
 800068c:	1fff808c 	.word	0x1fff808c

08000690 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8000696:	68da      	ldr	r2, [r3, #12]
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	0549      	lsls	r1, r1, #21
 800069e:	430a      	orrs	r2, r1
 80006a0:	60da      	str	r2, [r3, #12]
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000

080006ac <LL_APB1_GRP1_EnableClock>:
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <LL_APB1_GRP1_EnableClock+0x28>)
 80006b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <LL_APB1_GRP1_EnableClock+0x28>)
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	430a      	orrs	r2, r1
 80006be:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <LL_APB1_GRP1_EnableClock+0x28>)
 80006c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	4013      	ands	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b004      	add	sp, #16
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000

080006d8 <LL_APB2_GRP1_EnableClock>:
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <LL_APB2_GRP1_EnableClock+0x28>)
 80006e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LL_APB2_GRP1_EnableClock+0x28>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	430a      	orrs	r2, r1
 80006ea:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LL_APB2_GRP1_EnableClock+0x28>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4013      	ands	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b004      	add	sp, #16
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <LL_SYSCFG_DisableDBATT+0x1c>)
 800070e:	6819      	ldr	r1, [r3, #0]
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <LL_SYSCFG_DisableDBATT+0x1c>)
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	430a      	orrs	r2, r1
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40010000 	.word	0x40010000

08000724 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <LL_FLASH_SetLatency+0x24>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2207      	movs	r2, #7
 8000732:	4393      	bics	r3, r2
 8000734:	0019      	movs	r1, r3
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <LL_FLASH_SetLatency+0x24>)
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	430a      	orrs	r2, r1
 800073c:	601a      	str	r2, [r3, #0]
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40022000 	.word	0x40022000

0800074c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <LL_FLASH_GetLatency+0x14>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2207      	movs	r2, #7
 8000756:	4013      	ands	r3, r2
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40022000 	.word	0x40022000

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ffb5 	bl	80006d8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	055b      	lsls	r3, r3, #21
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff ff9a 	bl	80006ac <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8000778:	23c0      	movs	r3, #192	; 0xc0
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff ffc1 	bl	8000704 <LL_SYSCFG_DisableDBATT>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f807 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f7ff fd6b 	bl	8000260 <MX_GPIO_Init>
  MX_I2C1_Init();
 800078a:	f7ff fe19 	bl	80003c0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800078e:	f000 f91d 	bl	80009cc <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000792:	e7fe      	b.n	8000792 <main+0x2e>

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000798:	2002      	movs	r0, #2
 800079a:	f7ff ffc3 	bl	8000724 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	f7ff ffd4 	bl	800074c <LL_FLASH_GetLatency>
 80007a4:	0003      	movs	r3, r0
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d1fa      	bne.n	80007a0 <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 80007aa:	f7ff fe91 	bl	80004d0 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	f7ff fe9c 	bl	80004ec <LL_RCC_HSI_IsReady>
 80007b4:	0003      	movs	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d1fa      	bne.n	80007b0 <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	059b      	lsls	r3, r3, #22
 80007be:	2208      	movs	r2, #8
 80007c0:	2100      	movs	r1, #0
 80007c2:	2002      	movs	r0, #2
 80007c4:	f7ff ff44 	bl	8000650 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80007c8:	f7ff ff20 	bl	800060c <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 80007cc:	f7ff ff60 	bl	8000690 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	f7ff ff29 	bl	8000628 <LL_RCC_PLL_IsReady>
 80007d6:	0003      	movs	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d1fa      	bne.n	80007d2 <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff feb9 	bl	8000554 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80007e2:	2002      	movs	r0, #2
 80007e4:	f7ff fe96 	bl	8000514 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	f7ff fea7 	bl	800053c <LL_RCC_GetSysClkSource>
 80007ee:	0003      	movs	r3, r0
 80007f0:	2b10      	cmp	r3, #16
 80007f2:	d1fa      	bne.n	80007ea <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff fec3 	bl	8000580 <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(64000000);
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <SystemClock_Config+0x90>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 feb1 	bl	8001564 <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <SystemClock_Config+0x90>)
 8000804:	0018      	movs	r0, r3
 8000806:	f000 febd 	bl	8001584 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 800080a:	23c0      	movs	r3, #192	; 0xc0
 800080c:	031b      	lsls	r3, r3, #12
 800080e:	0018      	movs	r0, r3
 8000810:	f7ff fecc 	bl	80005ac <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8000814:	23c0      	movs	r3, #192	; 0xc0
 8000816:	059b      	lsls	r3, r3, #22
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff fedf 	bl	80005dc <LL_RCC_SetI2CClockSource>
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	03d09000 	.word	0x03d09000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <SystemInit+0x14>)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	0512      	lsls	r2, r2, #20
 800085e:	609a      	str	r2, [r3, #8]
#endif
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <LL_APB1_GRP1_EnableClock>:
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <LL_APB1_GRP1_EnableClock+0x28>)
 8000876:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <LL_APB1_GRP1_EnableClock+0x28>)
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	430a      	orrs	r2, r1
 800087e:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <LL_APB1_GRP1_EnableClock+0x28>)
 8000882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4013      	ands	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b004      	add	sp, #16
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000

08000898 <LL_IOP_GRP1_EnableClock>:
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <LL_IOP_GRP1_EnableClock+0x28>)
 80008a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <LL_IOP_GRP1_EnableClock+0x28>)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	430a      	orrs	r2, r1
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <LL_IOP_GRP1_EnableClock+0x28>)
 80008ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	4013      	ands	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b004      	add	sp, #16
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000

080008c4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2201      	movs	r2, #1
 80008d2:	431a      	orrs	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b002      	add	sp, #8
 80008de:	bd80      	pop	{r7, pc}

080008e0 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a03      	ldr	r2, [pc, #12]	; (80008fc <LL_USART_DisableFIFO+0x1c>)
 80008ee:	401a      	ands	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	601a      	str	r2, [r3, #0]
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b002      	add	sp, #8
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	dfffffff 	.word	0xdfffffff

08000900 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	08da      	lsrs	r2, r3, #3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	075b      	lsls	r3, r3, #29
 8000916:	431a      	orrs	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	609a      	str	r2, [r3, #8]
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}

08000924 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <LL_USART_SetRXFIFOThreshold+0x24>)
 8000934:	401a      	ands	r2, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	065b      	lsls	r3, r3, #25
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	609a      	str	r2, [r3, #8]
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}
 8000948:	f1ffffff 	.word	0xf1ffffff

0800094c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <LL_USART_ConfigAsyncMode+0x2c>)
 800095a:	401a      	ands	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	222a      	movs	r2, #42	; 0x2a
 8000966:	4393      	bics	r3, r2
 8000968:	001a      	movs	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	609a      	str	r2, [r3, #8]
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	ffffb7ff 	.word	0xffffb7ff

0800097c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	69da      	ldr	r2, [r3, #28]
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	039b      	lsls	r3, r3, #14
 800098c:	401a      	ands	r2, r3
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	039b      	lsls	r3, r3, #14
 8000992:	429a      	cmp	r2, r3
 8000994:	d101      	bne.n	800099a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <LL_USART_IsActiveFlag_TEACK+0x20>
 800099a:	2300      	movs	r3, #0
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	03db      	lsls	r3, r3, #15
 80009b4:	401a      	ands	r2, r3
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	03db      	lsls	r3, r3, #15
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d101      	bne.n	80009c2 <LL_USART_IsActiveFlag_REACK+0x1e>
 80009be:	2301      	movs	r3, #1
 80009c0:	e000      	b.n	80009c4 <LL_USART_IsActiveFlag_REACK+0x20>
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}

080009cc <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b08f      	sub	sp, #60	; 0x3c
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80009d2:	2418      	movs	r4, #24
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	0018      	movs	r0, r3
 80009d8:	2320      	movs	r3, #32
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f000 fe03 	bl	80015e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	003b      	movs	r3, r7
 80009e4:	0018      	movs	r0, r3
 80009e6:	2318      	movs	r3, #24
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f000 fdfc 	bl	80015e8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff ff39 	bl	800086c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff ff4c 	bl	8000898 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000a00:	003b      	movs	r3, r7
 8000a02:	2204      	movs	r2, #4
 8000a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a06:	003b      	movs	r3, r7
 8000a08:	2202      	movs	r2, #2
 8000a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a0c:	003b      	movs	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a12:	003b      	movs	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a18:	003b      	movs	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000a1e:	003b      	movs	r3, r7
 8000a20:	2201      	movs	r2, #1
 8000a22:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	003a      	movs	r2, r7
 8000a26:	23a0      	movs	r3, #160	; 0xa0
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 f945 	bl	8000cbc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000a32:	003b      	movs	r3, r7
 8000a34:	2208      	movs	r2, #8
 8000a36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a38:	003b      	movs	r3, r7
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a44:	003b      	movs	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000a50:	003b      	movs	r3, r7
 8000a52:	2201      	movs	r2, #1
 8000a54:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	003a      	movs	r2, r7
 8000a58:	23a0      	movs	r3, #160	; 0xa0
 8000a5a:	05db      	lsls	r3, r3, #23
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f92c 	bl	8000cbc <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	22e1      	movs	r2, #225	; 0xe1
 8000a6e:	0252      	lsls	r2, r2, #9
 8000a70:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000a72:	0021      	movs	r1, r4
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	220c      	movs	r2, #12
 8000a8a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <MX_USART2_UART_Init+0x128>)
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	0010      	movs	r0, r2
 8000aa0:	f000 fcb8 	bl	8001414 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_USART2_UART_Init+0x128>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ff29 	bl	8000900 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART2_UART_Init+0x128>)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f7ff ff36 	bl	8000924 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART2_UART_Init+0x128>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff ff10 	bl	80008e0 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART2_UART_Init+0x128>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff ff42 	bl	800094c <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_USART2_UART_Init+0x128>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fefa 	bl	80008c4 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART2_UART_Init+0x128>)
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff ff51 	bl	800097c <LL_USART_IsActiveFlag_TEACK>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d0f9      	beq.n	8000ad2 <MX_USART2_UART_Init+0x106>
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <MX_USART2_UART_Init+0x128>)
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff ff5f 	bl	80009a4 <LL_USART_IsActiveFlag_REACK>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d0f3      	beq.n	8000ad2 <MX_USART2_UART_Init+0x106>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b00f      	add	sp, #60	; 0x3c
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	40004400 	.word	0x40004400

08000af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000afc:	f7ff feaa 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <LoopForever+0xe>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	; (8000b44 <LoopForever+0x16>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b26:	f000 fd3b 	bl	80015a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b2a:	f7ff fe1b 	bl	8000764 <main>

08000b2e <LoopForever>:

LoopForever:
  b LoopForever
 8000b2e:	e7fe      	b.n	8000b2e <LoopForever>
  ldr   r0, =_estack
 8000b30:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b3c:	080016a8 	.word	0x080016a8
  ldr r2, =_sbss
 8000b40:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b44:	20000020 	.word	0x20000020

08000b48 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_COMP_IRQHandler>

08000b4a <LL_GPIO_SetPinMode>:
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6819      	ldr	r1, [r3, #0]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	435b      	muls	r3, r3
 8000b5e:	001a      	movs	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	189b      	adds	r3, r3, r2
 8000b66:	43db      	mvns	r3, r3
 8000b68:	400b      	ands	r3, r1
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	435b      	muls	r3, r3
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	434b      	muls	r3, r1
 8000b74:	431a      	orrs	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <LL_GPIO_SetPinOutputType>:
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	43d2      	mvns	r2, r2
 8000b96:	401a      	ands	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	434b      	muls	r3, r1
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	605a      	str	r2, [r3, #4]
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b004      	add	sp, #16
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LL_GPIO_SetPinSpeed>:
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6899      	ldr	r1, [r3, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	435b      	muls	r3, r3
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	0013      	movs	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	189b      	adds	r3, r3, r2
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	400b      	ands	r3, r1
 8000bcc:	001a      	movs	r2, r3
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	435b      	muls	r3, r3
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	434b      	muls	r3, r1
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	609a      	str	r2, [r3, #8]
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b004      	add	sp, #16
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <LL_GPIO_SetPinPull>:
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	68d9      	ldr	r1, [r3, #12]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	435b      	muls	r3, r3
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	0013      	movs	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	189b      	adds	r3, r3, r2
 8000c00:	43db      	mvns	r3, r3
 8000c02:	400b      	ands	r3, r1
 8000c04:	001a      	movs	r2, r3
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	435b      	muls	r3, r3
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	434b      	muls	r3, r1
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	60da      	str	r2, [r3, #12]
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b004      	add	sp, #16
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <LL_GPIO_SetAFPin_0_7>:
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6a19      	ldr	r1, [r3, #32]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	435b      	muls	r3, r3
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	4353      	muls	r3, r2
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	435a      	muls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	400b      	ands	r3, r1
 8000c42:	001a      	movs	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	435b      	muls	r3, r3
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	434b      	muls	r3, r1
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	434b      	muls	r3, r1
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	434b      	muls	r3, r1
 8000c54:	431a      	orrs	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	621a      	str	r2, [r3, #32]
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <LL_GPIO_SetAFPin_8_15>:
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	0a12      	lsrs	r2, r2, #8
 8000c7a:	4353      	muls	r3, r2
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	0a12      	lsrs	r2, r2, #8
 8000c80:	4353      	muls	r3, r2
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	0a12      	lsrs	r2, r2, #8
 8000c86:	435a      	muls	r2, r3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	011b      	lsls	r3, r3, #4
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	400b      	ands	r3, r1
 8000c92:	001a      	movs	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	0a09      	lsrs	r1, r1, #8
 8000c9c:	434b      	muls	r3, r1
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	0a09      	lsrs	r1, r1, #8
 8000ca2:	434b      	muls	r3, r1
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	0a09      	lsrs	r1, r1, #8
 8000ca8:	434b      	muls	r3, r1
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	434b      	muls	r3, r1
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b004      	add	sp, #16
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000cca:	e047      	b.n	8000d5c <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d039      	beq.n	8000d56 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d003      	beq.n	8000cf2 <LL_GPIO_Init+0x36>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d10d      	bne.n	8000d0e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff ff56 	bl	8000bac <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff3a 	bl	8000b82 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	691a      	ldr	r2, [r3, #16]
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff ff64 	bl	8000be4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d111      	bne.n	8000d48 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d807      	bhi.n	8000d3a <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	695a      	ldr	r2, [r3, #20]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff ff72 	bl	8000c1c <LL_GPIO_SetAFPin_0_7>
 8000d38:	e006      	b.n	8000d48 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	695a      	ldr	r2, [r3, #20]
 8000d3e:	68b9      	ldr	r1, [r7, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff ff8d 	bl	8000c62 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff fefa 	bl	8000b4a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	40da      	lsrs	r2, r3
 8000d64:	1e13      	subs	r3, r2, #0
 8000d66:	d1b1      	bne.n	8000ccc <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <LL_I2C_Enable>:
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	431a      	orrs	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	601a      	str	r2, [r3, #0]
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <LL_I2C_Disable>:
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4393      	bics	r3, r2
 8000d9e:	001a      	movs	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b002      	add	sp, #8
 8000daa:	bd80      	pop	{r7, pc}

08000dac <LL_I2C_ConfigFilters>:
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <LL_I2C_ConfigFilters+0x2c>)
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	0219      	lsls	r1, r3, #8
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	601a      	str	r2, [r3, #0]
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b004      	add	sp, #16
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	ffffe0ff 	.word	0xffffe0ff

08000ddc <LL_I2C_SetOwnAddress1>:
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	0adb      	lsrs	r3, r3, #11
 8000dee:	02da      	lsls	r2, r3, #11
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	430b      	orrs	r3, r1
 8000df6:	431a      	orrs	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	609a      	str	r2, [r3, #8]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <LL_I2C_EnableOwnAddress1>:
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	0212      	lsls	r2, r2, #8
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	609a      	str	r2, [r3, #8]
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <LL_I2C_DisableOwnAddress1>:
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <LL_I2C_DisableOwnAddress1+0x1c>)
 8000e32:	401a      	ands	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	609a      	str	r2, [r3, #8]
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b002      	add	sp, #8
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	ffff7fff 	.word	0xffff7fff

08000e44 <LL_I2C_SetTiming>:
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	611a      	str	r2, [r3, #16]
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <LL_I2C_SetMode>:
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <LL_I2C_SetMode+0x24>)
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	601a      	str	r2, [r3, #0]
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	ffcfffff 	.word	0xffcfffff

08000e84 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <LL_I2C_AcknowledgeNextData+0x24>)
 8000e94:	401a      	ands	r2, r3
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	605a      	str	r2, [r3, #4]
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	ffff7fff 	.word	0xffff7fff

08000eac <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff ff68 	bl	8000d8e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	6899      	ldr	r1, [r3, #8]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff ff6f 	bl	8000dac <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	0011      	movs	r1, r2
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff ffb4 	bl	8000e44 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff ff47 	bl	8000d72 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff ff9c 	bl	8000e24 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6919      	ldr	r1, [r3, #16]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff ff70 	bl	8000ddc <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff ff7c 	bl	8000e04 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ffa1 	bl	8000e5c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	0011      	movs	r1, r2
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff ffae 	bl	8000e84 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <LL_RCC_HSI_IsReady>:
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <LL_RCC_HSI_IsReady+0x24>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	401a      	ands	r2, r3
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d101      	bne.n	8000f4e <LL_RCC_HSI_IsReady+0x1a>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <LL_RCC_HSI_IsReady+0x1c>
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40021000 	.word	0x40021000

08000f5c <LL_RCC_LSE_IsReady>:
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <LL_RCC_LSE_IsReady+0x1c>)
 8000f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f64:	2202      	movs	r2, #2
 8000f66:	4013      	ands	r3, r2
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d101      	bne.n	8000f70 <LL_RCC_LSE_IsReady+0x14>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <LL_RCC_LSE_IsReady+0x16>
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000

08000f7c <LL_RCC_GetSysClkSource>:
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <LL_RCC_GetSysClkSource+0x14>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2238      	movs	r2, #56	; 0x38
 8000f86:	4013      	ands	r3, r2
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40021000 	.word	0x40021000

08000f94 <LL_RCC_GetAHBPrescaler>:
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <LL_RCC_GetAHBPrescaler+0x14>)
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	23f0      	movs	r3, #240	; 0xf0
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	4013      	ands	r3, r2
}
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000

08000fac <LL_RCC_GetAPB1Prescaler>:
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	23e0      	movs	r3, #224	; 0xe0
 8000fb6:	01db      	lsls	r3, r3, #7
 8000fb8:	4013      	ands	r3, r2
}
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <LL_RCC_GetUSARTClockSource>:
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <LL_RCC_GetUSARTClockSource+0x20>)
 8000fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	041b      	lsls	r3, r3, #16
 8000fd8:	4313      	orrs	r3, r2
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <LL_RCC_PLL_GetN>:
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <LL_RCC_PLL_GetN+0x14>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	227f      	movs	r2, #127	; 0x7f
 8000ff4:	4013      	ands	r3, r2
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000

08001000 <LL_RCC_PLL_GetR>:
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <LL_RCC_PLL_GetR+0x14>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0f5b      	lsrs	r3, r3, #29
 800100a:	075b      	lsls	r3, r3, #29
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40021000 	.word	0x40021000

08001018 <LL_RCC_PLL_GetMainSource>:
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <LL_RCC_PLL_GetMainSource+0x14>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	40021000 	.word	0x40021000

08001030 <LL_RCC_PLL_GetDivider>:
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <LL_RCC_PLL_GetDivider+0x14>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2270      	movs	r2, #112	; 0x70
 800103a:	4013      	ands	r3, r2
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	40021000 	.word	0x40021000

08001048 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001050:	f000 f8a8 	bl	80011a4 <RCC_GetSystemClockFreq>
 8001054:	0002      	movs	r2, r0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	0018      	movs	r0, r3
 8001060:	f000 f8ce 	bl	8001200 <RCC_GetHCLKClockFreq>
 8001064:	0002      	movs	r2, r0
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	0018      	movs	r0, r3
 8001070:	f000 f8de 	bl	8001230 <RCC_GetPCLK1ClockFreq>
 8001074:	0002      	movs	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	609a      	str	r2, [r3, #8]
}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b03      	cmp	r3, #3
 8001094:	d134      	bne.n	8001100 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff ff93 	bl	8000fc4 <LL_RCC_GetUSARTClockSource>
 800109e:	0003      	movs	r3, r0
 80010a0:	4a39      	ldr	r2, [pc, #228]	; (8001188 <LL_RCC_GetUSARTClockFreq+0x104>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d016      	beq.n	80010d4 <LL_RCC_GetUSARTClockFreq+0x50>
 80010a6:	4a38      	ldr	r2, [pc, #224]	; (8001188 <LL_RCC_GetUSARTClockFreq+0x104>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d81c      	bhi.n	80010e6 <LL_RCC_GetUSARTClockFreq+0x62>
 80010ac:	4a37      	ldr	r2, [pc, #220]	; (800118c <LL_RCC_GetUSARTClockFreq+0x108>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d003      	beq.n	80010ba <LL_RCC_GetUSARTClockFreq+0x36>
 80010b2:	4a37      	ldr	r2, [pc, #220]	; (8001190 <LL_RCC_GetUSARTClockFreq+0x10c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d005      	beq.n	80010c4 <LL_RCC_GetUSARTClockFreq+0x40>
 80010b8:	e015      	b.n	80010e6 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80010ba:	f000 f873 	bl	80011a4 <RCC_GetSystemClockFreq>
 80010be:	0003      	movs	r3, r0
 80010c0:	60fb      	str	r3, [r7, #12]
        break;
 80010c2:	e05c      	b.n	800117e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80010c4:	f7ff ff36 	bl	8000f34 <LL_RCC_HSI_IsReady>
 80010c8:	0003      	movs	r3, r0
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d150      	bne.n	8001170 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <LL_RCC_GetUSARTClockFreq+0x110>)
 80010d0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80010d2:	e04d      	b.n	8001170 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80010d4:	f7ff ff42 	bl	8000f5c <LL_RCC_LSE_IsReady>
 80010d8:	0003      	movs	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d14a      	bne.n	8001174 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80010e4:	e046      	b.n	8001174 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80010e6:	f000 f85d 	bl	80011a4 <RCC_GetSystemClockFreq>
 80010ea:	0003      	movs	r3, r0
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 f887 	bl	8001200 <RCC_GetHCLKClockFreq>
 80010f2:	0003      	movs	r3, r0
 80010f4:	0018      	movs	r0, r3
 80010f6:	f000 f89b 	bl	8001230 <RCC_GetPCLK1ClockFreq>
 80010fa:	0003      	movs	r3, r0
 80010fc:	60fb      	str	r3, [r7, #12]
        break;
 80010fe:	e03e      	b.n	800117e <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b0c      	cmp	r3, #12
 8001104:	d13b      	bne.n	800117e <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff ff5b 	bl	8000fc4 <LL_RCC_GetUSARTClockSource>
 800110e:	0003      	movs	r3, r0
 8001110:	4a21      	ldr	r2, [pc, #132]	; (8001198 <LL_RCC_GetUSARTClockFreq+0x114>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d016      	beq.n	8001144 <LL_RCC_GetUSARTClockFreq+0xc0>
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <LL_RCC_GetUSARTClockFreq+0x114>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d81c      	bhi.n	8001156 <LL_RCC_GetUSARTClockFreq+0xd2>
 800111c:	4a1f      	ldr	r2, [pc, #124]	; (800119c <LL_RCC_GetUSARTClockFreq+0x118>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d003      	beq.n	800112a <LL_RCC_GetUSARTClockFreq+0xa6>
 8001122:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d005      	beq.n	8001134 <LL_RCC_GetUSARTClockFreq+0xb0>
 8001128:	e015      	b.n	8001156 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800112a:	f000 f83b 	bl	80011a4 <RCC_GetSystemClockFreq>
 800112e:	0003      	movs	r3, r0
 8001130:	60fb      	str	r3, [r7, #12]
        break;
 8001132:	e024      	b.n	800117e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8001134:	f7ff fefe 	bl	8000f34 <LL_RCC_HSI_IsReady>
 8001138:	0003      	movs	r3, r0
 800113a:	2b01      	cmp	r3, #1
 800113c:	d11c      	bne.n	8001178 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <LL_RCC_GetUSARTClockFreq+0x110>)
 8001140:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001142:	e019      	b.n	8001178 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8001144:	f7ff ff0a 	bl	8000f5c <LL_RCC_LSE_IsReady>
 8001148:	0003      	movs	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d116      	bne.n	800117c <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001154:	e012      	b.n	800117c <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001156:	f000 f825 	bl	80011a4 <RCC_GetSystemClockFreq>
 800115a:	0003      	movs	r3, r0
 800115c:	0018      	movs	r0, r3
 800115e:	f000 f84f 	bl	8001200 <RCC_GetHCLKClockFreq>
 8001162:	0003      	movs	r3, r0
 8001164:	0018      	movs	r0, r3
 8001166:	f000 f863 	bl	8001230 <RCC_GetPCLK1ClockFreq>
 800116a:	0003      	movs	r3, r0
 800116c:	60fb      	str	r3, [r7, #12]
        break;
 800116e:	e006      	b.n	800117e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	e004      	b.n	800117e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	e002      	b.n	800117e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	e000      	b.n	800117e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800117c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b004      	add	sp, #16
 8001186:	bd80      	pop	{r7, pc}
 8001188:	00030003 	.word	0x00030003
 800118c:	00030001 	.word	0x00030001
 8001190:	00030002 	.word	0x00030002
 8001194:	00f42400 	.word	0x00f42400
 8001198:	000c000c 	.word	0x000c000c
 800119c:	000c0004 	.word	0x000c0004
 80011a0:	000c0008 	.word	0x000c0008

080011a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80011aa:	f7ff fee7 	bl	8000f7c <LL_RCC_GetSysClkSource>
 80011ae:	0003      	movs	r3, r0
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d002      	beq.n	80011ba <RCC_GetSystemClockFreq+0x16>
 80011b4:	2b10      	cmp	r3, #16
 80011b6:	d003      	beq.n	80011c0 <RCC_GetSystemClockFreq+0x1c>
 80011b8:	e007      	b.n	80011ca <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <RCC_GetSystemClockFreq+0x50>)
 80011bc:	607b      	str	r3, [r7, #4]
      break;
 80011be:	e014      	b.n	80011ea <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80011c0:	f000 f84c 	bl	800125c <RCC_PLL_GetFreqDomain_SYS>
 80011c4:	0003      	movs	r3, r0
 80011c6:	607b      	str	r3, [r7, #4]
      break;
 80011c8:	e00f      	b.n	80011ea <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <RCC_GetSystemClockFreq+0x54>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0adb      	lsrs	r3, r3, #11
 80011d0:	2207      	movs	r2, #7
 80011d2:	4013      	ands	r3, r2
 80011d4:	2201      	movs	r2, #1
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 80011dc:	6839      	ldr	r1, [r7, #0]
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <RCC_GetSystemClockFreq+0x58>)
 80011e0:	f7fe ff90 	bl	8000104 <__udivsi3>
 80011e4:	0003      	movs	r3, r0
 80011e6:	607b      	str	r3, [r7, #4]
      break;
 80011e8:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80011ea:	687b      	ldr	r3, [r7, #4]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	007a1200 	.word	0x007a1200
 80011f8:	40021000 	.word	0x40021000
 80011fc:	00f42400 	.word	0x00f42400

08001200 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001208:	f7ff fec4 	bl	8000f94 <LL_RCC_GetAHBPrescaler>
 800120c:	0003      	movs	r3, r0
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	220f      	movs	r2, #15
 8001212:	401a      	ands	r2, r3
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <RCC_GetHCLKClockFreq+0x2c>)
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	58d3      	ldr	r3, [r2, r3]
 800121a:	221f      	movs	r2, #31
 800121c:	4013      	ands	r3, r2
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	40da      	lsrs	r2, r3
 8001222:	0013      	movs	r3, r2
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b002      	add	sp, #8
 800122a:	bd80      	pop	{r7, pc}
 800122c:	08001610 	.word	0x08001610

08001230 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001238:	f7ff feb8 	bl	8000fac <LL_RCC_GetAPB1Prescaler>
 800123c:	0003      	movs	r3, r0
 800123e:	0b1a      	lsrs	r2, r3, #12
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <RCC_GetPCLK1ClockFreq+0x28>)
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	58d3      	ldr	r3, [r2, r3]
 8001246:	221f      	movs	r2, #31
 8001248:	4013      	ands	r3, r2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	40da      	lsrs	r2, r3
 800124e:	0013      	movs	r3, r2
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b002      	add	sp, #8
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08001650 	.word	0x08001650

0800125c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001262:	f7ff fed9 	bl	8001018 <LL_RCC_PLL_GetMainSource>
 8001266:	0003      	movs	r3, r0
 8001268:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d003      	beq.n	8001278 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d003      	beq.n	800127e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001276:	e005      	b.n	8001284 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800127a:	607b      	str	r3, [r7, #4]
      break;
 800127c:	e005      	b.n	800128a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001280:	607b      	str	r3, [r7, #4]
      break;
 8001282:	e002      	b.n	800128a <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001286:	607b      	str	r3, [r7, #4]
      break;
 8001288:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800128a:	f7ff fead 	bl	8000fe8 <LL_RCC_PLL_GetN>
 800128e:	0002      	movs	r2, r0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4353      	muls	r3, r2
 8001294:	001c      	movs	r4, r3
 8001296:	f7ff fecb 	bl	8001030 <LL_RCC_PLL_GetDivider>
 800129a:	0003      	movs	r3, r0
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	3301      	adds	r3, #1
 80012a0:	0019      	movs	r1, r3
 80012a2:	0020      	movs	r0, r4
 80012a4:	f7fe ff2e 	bl	8000104 <__udivsi3>
 80012a8:	0003      	movs	r3, r0
 80012aa:	001c      	movs	r4, r3
 80012ac:	f7ff fea8 	bl	8001000 <LL_RCC_PLL_GetR>
 80012b0:	0003      	movs	r3, r0
 80012b2:	0f5b      	lsrs	r3, r3, #29
 80012b4:	3301      	adds	r3, #1
 80012b6:	0019      	movs	r1, r3
 80012b8:	0020      	movs	r0, r4
 80012ba:	f7fe ff23 	bl	8000104 <__udivsi3>
 80012be:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b003      	add	sp, #12
 80012c6:	bd90      	pop	{r4, r7, pc}
 80012c8:	00f42400 	.word	0x00f42400
 80012cc:	007a1200 	.word	0x007a1200

080012d0 <LL_USART_IsEnabled>:
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2201      	movs	r2, #1
 80012de:	4013      	ands	r3, r2
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <LL_USART_IsEnabled+0x18>
 80012e4:	2301      	movs	r3, #1
 80012e6:	e000      	b.n	80012ea <LL_USART_IsEnabled+0x1a>
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <LL_USART_SetPrescaler>:
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	220f      	movs	r2, #15
 8001302:	4393      	bics	r3, r2
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	b292      	uxth	r2, r2
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <LL_USART_SetStopBitsLength>:
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <LL_USART_SetStopBitsLength+0x24>)
 8001328:	401a      	ands	r2, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	605a      	str	r2, [r3, #4]
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b002      	add	sp, #8
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	ffffcfff 	.word	0xffffcfff

08001340 <LL_USART_SetHWFlowCtrl>:
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <LL_USART_SetHWFlowCtrl+0x24>)
 8001350:	401a      	ands	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	fffffcff 	.word	0xfffffcff

08001368 <LL_USART_SetBaudRate>:
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0b      	cmp	r3, #11
 800137a:	d843      	bhi.n	8001404 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	429a      	cmp	r2, r3
 8001384:	d126      	bne.n	80013d4 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	001a      	movs	r2, r3
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <LL_USART_SetBaudRate+0xa4>)
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	58d3      	ldr	r3, [r2, r3]
 8001392:	0019      	movs	r1, r3
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7fe feb5 	bl	8000104 <__udivsi3>
 800139a:	0003      	movs	r3, r0
 800139c:	005a      	lsls	r2, r3, #1
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	18d3      	adds	r3, r2, r3
 80013a4:	6a39      	ldr	r1, [r7, #32]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7fe feac 	bl	8000104 <__udivsi3>
 80013ac:	0003      	movs	r3, r0
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	4a16      	ldr	r2, [pc, #88]	; (8001410 <LL_USART_SetBaudRate+0xa8>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	085b      	lsrs	r3, r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	001a      	movs	r2, r3
 80013c2:	2307      	movs	r3, #7
 80013c4:	4013      	ands	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	60da      	str	r2, [r3, #12]
}
 80013d2:	e017      	b.n	8001404 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	001a      	movs	r2, r3
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <LL_USART_SetBaudRate+0xa4>)
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	58d3      	ldr	r3, [r2, r3]
 80013e0:	0019      	movs	r1, r3
 80013e2:	68b8      	ldr	r0, [r7, #8]
 80013e4:	f7fe fe8e 	bl	8000104 <__udivsi3>
 80013e8:	0003      	movs	r3, r0
 80013ea:	001a      	movs	r2, r3
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	18d3      	adds	r3, r2, r3
 80013f2:	6a39      	ldr	r1, [r7, #32]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7fe fe85 	bl	8000104 <__udivsi3>
 80013fa:	0003      	movs	r3, r0
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	001a      	movs	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	60da      	str	r2, [r3, #12]
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b006      	add	sp, #24
 800140a:	bd80      	pop	{r7, pc}
 800140c:	08001670 	.word	0x08001670
 8001410:	0000fff0 	.word	0x0000fff0

08001414 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b08b      	sub	sp, #44	; 0x2c
 8001418:	af02      	add	r7, sp, #8
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800141e:	231f      	movs	r3, #31
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff ff4f 	bl	80012d0 <LL_USART_IsEnabled>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d16a      	bne.n	800150c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a38      	ldr	r2, [pc, #224]	; (800151c <LL_USART_Init+0x108>)
 800143c:	401a      	ands	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6899      	ldr	r1, [r3, #8]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	4319      	orrs	r1, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	4319      	orrs	r1, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	430b      	orrs	r3, r1
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0011      	movs	r1, r2
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff ff58 	bl	8001318 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	0011      	movs	r1, r2
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff ff65 	bl	8001340 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a29      	ldr	r2, [pc, #164]	; (8001520 <LL_USART_Init+0x10c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d105      	bne.n	800148a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800147e:	2003      	movs	r0, #3
 8001480:	f7ff fe00 	bl	8001084 <LL_RCC_GetUSARTClockFreq>
 8001484:	0003      	movs	r3, r0
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	e022      	b.n	80014d0 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a25      	ldr	r2, [pc, #148]	; (8001524 <LL_USART_Init+0x110>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d105      	bne.n	800149e <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001492:	200c      	movs	r0, #12
 8001494:	f7ff fdf6 	bl	8001084 <LL_RCC_GetUSARTClockFreq>
 8001498:	0003      	movs	r3, r0
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	e018      	b.n	80014d0 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <LL_USART_Init+0x114>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d108      	bne.n	80014b8 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80014a6:	240c      	movs	r4, #12
 80014a8:	193b      	adds	r3, r7, r4
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff fdcc 	bl	8001048 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	e00b      	b.n	80014d0 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <LL_USART_Init+0x118>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d107      	bne.n	80014d0 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80014c0:	240c      	movs	r4, #12
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fdbf 	bl	8001048 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80014ca:	193b      	adds	r3, r7, r4
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d013      	beq.n	80014fe <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00f      	beq.n	80014fe <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 80014de:	231f      	movs	r3, #31
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	69dc      	ldr	r4, [r3, #28]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	69b9      	ldr	r1, [r7, #24]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	0023      	movs	r3, r4
 80014fa:	f7ff ff35 	bl	8001368 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	0011      	movs	r1, r2
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fef3 	bl	80012f2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800150c:	231f      	movs	r3, #31
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	781b      	ldrb	r3, [r3, #0]
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b009      	add	sp, #36	; 0x24
 8001518:	bd90      	pop	{r4, r7, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	efff69f3 	.word	0xefff69f3
 8001520:	40013800 	.word	0x40013800
 8001524:	40004400 	.word	0x40004400
 8001528:	40004800 	.word	0x40004800
 800152c:	40004c00 	.word	0x40004c00

08001530 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800153a:	6839      	ldr	r1, [r7, #0]
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7fe fde1 	bl	8000104 <__udivsi3>
 8001542:	0003      	movs	r3, r0
 8001544:	001a      	movs	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <LL_InitTick+0x30>)
 8001548:	3a01      	subs	r2, #1
 800154a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <LL_InitTick+0x30>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b03      	ldr	r3, [pc, #12]	; (8001560 <LL_InitTick+0x30>)
 8001554:	2205      	movs	r2, #5
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}
 8001560:	e000e010 	.word	0xe000e010

08001564 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800156c:	23fa      	movs	r3, #250	; 0xfa
 800156e:	009a      	lsls	r2, r3, #2
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff ffdb 	bl	8001530 <LL_InitTick>
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <LL_SetSystemCoreClock+0x18>)
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	20000000 	.word	0x20000000

080015a0 <__libc_init_array>:
 80015a0:	b570      	push	{r4, r5, r6, lr}
 80015a2:	2600      	movs	r6, #0
 80015a4:	4d0c      	ldr	r5, [pc, #48]	; (80015d8 <__libc_init_array+0x38>)
 80015a6:	4c0d      	ldr	r4, [pc, #52]	; (80015dc <__libc_init_array+0x3c>)
 80015a8:	1b64      	subs	r4, r4, r5
 80015aa:	10a4      	asrs	r4, r4, #2
 80015ac:	42a6      	cmp	r6, r4
 80015ae:	d109      	bne.n	80015c4 <__libc_init_array+0x24>
 80015b0:	2600      	movs	r6, #0
 80015b2:	f000 f821 	bl	80015f8 <_init>
 80015b6:	4d0a      	ldr	r5, [pc, #40]	; (80015e0 <__libc_init_array+0x40>)
 80015b8:	4c0a      	ldr	r4, [pc, #40]	; (80015e4 <__libc_init_array+0x44>)
 80015ba:	1b64      	subs	r4, r4, r5
 80015bc:	10a4      	asrs	r4, r4, #2
 80015be:	42a6      	cmp	r6, r4
 80015c0:	d105      	bne.n	80015ce <__libc_init_array+0x2e>
 80015c2:	bd70      	pop	{r4, r5, r6, pc}
 80015c4:	00b3      	lsls	r3, r6, #2
 80015c6:	58eb      	ldr	r3, [r5, r3]
 80015c8:	4798      	blx	r3
 80015ca:	3601      	adds	r6, #1
 80015cc:	e7ee      	b.n	80015ac <__libc_init_array+0xc>
 80015ce:	00b3      	lsls	r3, r6, #2
 80015d0:	58eb      	ldr	r3, [r5, r3]
 80015d2:	4798      	blx	r3
 80015d4:	3601      	adds	r6, #1
 80015d6:	e7f2      	b.n	80015be <__libc_init_array+0x1e>
 80015d8:	080016a0 	.word	0x080016a0
 80015dc:	080016a0 	.word	0x080016a0
 80015e0:	080016a0 	.word	0x080016a0
 80015e4:	080016a4 	.word	0x080016a4

080015e8 <memset>:
 80015e8:	0003      	movs	r3, r0
 80015ea:	1882      	adds	r2, r0, r2
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d100      	bne.n	80015f2 <memset+0xa>
 80015f0:	4770      	bx	lr
 80015f2:	7019      	strb	r1, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	e7f9      	b.n	80015ec <memset+0x4>

080015f8 <_init>:
 80015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015fe:	bc08      	pop	{r3}
 8001600:	469e      	mov	lr, r3
 8001602:	4770      	bx	lr

08001604 <_fini>:
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160a:	bc08      	pop	{r3}
 800160c:	469e      	mov	lr, r3
 800160e:	4770      	bx	lr
